// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: peers.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AwsIAMAuthConfigType int32

const (
	AwsIAMAuthConfigType_IAM_AUTH_AUTOMATIC          AwsIAMAuthConfigType = 0
	AwsIAMAuthConfigType_IAM_AUTH_STATIC_CREDENTIALS AwsIAMAuthConfigType = 1
	AwsIAMAuthConfigType_IAM_AUTH_ASSUME_ROLE        AwsIAMAuthConfigType = 2
)

// Enum value maps for AwsIAMAuthConfigType.
var (
	AwsIAMAuthConfigType_name = map[int32]string{
		0: "IAM_AUTH_AUTOMATIC",
		1: "IAM_AUTH_STATIC_CREDENTIALS",
		2: "IAM_AUTH_ASSUME_ROLE",
	}
	AwsIAMAuthConfigType_value = map[string]int32{
		"IAM_AUTH_AUTOMATIC":          0,
		"IAM_AUTH_STATIC_CREDENTIALS": 1,
		"IAM_AUTH_ASSUME_ROLE":        2,
	}
)

func (x AwsIAMAuthConfigType) Enum() *AwsIAMAuthConfigType {
	p := new(AwsIAMAuthConfigType)
	*p = x
	return p
}

func (x AwsIAMAuthConfigType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AwsIAMAuthConfigType) Descriptor() protoreflect.EnumDescriptor {
	return file_peers_proto_enumTypes[0].Descriptor()
}

func (AwsIAMAuthConfigType) Type() protoreflect.EnumType {
	return &file_peers_proto_enumTypes[0]
}

func (x AwsIAMAuthConfigType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AwsIAMAuthConfigType.Descriptor instead.
func (AwsIAMAuthConfigType) EnumDescriptor() ([]byte, []int) {
	return file_peers_proto_rawDescGZIP(), []int{0}
}

type PostgresAuthType int32

const (
	PostgresAuthType_POSTGRES_PASSWORD PostgresAuthType = 0
	PostgresAuthType_POSTGRES_IAM_AUTH PostgresAuthType = 1
)

// Enum value maps for PostgresAuthType.
var (
	PostgresAuthType_name = map[int32]string{
		0: "POSTGRES_PASSWORD",
		1: "POSTGRES_IAM_AUTH",
	}
	PostgresAuthType_value = map[string]int32{
		"POSTGRES_PASSWORD": 0,
		"POSTGRES_IAM_AUTH": 1,
	}
)

func (x PostgresAuthType) Enum() *PostgresAuthType {
	p := new(PostgresAuthType)
	*p = x
	return p
}

func (x PostgresAuthType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostgresAuthType) Descriptor() protoreflect.EnumDescriptor {
	return file_peers_proto_enumTypes[1].Descriptor()
}

func (PostgresAuthType) Type() protoreflect.EnumType {
	return &file_peers_proto_enumTypes[1]
}

func (x PostgresAuthType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostgresAuthType.Descriptor instead.
func (PostgresAuthType) EnumDescriptor() ([]byte, []int) {
	return file_peers_proto_rawDescGZIP(), []int{1}
}

type AvroCodec int32

const (
	AvroCodec_Null      AvroCodec = 0
	AvroCodec_Deflate   AvroCodec = 1
	AvroCodec_Snappy    AvroCodec = 2
	AvroCodec_ZStandard AvroCodec = 3
)

// Enum value maps for AvroCodec.
var (
	AvroCodec_name = map[int32]string{
		0: "Null",
		1: "Deflate",
		2: "Snappy",
		3: "ZStandard",
	}
	AvroCodec_value = map[string]int32{
		"Null":      0,
		"Deflate":   1,
		"Snappy":    2,
		"ZStandard": 3,
	}
)

func (x AvroCodec) Enum() *AvroCodec {
	p := new(AvroCodec)
	*p = x
	return p
}

func (x AvroCodec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvroCodec) Descriptor() protoreflect.EnumDescriptor {
	return file_peers_proto_enumTypes[2].Descriptor()
}

func (AvroCodec) Type() protoreflect.EnumType {
	return &file_peers_proto_enumTypes[2]
}

func (x AvroCodec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AvroCodec.Descriptor instead.
func (AvroCodec) EnumDescriptor() ([]byte, []int) {
	return file_peers_proto_rawDescGZIP(), []int{2}
}

type MySqlFlavor int32

const (
	MySqlFlavor_MYSQL_UNKNOWN MySqlFlavor = 0
	MySqlFlavor_MYSQL_MYSQL   MySqlFlavor = 1
	MySqlFlavor_MYSQL_MARIA   MySqlFlavor = 2
)

// Enum value maps for MySqlFlavor.
var (
	MySqlFlavor_name = map[int32]string{
		0: "MYSQL_UNKNOWN",
		1: "MYSQL_MYSQL",
		2: "MYSQL_MARIA",
	}
	MySqlFlavor_value = map[string]int32{
		"MYSQL_UNKNOWN": 0,
		"MYSQL_MYSQL":   1,
		"MYSQL_MARIA":   2,
	}
)

func (x MySqlFlavor) Enum() *MySqlFlavor {
	p := new(MySqlFlavor)
	*p = x
	return p
}

func (x MySqlFlavor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MySqlFlavor) Descriptor() protoreflect.EnumDescriptor {
	return file_peers_proto_enumTypes[3].Descriptor()
}

func (MySqlFlavor) Type() protoreflect.EnumType {
	return &file_peers_proto_enumTypes[3]
}

func (x MySqlFlavor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MySqlFlavor.Descriptor instead.
func (MySqlFlavor) EnumDescriptor() ([]byte, []int) {
	return file_peers_proto_rawDescGZIP(), []int{3}
}

type MySqlReplicationMechanism int32

const (
	MySqlReplicationMechanism_MYSQL_AUTO    MySqlReplicationMechanism = 0
	MySqlReplicationMechanism_MYSQL_GTID    MySqlReplicationMechanism = 1
	MySqlReplicationMechanism_MYSQL_FILEPOS MySqlReplicationMechanism = 2
)

// Enum value maps for MySqlReplicationMechanism.
var (
	MySqlReplicationMechanism_name = map[int32]string{
		0: "MYSQL_AUTO",
		1: "MYSQL_GTID",
		2: "MYSQL_FILEPOS",
	}
	MySqlReplicationMechanism_value = map[string]int32{
		"MYSQL_AUTO":    0,
		"MYSQL_GTID":    1,
		"MYSQL_FILEPOS": 2,
	}
)

func (x MySqlReplicationMechanism) Enum() *MySqlReplicationMechanism {
	p := new(MySqlReplicationMechanism)
	*p = x
	return p
}

func (x MySqlReplicationMechanism) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MySqlReplicationMechanism) Descriptor() protoreflect.EnumDescriptor {
	return file_peers_proto_enumTypes[4].Descriptor()
}

func (MySqlReplicationMechanism) Type() protoreflect.EnumType {
	return &file_peers_proto_enumTypes[4]
}

func (x MySqlReplicationMechanism) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MySqlReplicationMechanism.Descriptor instead.
func (MySqlReplicationMechanism) EnumDescriptor() ([]byte, []int) {
	return file_peers_proto_rawDescGZIP(), []int{4}
}

type MySqlAuthType int32

const (
	MySqlAuthType_MYSQL_PASSWORD MySqlAuthType = 0
	MySqlAuthType_MYSQL_IAM_AUTH MySqlAuthType = 1
)

// Enum value maps for MySqlAuthType.
var (
	MySqlAuthType_name = map[int32]string{
		0: "MYSQL_PASSWORD",
		1: "MYSQL_IAM_AUTH",
	}
	MySqlAuthType_value = map[string]int32{
		"MYSQL_PASSWORD": 0,
		"MYSQL_IAM_AUTH": 1,
	}
)

func (x MySqlAuthType) Enum() *MySqlAuthType {
	p := new(MySqlAuthType)
	*p = x
	return p
}

func (x MySqlAuthType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MySqlAuthType) Descriptor() protoreflect.EnumDescriptor {
	return file_peers_proto_enumTypes[5].Descriptor()
}

func (MySqlAuthType) Type() protoreflect.EnumType {
	return &file_peers_proto_enumTypes[5]
}

func (x MySqlAuthType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MySqlAuthType.Descriptor instead.
func (MySqlAuthType) EnumDescriptor() ([]byte, []int) {
	return file_peers_proto_rawDescGZIP(), []int{5}
}

type ElasticsearchAuthType int32

const (
	ElasticsearchAuthType_UNKNOWN ElasticsearchAuthType = 0
	ElasticsearchAuthType_NONE    ElasticsearchAuthType = 1
	ElasticsearchAuthType_BASIC   ElasticsearchAuthType = 2
	ElasticsearchAuthType_APIKEY  ElasticsearchAuthType = 3
)

// Enum value maps for ElasticsearchAuthType.
var (
	ElasticsearchAuthType_name = map[int32]string{
		0: "UNKNOWN",
		1: "NONE",
		2: "BASIC",
		3: "APIKEY",
	}
	ElasticsearchAuthType_value = map[string]int32{
		"UNKNOWN": 0,
		"NONE":    1,
		"BASIC":   2,
		"APIKEY":  3,
	}
)

func (x ElasticsearchAuthType) Enum() *ElasticsearchAuthType {
	p := new(ElasticsearchAuthType)
	*p = x
	return p
}

func (x ElasticsearchAuthType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ElasticsearchAuthType) Descriptor() protoreflect.EnumDescriptor {
	return file_peers_proto_enumTypes[6].Descriptor()
}

func (ElasticsearchAuthType) Type() protoreflect.EnumType {
	return &file_peers_proto_enumTypes[6]
}

func (x ElasticsearchAuthType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ElasticsearchAuthType.Descriptor instead.
func (ElasticsearchAuthType) EnumDescriptor() ([]byte, []int) {
	return file_peers_proto_rawDescGZIP(), []int{6}
}

type DBType int32

const (
	DBType_BIGQUERY      DBType = 0
	DBType_SNOWFLAKE     DBType = 1
	DBType_MONGO         DBType = 2
	DBType_POSTGRES      DBType = 3
	DBType_S3            DBType = 5
	DBType_SQLSERVER     DBType = 6
	DBType_MYSQL         DBType = 7
	DBType_CLICKHOUSE    DBType = 8
	DBType_KAFKA         DBType = 9
	DBType_PUBSUB        DBType = 10
	DBType_EVENTHUBS     DBType = 11
	DBType_ELASTICSEARCH DBType = 12
)

// Enum value maps for DBType.
var (
	DBType_name = map[int32]string{
		0:  "BIGQUERY",
		1:  "SNOWFLAKE",
		2:  "MONGO",
		3:  "POSTGRES",
		5:  "S3",
		6:  "SQLSERVER",
		7:  "MYSQL",
		8:  "CLICKHOUSE",
		9:  "KAFKA",
		10: "PUBSUB",
		11: "EVENTHUBS",
		12: "ELASTICSEARCH",
	}
	DBType_value = map[string]int32{
		"BIGQUERY":      0,
		"SNOWFLAKE":     1,
		"MONGO":         2,
		"POSTGRES":      3,
		"S3":            5,
		"SQLSERVER":     6,
		"MYSQL":         7,
		"CLICKHOUSE":    8,
		"KAFKA":         9,
		"PUBSUB":        10,
		"EVENTHUBS":     11,
		"ELASTICSEARCH": 12,
	}
)

func (x DBType) Enum() *DBType {
	p := new(DBType)
	*p = x
	return p
}

func (x DBType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DBType) Descriptor() protoreflect.EnumDescriptor {
	return file_peers_proto_enumTypes[7].Descriptor()
}

func (DBType) Type() protoreflect.EnumType {
	return &file_peers_proto_enumTypes[7]
}

func (x DBType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DBType.Descriptor instead.
func (DBType) EnumDescriptor() ([]byte, []int) {
	return file_peers_proto_rawDescGZIP(), []int{7}
}

type SSHConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host       string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port       uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	User       string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Password   string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	PrivateKey string `protobuf:"bytes,5,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	HostKey    string `protobuf:"bytes,6,opt,name=host_key,json=hostKey,proto3" json:"host_key,omitempty"`
}

func (x *SSHConfig) Reset() {
	*x = SSHConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peers_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSHConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSHConfig) ProtoMessage() {}

func (x *SSHConfig) ProtoReflect() protoreflect.Message {
	mi := &file_peers_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSHConfig.ProtoReflect.Descriptor instead.
func (*SSHConfig) Descriptor() ([]byte, []int) {
	return file_peers_proto_rawDescGZIP(), []int{0}
}

func (x *SSHConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SSHConfig) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *SSHConfig) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *SSHConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SSHConfig) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *SSHConfig) GetHostKey() string {
	if x != nil {
		return x.HostKey
	}
	return ""
}

type SnowflakeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     string  `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Username      string  `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	PrivateKey    string  `protobuf:"bytes,3,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	Database      string  `protobuf:"bytes,4,opt,name=database,proto3" json:"database,omitempty"`
	Warehouse     string  `protobuf:"bytes,6,opt,name=warehouse,proto3" json:"warehouse,omitempty"`
	Role          string  `protobuf:"bytes,7,opt,name=role,proto3" json:"role,omitempty"`
	QueryTimeout  uint64  `protobuf:"varint,8,opt,name=query_timeout,json=queryTimeout,proto3" json:"query_timeout,omitempty"`
	S3Integration string  `protobuf:"bytes,9,opt,name=s3_integration,json=s3Integration,proto3" json:"s3_integration,omitempty"`
	Password      *string `protobuf:"bytes,10,opt,name=password,proto3,oneof" json:"password,omitempty"`
	// defaults to _PEERDB_INTERNAL
	MetadataSchema *string `protobuf:"bytes,11,opt,name=metadata_schema,json=metadataSchema,proto3,oneof" json:"metadata_schema,omitempty"`
}

func (x *SnowflakeConfig) Reset() {
	*x = SnowflakeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peers_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnowflakeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnowflakeConfig) ProtoMessage() {}

func (x *SnowflakeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_peers_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnowflakeConfig.ProtoReflect.Descriptor instead.
func (*SnowflakeConfig) Descriptor() ([]byte, []int) {
	return file_peers_proto_rawDescGZIP(), []int{1}
}

func (x *SnowflakeConfig) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *SnowflakeConfig) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SnowflakeConfig) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *SnowflakeConfig) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *SnowflakeConfig) GetWarehouse() string {
	if x != nil {
		return x.Warehouse
	}
	return ""
}

func (x *SnowflakeConfig) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *SnowflakeConfig) GetQueryTimeout() uint64 {
	if x != nil {
		return x.QueryTimeout
	}
	return 0
}

func (x *SnowflakeConfig) GetS3Integration() string {
	if x != nil {
		return x.S3Integration
	}
	return ""
}

func (x *SnowflakeConfig) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *SnowflakeConfig) GetMetadataSchema() string {
	if x != nil && x.MetadataSchema != nil {
		return *x.MetadataSchema
	}
	return ""
}

type GcpServiceAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthType                string `protobuf:"bytes,1,opt,name=auth_type,json=authType,proto3" json:"auth_type,omitempty"`
	ProjectId               string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PrivateKeyId            string `protobuf:"bytes,3,opt,name=private_key_id,json=privateKeyId,proto3" json:"private_key_id,omitempty"`
	PrivateKey              string `protobuf:"bytes,4,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	ClientEmail             string `protobuf:"bytes,5,opt,name=client_email,json=clientEmail,proto3" json:"client_email,omitempty"`
	ClientId                string `protobuf:"bytes,6,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	AuthUri                 string `protobuf:"bytes,7,opt,name=auth_uri,json=authUri,proto3" json:"auth_uri,omitempty"`
	TokenUri                string `protobuf:"bytes,8,opt,name=token_uri,json=tokenUri,proto3" json:"token_uri,omitempty"`
	AuthProviderX509CertUrl string `protobuf:"bytes,9,opt,name=auth_provider_x509_cert_url,json=authProviderX509CertUrl,proto3" json:"auth_provider_x509_cert_url,omitempty"`
	ClientX509CertUrl       string `protobuf:"bytes,10,opt,name=client_x509_cert_url,json=clientX509CertUrl,proto3" json:"client_x509_cert_url,omitempty"`
}

func (x *GcpServiceAccount) Reset() {
	*x = GcpServiceAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peers_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GcpServiceAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpServiceAccount) ProtoMessage() {}

func (x *GcpServiceAccount) ProtoReflect() protoreflect.Message {
	mi := &file_peers_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpServiceAccount.ProtoReflect.Descriptor instead.
func (*GcpServiceAccount) Descriptor() ([]byte, []int) {
	return file_peers_proto_rawDescGZIP(), []int{2}
}

func (x *GcpServiceAccount) GetAuthType() string {
	if x != nil {
		return x.AuthType
	}
	return ""
}

func (x *GcpServiceAccount) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GcpServiceAccount) GetPrivateKeyId() string {
	if x != nil {
		return x.PrivateKeyId
	}
	return ""
}

func (x *GcpServiceAccount) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *GcpServiceAccount) GetClientEmail() string {
	if x != nil {
		return x.ClientEmail
	}
	return ""
}

func (x *GcpServiceAccount) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *GcpServiceAccount) GetAuthUri() string {
	if x != nil {
		return x.AuthUri
	}
	return ""
}

func (x *GcpServiceAccount) GetTokenUri() string {
	if x != nil {
		return x.TokenUri
	}
	return ""
}

func (x *GcpServiceAccount) GetAuthProviderX509CertUrl() string {
	if x != nil {
		return x.AuthProviderX509CertUrl
	}
	return ""
}

func (x *GcpServiceAccount) GetClientX509CertUrl() string {
	if x != nil {
		return x.ClientX509CertUrl
	}
	return ""
}

type BigqueryConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthType                string `protobuf:"bytes,1,opt,name=auth_type,json=authType,proto3" json:"auth_type,omitempty"`
	ProjectId               string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PrivateKeyId            string `protobuf:"bytes,3,opt,name=private_key_id,json=privateKeyId,proto3" json:"private_key_id,omitempty"`
	PrivateKey              string `protobuf:"bytes,4,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	ClientEmail             string `protobuf:"bytes,5,opt,name=client_email,json=clientEmail,proto3" json:"client_email,omitempty"`
	ClientId                string `protobuf:"bytes,6,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	AuthUri                 string `protobuf:"bytes,7,opt,name=auth_uri,json=authUri,proto3" json:"auth_uri,omitempty"`
	TokenUri                string `protobuf:"bytes,8,opt,name=token_uri,json=tokenUri,proto3" json:"token_uri,omitempty"`
	AuthProviderX509CertUrl string `protobuf:"bytes,9,opt,name=auth_provider_x509_cert_url,json=authProviderX509CertUrl,proto3" json:"auth_provider_x509_cert_url,omitempty"`
	ClientX509CertUrl       string `protobuf:"bytes,10,opt,name=client_x509_cert_url,json=clientX509CertUrl,proto3" json:"client_x509_cert_url,omitempty"`
	DatasetId               string `protobuf:"bytes,11,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
}

func (x *BigqueryConfig) Reset() {
	*x = BigqueryConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peers_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BigqueryConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigqueryConfig) ProtoMessage() {}

func (x *BigqueryConfig) ProtoReflect() protoreflect.Message {
	mi := &file_peers_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigqueryConfig.ProtoReflect.Descriptor instead.
func (*BigqueryConfig) Descriptor() ([]byte, []int) {
	return file_peers_proto_rawDescGZIP(), []int{3}
}

func (x *BigqueryConfig) GetAuthType() string {
	if x != nil {
		return x.AuthType
	}
	return ""
}

func (x *BigqueryConfig) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *BigqueryConfig) GetPrivateKeyId() string {
	if x != nil {
		return x.PrivateKeyId
	}
	return ""
}

func (x *BigqueryConfig) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *BigqueryConfig) GetClientEmail() string {
	if x != nil {
		return x.ClientEmail
	}
	return ""
}

func (x *BigqueryConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *BigqueryConfig) GetAuthUri() string {
	if x != nil {
		return x.AuthUri
	}
	return ""
}

func (x *BigqueryConfig) GetTokenUri() string {
	if x != nil {
		return x.TokenUri
	}
	return ""
}

func (x *BigqueryConfig) GetAuthProviderX509CertUrl() string {
	if x != nil {
		return x.AuthProviderX509CertUrl
	}
	return ""
}

func (x *BigqueryConfig) GetClientX509CertUrl() string {
	if x != nil {
		return x.ClientX509CertUrl
	}
	return ""
}

func (x *BigqueryConfig) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

type PubSubConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceAccount *GcpServiceAccount `protobuf:"bytes,1,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
}

func (x *PubSubConfig) Reset() {
	*x = PubSubConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peers_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubSubConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubSubConfig) ProtoMessage() {}

func (x *PubSubConfig) ProtoReflect() protoreflect.Message {
	mi := &file_peers_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubSubConfig.ProtoReflect.Descriptor instead.
func (*PubSubConfig) Descriptor() ([]byte, []int) {
	return file_peers_proto_rawDescGZIP(), []int{4}
}

func (x *PubSubConfig) GetServiceAccount() *GcpServiceAccount {
	if x != nil {
		return x.ServiceAccount
	}
	return nil
}

type MongoConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// can be a mongodb:// URI mapping to discrete hosts or a mongodb+srv:// URI
	// mapping to a DNS SRV record.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *MongoConfig) Reset() {
	*x = MongoConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peers_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoConfig) ProtoMessage() {}

func (x *MongoConfig) ProtoReflect() protoreflect.Message {
	mi := &file_peers_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoConfig.ProtoReflect.Descriptor instead.
func (*MongoConfig) Descriptor() ([]byte, []int) {
	return file_peers_proto_rawDescGZIP(), []int{5}
}

func (x *MongoConfig) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type AwsAuthStaticCredentialsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKeyId     string `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	SecretAccessKey string `protobuf:"bytes,2,opt,name=secret_access_key,json=secretAccessKey,proto3" json:"secret_access_key,omitempty"`
}

func (x *AwsAuthStaticCredentialsConfig) Reset() {
	*x = AwsAuthStaticCredentialsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peers_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsAuthStaticCredentialsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsAuthStaticCredentialsConfig) ProtoMessage() {}

func (x *AwsAuthStaticCredentialsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_peers_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsAuthStaticCredentialsConfig.ProtoReflect.Descriptor instead.
func (*AwsAuthStaticCredentialsConfig) Descriptor() ([]byte, []int) {
	return file_peers_proto_rawDescGZIP(), []int{6}
}

func (x *AwsAuthStaticCredentialsConfig) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *AwsAuthStaticCredentialsConfig) GetSecretAccessKey() string {
	if x != nil {
		return x.SecretAccessKey
	}
	return ""
}

type AWSAuthAssumeRoleConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssumeRoleArn  string  `protobuf:"bytes,1,opt,name=assume_role_arn,json=assumeRoleArn,proto3" json:"assume_role_arn,omitempty"`
	ChainedRoleArn *string `protobuf:"bytes,2,opt,name=chained_role_arn,json=chainedRoleArn,proto3,oneof" json:"chained_role_arn,omitempty"`
}

func (x *AWSAuthAssumeRoleConfig) Reset() {
	*x = AWSAuthAssumeRoleConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peers_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSAuthAssumeRoleConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSAuthAssumeRoleConfig) ProtoMessage() {}

func (x *AWSAuthAssumeRoleConfig) ProtoReflect() protoreflect.Message {
	mi := &file_peers_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSAuthAssumeRoleConfig.ProtoReflect.Descriptor instead.
func (*AWSAuthAssumeRoleConfig) Descriptor() ([]byte, []int) {
	return file_peers_proto_rawDescGZIP(), []int{7}
}

func (x *AWSAuthAssumeRoleConfig) GetAssumeRoleArn() string {
	if x != nil {
		return x.AssumeRoleArn
	}
	return ""
}

func (x *AWSAuthAssumeRoleConfig) GetChainedRoleArn() string {
	if x != nil && x.ChainedRoleArn != nil {
		return *x.ChainedRoleArn
	}
	return ""
}

type AwsAuthenticationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region   string               `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	AuthType AwsIAMAuthConfigType `protobuf:"varint,2,opt,name=auth_type,json=authType,proto3,enum=peerdb_peers.AwsIAMAuthConfigType" json:"auth_type,omitempty"`
	// Types that are assignable to AuthConfig:
	//
	//	*AwsAuthenticationConfig_StaticCredentials
	//	*AwsAuthenticationConfig_Role
	AuthConfig isAwsAuthenticationConfig_AuthConfig `protobuf_oneof:"auth_config"`
}

func (x *AwsAuthenticationConfig) Reset() {
	*x = AwsAuthenticationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peers_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsAuthenticationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsAuthenticationConfig) ProtoMessage() {}

func (x *AwsAuthenticationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_peers_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsAuthenticationConfig.ProtoReflect.Descriptor instead.
func (*AwsAuthenticationConfig) Descriptor() ([]byte, []int) {
	return file_peers_proto_rawDescGZIP(), []int{8}
}

func (x *AwsAuthenticationConfig) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AwsAuthenticationConfig) GetAuthType() AwsIAMAuthConfigType {
	if x != nil {
		return x.AuthType
	}
	return AwsIAMAuthConfigType_IAM_AUTH_AUTOMATIC
}

func (m *AwsAuthenticationConfig) GetAuthConfig() isAwsAuthenticationConfig_AuthConfig {
	if m != nil {
		return m.AuthConfig
	}
	return nil
}

func (x *AwsAuthenticationConfig) GetStaticCredentials() *AwsAuthStaticCredentialsConfig {
	if x, ok := x.GetAuthConfig().(*AwsAuthenticationConfig_StaticCredentials); ok {
		return x.StaticCredentials
	}
	return nil
}

func (x *AwsAuthenticationConfig) GetRole() *AWSAuthAssumeRoleConfig {
	if x, ok := x.GetAuthConfig().(*AwsAuthenticationConfig_Role); ok {
		return x.Role
	}
	return nil
}

type isAwsAuthenticationConfig_AuthConfig interface {
	isAwsAuthenticationConfig_AuthConfig()
}

type AwsAuthenticationConfig_StaticCredentials struct {
	StaticCredentials *AwsAuthStaticCredentialsConfig `protobuf:"bytes,3,opt,name=static_credentials,json=staticCredentials,proto3,oneof"`
}

type AwsAuthenticationConfig_Role struct {
	Role *AWSAuthAssumeRoleConfig `protobuf:"bytes,4,opt,name=role,proto3,oneof"`
}

func (*AwsAuthenticationConfig_StaticCredentials) isAwsAuthenticationConfig_AuthConfig() {}

func (*AwsAuthenticationConfig_Role) isAwsAuthenticationConfig_AuthConfig() {}

type PostgresConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host     string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port     uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	User     string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	Database string `protobuf:"bytes,5,opt,name=database,proto3" json:"database,omitempty"`
	TlsHost  string `protobuf:"bytes,6,opt,name=tls_host,json=tlsHost,proto3" json:"tls_host,omitempty"`
	// defaults to _peerdb_internal
	MetadataSchema *string                  `protobuf:"bytes,7,opt,name=metadata_schema,json=metadataSchema,proto3,oneof" json:"metadata_schema,omitempty"`
	SshConfig      *SSHConfig               `protobuf:"bytes,8,opt,name=ssh_config,json=sshConfig,proto3,oneof" json:"ssh_config,omitempty"`
	RootCa         *string                  `protobuf:"bytes,9,opt,name=root_ca,json=rootCa,proto3,oneof" json:"root_ca,omitempty"`
	RequireTls     bool                     `protobuf:"varint,10,opt,name=require_tls,json=requireTls,proto3" json:"require_tls,omitempty"`
	AuthType       PostgresAuthType         `protobuf:"varint,11,opt,name=auth_type,json=authType,proto3,enum=peerdb_peers.PostgresAuthType" json:"auth_type,omitempty"`
	AwsAuth        *AwsAuthenticationConfig `protobuf:"bytes,12,opt,name=aws_auth,json=awsAuth,proto3,oneof" json:"aws_auth,omitempty"`
}

func (x *PostgresConfig) Reset() {
	*x = PostgresConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peers_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostgresConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresConfig) ProtoMessage() {}

func (x *PostgresConfig) ProtoReflect() protoreflect.Message {
	mi := &file_peers_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresConfig.ProtoReflect.Descriptor instead.
func (*PostgresConfig) Descriptor() ([]byte, []int) {
	return file_peers_proto_rawDescGZIP(), []int{9}
}

func (x *PostgresConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *PostgresConfig) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PostgresConfig) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *PostgresConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *PostgresConfig) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *PostgresConfig) GetTlsHost() string {
	if x != nil {
		return x.TlsHost
	}
	return ""
}

func (x *PostgresConfig) GetMetadataSchema() string {
	if x != nil && x.MetadataSchema != nil {
		return *x.MetadataSchema
	}
	return ""
}

func (x *PostgresConfig) GetSshConfig() *SSHConfig {
	if x != nil {
		return x.SshConfig
	}
	return nil
}

func (x *PostgresConfig) GetRootCa() string {
	if x != nil && x.RootCa != nil {
		return *x.RootCa
	}
	return ""
}

func (x *PostgresConfig) GetRequireTls() bool {
	if x != nil {
		return x.RequireTls
	}
	return false
}

func (x *PostgresConfig) GetAuthType() PostgresAuthType {
	if x != nil {
		return x.AuthType
	}
	return PostgresAuthType_POSTGRES_PASSWORD
}

func (x *PostgresConfig) GetAwsAuth() *AwsAuthenticationConfig {
	if x != nil {
		return x.AwsAuth
	}
	return nil
}

type EventHubConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace     string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ResourceGroup string `protobuf:"bytes,2,opt,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`
	Location      string `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	// if this is empty PeerDB uses `AZURE_SUBSCRIPTION_ID` environment variable.
	SubscriptionId string `protobuf:"bytes,5,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	// defaults to 3
	PartitionCount uint32 `protobuf:"varint,6,opt,name=partition_count,json=partitionCount,proto3" json:"partition_count,omitempty"`
	// defaults to 7
	MessageRetentionInDays uint32 `protobuf:"varint,7,opt,name=message_retention_in_days,json=messageRetentionInDays,proto3" json:"message_retention_in_days,omitempty"`
}

func (x *EventHubConfig) Reset() {
	*x = EventHubConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peers_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventHubConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventHubConfig) ProtoMessage() {}

func (x *EventHubConfig) ProtoReflect() protoreflect.Message {
	mi := &file_peers_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventHubConfig.ProtoReflect.Descriptor instead.
func (*EventHubConfig) Descriptor() ([]byte, []int) {
	return file_peers_proto_rawDescGZIP(), []int{10}
}

func (x *EventHubConfig) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *EventHubConfig) GetResourceGroup() string {
	if x != nil {
		return x.ResourceGroup
	}
	return ""
}

func (x *EventHubConfig) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *EventHubConfig) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *EventHubConfig) GetPartitionCount() uint32 {
	if x != nil {
		return x.PartitionCount
	}
	return 0
}

func (x *EventHubConfig) GetMessageRetentionInDays() uint32 {
	if x != nil {
		return x.MessageRetentionInDays
	}
	return 0
}

type EventHubGroupConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// event hub namespace name to event hub config
	Eventhubs     map[string]*EventHubConfig `protobuf:"bytes,1,rep,name=eventhubs,proto3" json:"eventhubs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UnnestColumns []string                   `protobuf:"bytes,3,rep,name=unnest_columns,json=unnestColumns,proto3" json:"unnest_columns,omitempty"`
}

func (x *EventHubGroupConfig) Reset() {
	*x = EventHubGroupConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peers_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventHubGroupConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventHubGroupConfig) ProtoMessage() {}

func (x *EventHubGroupConfig) ProtoReflect() protoreflect.Message {
	mi := &file_peers_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventHubGroupConfig.ProtoReflect.Descriptor instead.
func (*EventHubGroupConfig) Descriptor() ([]byte, []int) {
	return file_peers_proto_rawDescGZIP(), []int{11}
}

func (x *EventHubGroupConfig) GetEventhubs() map[string]*EventHubConfig {
	if x != nil {
		return x.Eventhubs
	}
	return nil
}

func (x *EventHubGroupConfig) GetUnnestColumns() []string {
	if x != nil {
		return x.UnnestColumns
	}
	return nil
}

type S3Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url             string    `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	AccessKeyId     *string   `protobuf:"bytes,2,opt,name=access_key_id,json=accessKeyId,proto3,oneof" json:"access_key_id,omitempty"`
	SecretAccessKey *string   `protobuf:"bytes,3,opt,name=secret_access_key,json=secretAccessKey,proto3,oneof" json:"secret_access_key,omitempty"`
	RoleArn         *string   `protobuf:"bytes,4,opt,name=role_arn,json=roleArn,proto3,oneof" json:"role_arn,omitempty"`
	Region          *string   `protobuf:"bytes,5,opt,name=region,proto3,oneof" json:"region,omitempty"`
	Endpoint        *string   `protobuf:"bytes,6,opt,name=endpoint,proto3,oneof" json:"endpoint,omitempty"`
	RootCa          *string   `protobuf:"bytes,7,opt,name=root_ca,json=rootCa,proto3,oneof" json:"root_ca,omitempty"`
	TlsHost         string    `protobuf:"bytes,8,opt,name=tls_host,json=tlsHost,proto3" json:"tls_host,omitempty"`
	Codec           AvroCodec `protobuf:"varint,9,opt,name=codec,proto3,enum=peerdb_peers.AvroCodec" json:"codec,omitempty"`
}

func (x *S3Config) Reset() {
	*x = S3Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peers_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Config) ProtoMessage() {}

func (x *S3Config) ProtoReflect() protoreflect.Message {
	mi := &file_peers_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Config.ProtoReflect.Descriptor instead.
func (*S3Config) Descriptor() ([]byte, []int) {
	return file_peers_proto_rawDescGZIP(), []int{12}
}

func (x *S3Config) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *S3Config) GetAccessKeyId() string {
	if x != nil && x.AccessKeyId != nil {
		return *x.AccessKeyId
	}
	return ""
}

func (x *S3Config) GetSecretAccessKey() string {
	if x != nil && x.SecretAccessKey != nil {
		return *x.SecretAccessKey
	}
	return ""
}

func (x *S3Config) GetRoleArn() string {
	if x != nil && x.RoleArn != nil {
		return *x.RoleArn
	}
	return ""
}

func (x *S3Config) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *S3Config) GetEndpoint() string {
	if x != nil && x.Endpoint != nil {
		return *x.Endpoint
	}
	return ""
}

func (x *S3Config) GetRootCa() string {
	if x != nil && x.RootCa != nil {
		return *x.RootCa
	}
	return ""
}

func (x *S3Config) GetTlsHost() string {
	if x != nil {
		return x.TlsHost
	}
	return ""
}

func (x *S3Config) GetCodec() AvroCodec {
	if x != nil {
		return x.Codec
	}
	return AvroCodec_Null
}

type ClickhouseConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host            string    `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port            uint32    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	User            string    `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Password        string    `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	Database        string    `protobuf:"bytes,5,opt,name=database,proto3" json:"database,omitempty"`
	S3Path          string    `protobuf:"bytes,6,opt,name=s3_path,json=s3Path,proto3" json:"s3_path,omitempty"`
	AccessKeyId     string    `protobuf:"bytes,7,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	SecretAccessKey string    `protobuf:"bytes,8,opt,name=secret_access_key,json=secretAccessKey,proto3" json:"secret_access_key,omitempty"`
	Region          string    `protobuf:"bytes,9,opt,name=region,proto3" json:"region,omitempty"`
	DisableTls      bool      `protobuf:"varint,10,opt,name=disable_tls,json=disableTls,proto3" json:"disable_tls,omitempty"`
	Endpoint        *string   `protobuf:"bytes,11,opt,name=endpoint,proto3,oneof" json:"endpoint,omitempty"`
	Certificate     *string   `protobuf:"bytes,12,opt,name=certificate,proto3,oneof" json:"certificate,omitempty"`
	PrivateKey      *string   `protobuf:"bytes,13,opt,name=private_key,json=privateKey,proto3,oneof" json:"private_key,omitempty"`
	RootCa          *string   `protobuf:"bytes,14,opt,name=root_ca,json=rootCa,proto3,oneof" json:"root_ca,omitempty"`
	TlsHost         string    `protobuf:"bytes,15,opt,name=tls_host,json=tlsHost,proto3" json:"tls_host,omitempty"`
	S3              *S3Config `protobuf:"bytes,16,opt,name=s3,proto3,oneof" json:"s3,omitempty"`
	Cluster         string    `protobuf:"bytes,17,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Replicated      bool      `protobuf:"varint,18,opt,name=replicated,proto3" json:"replicated,omitempty"`
}

func (x *ClickhouseConfig) Reset() {
	*x = ClickhouseConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peers_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig) ProtoMessage() {}

func (x *ClickhouseConfig) ProtoReflect() protoreflect.Message {
	mi := &file_peers_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig) Descriptor() ([]byte, []int) {
	return file_peers_proto_rawDescGZIP(), []int{13}
}

func (x *ClickhouseConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ClickhouseConfig) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ClickhouseConfig) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ClickhouseConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ClickhouseConfig) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *ClickhouseConfig) GetS3Path() string {
	if x != nil {
		return x.S3Path
	}
	return ""
}

func (x *ClickhouseConfig) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *ClickhouseConfig) GetSecretAccessKey() string {
	if x != nil {
		return x.SecretAccessKey
	}
	return ""
}

func (x *ClickhouseConfig) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ClickhouseConfig) GetDisableTls() bool {
	if x != nil {
		return x.DisableTls
	}
	return false
}

func (x *ClickhouseConfig) GetEndpoint() string {
	if x != nil && x.Endpoint != nil {
		return *x.Endpoint
	}
	return ""
}

func (x *ClickhouseConfig) GetCertificate() string {
	if x != nil && x.Certificate != nil {
		return *x.Certificate
	}
	return ""
}

func (x *ClickhouseConfig) GetPrivateKey() string {
	if x != nil && x.PrivateKey != nil {
		return *x.PrivateKey
	}
	return ""
}

func (x *ClickhouseConfig) GetRootCa() string {
	if x != nil && x.RootCa != nil {
		return *x.RootCa
	}
	return ""
}

func (x *ClickhouseConfig) GetTlsHost() string {
	if x != nil {
		return x.TlsHost
	}
	return ""
}

func (x *ClickhouseConfig) GetS3() *S3Config {
	if x != nil {
		return x.S3
	}
	return nil
}

func (x *ClickhouseConfig) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *ClickhouseConfig) GetReplicated() bool {
	if x != nil {
		return x.Replicated
	}
	return false
}

type SqlServerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server   string `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	Port     uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	User     string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	Database string `protobuf:"bytes,5,opt,name=database,proto3" json:"database,omitempty"`
}

func (x *SqlServerConfig) Reset() {
	*x = SqlServerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peers_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlServerConfig) ProtoMessage() {}

func (x *SqlServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_peers_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlServerConfig.ProtoReflect.Descriptor instead.
func (*SqlServerConfig) Descriptor() ([]byte, []int) {
	return file_peers_proto_rawDescGZIP(), []int{14}
}

func (x *SqlServerConfig) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *SqlServerConfig) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *SqlServerConfig) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *SqlServerConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SqlServerConfig) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

type MySqlConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host                 string                    `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port                 uint32                    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	User                 string                    `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Password             string                    `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	Database             string                    `protobuf:"bytes,5,opt,name=database,proto3" json:"database,omitempty"`
	Setup                []string                  `protobuf:"bytes,6,rep,name=setup,proto3" json:"setup,omitempty"`
	Compression          uint32                    `protobuf:"varint,7,opt,name=compression,proto3" json:"compression,omitempty"`
	DisableTls           bool                      `protobuf:"varint,8,opt,name=disable_tls,json=disableTls,proto3" json:"disable_tls,omitempty"`
	Flavor               MySqlFlavor               `protobuf:"varint,9,opt,name=flavor,proto3,enum=peerdb_peers.MySqlFlavor" json:"flavor,omitempty"`
	SshConfig            *SSHConfig                `protobuf:"bytes,10,opt,name=ssh_config,json=sshConfig,proto3,oneof" json:"ssh_config,omitempty"`
	ReplicationMechanism MySqlReplicationMechanism `protobuf:"varint,11,opt,name=replication_mechanism,json=replicationMechanism,proto3,enum=peerdb_peers.MySqlReplicationMechanism" json:"replication_mechanism,omitempty"`
	TlsHost              string                    `protobuf:"bytes,13,opt,name=tls_host,json=tlsHost,proto3" json:"tls_host,omitempty"`
	RootCa               *string                   `protobuf:"bytes,14,opt,name=root_ca,json=rootCa,proto3,oneof" json:"root_ca,omitempty"`
	AuthType             MySqlAuthType             `protobuf:"varint,15,opt,name=auth_type,json=authType,proto3,enum=peerdb_peers.MySqlAuthType" json:"auth_type,omitempty"`
	AwsAuth              *AwsAuthenticationConfig  `protobuf:"bytes,16,opt,name=aws_auth,json=awsAuth,proto3,oneof" json:"aws_auth,omitempty"`
	SkipCertVerification bool                      `protobuf:"varint,17,opt,name=skip_cert_verification,json=skipCertVerification,proto3" json:"skip_cert_verification,omitempty"`
}

func (x *MySqlConfig) Reset() {
	*x = MySqlConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peers_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MySqlConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySqlConfig) ProtoMessage() {}

func (x *MySqlConfig) ProtoReflect() protoreflect.Message {
	mi := &file_peers_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySqlConfig.ProtoReflect.Descriptor instead.
func (*MySqlConfig) Descriptor() ([]byte, []int) {
	return file_peers_proto_rawDescGZIP(), []int{15}
}

func (x *MySqlConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *MySqlConfig) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *MySqlConfig) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *MySqlConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *MySqlConfig) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *MySqlConfig) GetSetup() []string {
	if x != nil {
		return x.Setup
	}
	return nil
}

func (x *MySqlConfig) GetCompression() uint32 {
	if x != nil {
		return x.Compression
	}
	return 0
}

func (x *MySqlConfig) GetDisableTls() bool {
	if x != nil {
		return x.DisableTls
	}
	return false
}

func (x *MySqlConfig) GetFlavor() MySqlFlavor {
	if x != nil {
		return x.Flavor
	}
	return MySqlFlavor_MYSQL_UNKNOWN
}

func (x *MySqlConfig) GetSshConfig() *SSHConfig {
	if x != nil {
		return x.SshConfig
	}
	return nil
}

func (x *MySqlConfig) GetReplicationMechanism() MySqlReplicationMechanism {
	if x != nil {
		return x.ReplicationMechanism
	}
	return MySqlReplicationMechanism_MYSQL_AUTO
}

func (x *MySqlConfig) GetTlsHost() string {
	if x != nil {
		return x.TlsHost
	}
	return ""
}

func (x *MySqlConfig) GetRootCa() string {
	if x != nil && x.RootCa != nil {
		return *x.RootCa
	}
	return ""
}

func (x *MySqlConfig) GetAuthType() MySqlAuthType {
	if x != nil {
		return x.AuthType
	}
	return MySqlAuthType_MYSQL_PASSWORD
}

func (x *MySqlConfig) GetAwsAuth() *AwsAuthenticationConfig {
	if x != nil {
		return x.AwsAuth
	}
	return nil
}

func (x *MySqlConfig) GetSkipCertVerification() bool {
	if x != nil {
		return x.SkipCertVerification
	}
	return false
}

type KafkaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers     []string `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
	Username    string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password    string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Sasl        string   `protobuf:"bytes,4,opt,name=sasl,proto3" json:"sasl,omitempty"`
	DisableTls  bool     `protobuf:"varint,5,opt,name=disable_tls,json=disableTls,proto3" json:"disable_tls,omitempty"`
	Partitioner string   `protobuf:"bytes,6,opt,name=partitioner,proto3" json:"partitioner,omitempty"`
}

func (x *KafkaConfig) Reset() {
	*x = KafkaConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peers_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaConfig) ProtoMessage() {}

func (x *KafkaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_peers_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaConfig.ProtoReflect.Descriptor instead.
func (*KafkaConfig) Descriptor() ([]byte, []int) {
	return file_peers_proto_rawDescGZIP(), []int{16}
}

func (x *KafkaConfig) GetServers() []string {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *KafkaConfig) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *KafkaConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *KafkaConfig) GetSasl() string {
	if x != nil {
		return x.Sasl
	}
	return ""
}

func (x *KafkaConfig) GetDisableTls() bool {
	if x != nil {
		return x.DisableTls
	}
	return false
}

func (x *KafkaConfig) GetPartitioner() string {
	if x != nil {
		return x.Partitioner
	}
	return ""
}

type ElasticsearchConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// decide if this is something actually used or single address is enough
	Addresses []string              `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	AuthType  ElasticsearchAuthType `protobuf:"varint,2,opt,name=auth_type,json=authType,proto3,enum=peerdb_peers.ElasticsearchAuthType" json:"auth_type,omitempty"`
	Username  *string               `protobuf:"bytes,3,opt,name=username,proto3,oneof" json:"username,omitempty"`
	Password  *string               `protobuf:"bytes,4,opt,name=password,proto3,oneof" json:"password,omitempty"`
	ApiKey    *string               `protobuf:"bytes,5,opt,name=api_key,json=apiKey,proto3,oneof" json:"api_key,omitempty"`
}

func (x *ElasticsearchConfig) Reset() {
	*x = ElasticsearchConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peers_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElasticsearchConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElasticsearchConfig) ProtoMessage() {}

func (x *ElasticsearchConfig) ProtoReflect() protoreflect.Message {
	mi := &file_peers_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElasticsearchConfig.ProtoReflect.Descriptor instead.
func (*ElasticsearchConfig) Descriptor() ([]byte, []int) {
	return file_peers_proto_rawDescGZIP(), []int{17}
}

func (x *ElasticsearchConfig) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *ElasticsearchConfig) GetAuthType() ElasticsearchAuthType {
	if x != nil {
		return x.AuthType
	}
	return ElasticsearchAuthType_UNKNOWN
}

func (x *ElasticsearchConfig) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *ElasticsearchConfig) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *ElasticsearchConfig) GetApiKey() string {
	if x != nil && x.ApiKey != nil {
		return *x.ApiKey
	}
	return ""
}

type Peer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type DBType `protobuf:"varint,2,opt,name=type,proto3,enum=peerdb_peers.DBType" json:"type,omitempty"`
	// Types that are assignable to Config:
	//
	//	*Peer_SnowflakeConfig
	//	*Peer_BigqueryConfig
	//	*Peer_MongoConfig
	//	*Peer_PostgresConfig
	//	*Peer_S3Config
	//	*Peer_SqlserverConfig
	//	*Peer_EventhubGroupConfig
	//	*Peer_ClickhouseConfig
	//	*Peer_KafkaConfig
	//	*Peer_PubsubConfig
	//	*Peer_ElasticsearchConfig
	//	*Peer_MysqlConfig
	Config isPeer_Config `protobuf_oneof:"config"`
}

func (x *Peer) Reset() {
	*x = Peer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peers_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer) ProtoMessage() {}

func (x *Peer) ProtoReflect() protoreflect.Message {
	mi := &file_peers_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer.ProtoReflect.Descriptor instead.
func (*Peer) Descriptor() ([]byte, []int) {
	return file_peers_proto_rawDescGZIP(), []int{18}
}

func (x *Peer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Peer) GetType() DBType {
	if x != nil {
		return x.Type
	}
	return DBType_BIGQUERY
}

func (m *Peer) GetConfig() isPeer_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *Peer) GetSnowflakeConfig() *SnowflakeConfig {
	if x, ok := x.GetConfig().(*Peer_SnowflakeConfig); ok {
		return x.SnowflakeConfig
	}
	return nil
}

func (x *Peer) GetBigqueryConfig() *BigqueryConfig {
	if x, ok := x.GetConfig().(*Peer_BigqueryConfig); ok {
		return x.BigqueryConfig
	}
	return nil
}

func (x *Peer) GetMongoConfig() *MongoConfig {
	if x, ok := x.GetConfig().(*Peer_MongoConfig); ok {
		return x.MongoConfig
	}
	return nil
}

func (x *Peer) GetPostgresConfig() *PostgresConfig {
	if x, ok := x.GetConfig().(*Peer_PostgresConfig); ok {
		return x.PostgresConfig
	}
	return nil
}

func (x *Peer) GetS3Config() *S3Config {
	if x, ok := x.GetConfig().(*Peer_S3Config); ok {
		return x.S3Config
	}
	return nil
}

func (x *Peer) GetSqlserverConfig() *SqlServerConfig {
	if x, ok := x.GetConfig().(*Peer_SqlserverConfig); ok {
		return x.SqlserverConfig
	}
	return nil
}

func (x *Peer) GetEventhubGroupConfig() *EventHubGroupConfig {
	if x, ok := x.GetConfig().(*Peer_EventhubGroupConfig); ok {
		return x.EventhubGroupConfig
	}
	return nil
}

func (x *Peer) GetClickhouseConfig() *ClickhouseConfig {
	if x, ok := x.GetConfig().(*Peer_ClickhouseConfig); ok {
		return x.ClickhouseConfig
	}
	return nil
}

func (x *Peer) GetKafkaConfig() *KafkaConfig {
	if x, ok := x.GetConfig().(*Peer_KafkaConfig); ok {
		return x.KafkaConfig
	}
	return nil
}

func (x *Peer) GetPubsubConfig() *PubSubConfig {
	if x, ok := x.GetConfig().(*Peer_PubsubConfig); ok {
		return x.PubsubConfig
	}
	return nil
}

func (x *Peer) GetElasticsearchConfig() *ElasticsearchConfig {
	if x, ok := x.GetConfig().(*Peer_ElasticsearchConfig); ok {
		return x.ElasticsearchConfig
	}
	return nil
}

func (x *Peer) GetMysqlConfig() *MySqlConfig {
	if x, ok := x.GetConfig().(*Peer_MysqlConfig); ok {
		return x.MysqlConfig
	}
	return nil
}

type isPeer_Config interface {
	isPeer_Config()
}

type Peer_SnowflakeConfig struct {
	SnowflakeConfig *SnowflakeConfig `protobuf:"bytes,3,opt,name=snowflake_config,json=snowflakeConfig,proto3,oneof"`
}

type Peer_BigqueryConfig struct {
	BigqueryConfig *BigqueryConfig `protobuf:"bytes,4,opt,name=bigquery_config,json=bigqueryConfig,proto3,oneof"`
}

type Peer_MongoConfig struct {
	MongoConfig *MongoConfig `protobuf:"bytes,5,opt,name=mongo_config,json=mongoConfig,proto3,oneof"`
}

type Peer_PostgresConfig struct {
	PostgresConfig *PostgresConfig `protobuf:"bytes,6,opt,name=postgres_config,json=postgresConfig,proto3,oneof"`
}

type Peer_S3Config struct {
	S3Config *S3Config `protobuf:"bytes,8,opt,name=s3_config,json=s3Config,proto3,oneof"`
}

type Peer_SqlserverConfig struct {
	SqlserverConfig *SqlServerConfig `protobuf:"bytes,9,opt,name=sqlserver_config,json=sqlserverConfig,proto3,oneof"`
}

type Peer_EventhubGroupConfig struct {
	EventhubGroupConfig *EventHubGroupConfig `protobuf:"bytes,10,opt,name=eventhub_group_config,json=eventhubGroupConfig,proto3,oneof"`
}

type Peer_ClickhouseConfig struct {
	ClickhouseConfig *ClickhouseConfig `protobuf:"bytes,11,opt,name=clickhouse_config,json=clickhouseConfig,proto3,oneof"`
}

type Peer_KafkaConfig struct {
	KafkaConfig *KafkaConfig `protobuf:"bytes,12,opt,name=kafka_config,json=kafkaConfig,proto3,oneof"`
}

type Peer_PubsubConfig struct {
	PubsubConfig *PubSubConfig `protobuf:"bytes,13,opt,name=pubsub_config,json=pubsubConfig,proto3,oneof"`
}

type Peer_ElasticsearchConfig struct {
	ElasticsearchConfig *ElasticsearchConfig `protobuf:"bytes,14,opt,name=elasticsearch_config,json=elasticsearchConfig,proto3,oneof"`
}

type Peer_MysqlConfig struct {
	MysqlConfig *MySqlConfig `protobuf:"bytes,15,opt,name=mysql_config,json=mysqlConfig,proto3,oneof"`
}

func (*Peer_SnowflakeConfig) isPeer_Config() {}

func (*Peer_BigqueryConfig) isPeer_Config() {}

func (*Peer_MongoConfig) isPeer_Config() {}

func (*Peer_PostgresConfig) isPeer_Config() {}

func (*Peer_S3Config) isPeer_Config() {}

func (*Peer_SqlserverConfig) isPeer_Config() {}

func (*Peer_EventhubGroupConfig) isPeer_Config() {}

func (*Peer_ClickhouseConfig) isPeer_Config() {}

func (*Peer_KafkaConfig) isPeer_Config() {}

func (*Peer_PubsubConfig) isPeer_Config() {}

func (*Peer_ElasticsearchConfig) isPeer_Config() {}

func (*Peer_MysqlConfig) isPeer_Config() {}

var file_peers_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         16551842,
		Name:          "peerdb_peers.peerdb_redacted",
		Tag:           "varint,16551842,opt,name=peerdb_redacted",
		Filename:      "peers.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional bool peerdb_redacted = 16551842;
	E_PeerdbRedacted = &file_peers_proto_extTypes[0]
)

var File_peers_proto protoreflect.FileDescriptor

var file_peers_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70,
	0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x1a, 0x20, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb4, 0x01,
	0x0a, 0x09, 0x53, 0x53, 0x48, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x90, 0xfa, 0x91, 0x3f, 0x01,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0b, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x05, 0x90, 0xfa, 0x91, 0x3f, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x20, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x90, 0xfa, 0x91, 0x3f, 0x01, 0x52, 0x07, 0x68, 0x6f, 0x73,
	0x74, 0x4b, 0x65, 0x79, 0x22, 0x85, 0x03, 0x0a, 0x0f, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61,
	0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x90, 0xfa, 0x91, 0x3f, 0x01, 0x52,
	0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x33, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x33, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x90, 0xfa, 0x91, 0x3f, 0x01, 0x48, 0x00,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a,
	0x0f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x8b, 0x03, 0x0a,
	0x11, 0x47, 0x63, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x90, 0xfa, 0x91, 0x3f, 0x01, 0x52, 0x0c, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0b, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x05, 0x90, 0xfa, 0x91, 0x3f, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x55, 0x72, 0x69, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x72, 0x69, 0x12, 0x3c, 0x0a, 0x1b, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x78, 0x35, 0x30,
	0x39, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x61, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x58, 0x35,
	0x30, 0x39, 0x43, 0x65, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x78, 0x35, 0x30, 0x39, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x58,
	0x35, 0x30, 0x39, 0x43, 0x65, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x22, 0xa7, 0x03, 0x0a, 0x0e, 0x42,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0e, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x05, 0x90, 0xfa, 0x91, 0x3f, 0x01, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x90, 0xfa, 0x91,
	0x3f, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x55, 0x72, 0x69, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x55, 0x72, 0x69, 0x12, 0x3c, 0x0a, 0x1b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x78, 0x35, 0x30, 0x39, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x61, 0x75, 0x74,
	0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x58, 0x35, 0x30, 0x39, 0x43, 0x65, 0x72,
	0x74, 0x55, 0x72, 0x6c, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x78,
	0x35, 0x30, 0x39, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x58, 0x35, 0x30, 0x39, 0x43, 0x65,
	0x72, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x0c, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x63, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x26,
	0x0a, 0x0b, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a,
	0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x90, 0xfa, 0x91, 0x3f,
	0x01, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0x7e, 0x0a, 0x1e, 0x41, 0x77, 0x73, 0x41, 0x75, 0x74,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x05, 0x90, 0xfa, 0x91, 0x3f, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05,
	0x90, 0xfa, 0x91, 0x3f, 0x01, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x22, 0x85, 0x01, 0x0a, 0x17, 0x41, 0x57, 0x53, 0x41, 0x75,
	0x74, 0x68, 0x41, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x73, 0x73,
	0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x12, 0x2d, 0x0a, 0x10, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52,
	0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x22, 0x9d,
	0x02, 0x0a, 0x17, 0x41, 0x77, 0x73, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x70,
	0x65, 0x65, 0x72, 0x73, 0x2e, 0x41, 0x77, 0x73, 0x49, 0x41, 0x4d, 0x41, 0x75, 0x74, 0x68, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x41,
	0x77, 0x73, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52,
	0x11, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2e,
	0x41, 0x57, 0x53, 0x41, 0x75, 0x74, 0x68, 0x41, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x42,
	0x0d, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x97,
	0x04, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x05, 0x90, 0xfa, 0x91, 0x3f, 0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x6c, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x6c, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x65, 0x65, 0x72,
	0x64, 0x62, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x53, 0x48, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x01, 0x52, 0x09, 0x73, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x05, 0x90, 0xfa, 0x91, 0x3f, 0x01, 0x48, 0x02, 0x52, 0x06, 0x72, 0x6f,
	0x6f, 0x74, 0x43, 0x61, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x54, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x64, 0x62, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x75, 0x74,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x61, 0x77, 0x73, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62,
	0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x41, 0x77, 0x73, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x03,
	0x52, 0x07, 0x61, 0x77, 0x73, 0x41, 0x75, 0x74, 0x68, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x61, 0x77, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x22, 0x85, 0x02, 0x0a, 0x0e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x0f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x90, 0xfa, 0x91, 0x3f, 0x01, 0x52, 0x0e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x61,
	0x79, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x44, 0x61, 0x79, 0x73,
	0x22, 0xe8, 0x01, 0x0a, 0x13, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x75, 0x62, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4e, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x68, 0x75, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x64, 0x62, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x75, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x68, 0x75, 0x62, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x68, 0x75, 0x62, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x6e, 0x65,
	0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x75, 0x6e, 0x6e, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x1a,
	0x5a, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x68, 0x75, 0x62, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaa, 0x03, 0x0a, 0x08,
	0x53, 0x33, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x0d, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x05, 0x90, 0xfa, 0x91, 0x3f, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x11, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x90, 0xfa, 0x91, 0x3f, 0x01, 0x48, 0x01, 0x52, 0x0f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x05, 0x90, 0xfa, 0x91, 0x3f, 0x01, 0x48, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x74,
	0x43, 0x61, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6c, 0x73, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6c, 0x73, 0x48, 0x6f, 0x73, 0x74,
	0x12, 0x2d, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x41,
	0x76, 0x72, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x6f, 0x6c, 0x65,
	0x5f, 0x61, 0x72, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x22, 0xa0, 0x05, 0x0a, 0x10, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x90, 0xfa, 0x91,
	0x3f, 0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x33, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x33, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x29, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x90, 0xfa, 0x91, 0x3f, 0x01, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x11,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x90, 0xfa, 0x91, 0x3f, 0x01, 0x52, 0x0f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0b, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05,
	0x90, 0xfa, 0x91, 0x3f, 0x01, 0x48, 0x01, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x90, 0xfa,
	0x91, 0x3f, 0x01, 0x48, 0x02, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x90, 0xfa, 0x91, 0x3f, 0x01, 0x48, 0x03, 0x52, 0x06,
	0x72, 0x6f, 0x6f, 0x74, 0x43, 0x61, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6c, 0x73,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6c, 0x73,
	0x48, 0x6f, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x73, 0x33, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2e,
	0x53, 0x33, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x04, 0x52, 0x02, 0x73, 0x33, 0x88, 0x01,
	0x01, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x5f, 0x63, 0x61, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x73, 0x33, 0x22, 0x90, 0x01, 0x0a, 0x0f,
	0x53, 0x71, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x21, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x05, 0x90, 0xfa, 0x91, 0x3f, 0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x22, 0xce,
	0x05, 0x0a, 0x0b, 0x4d, 0x79, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x90, 0xfa,
	0x91, 0x3f, 0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x74,
	0x75, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73, 0x65, 0x74, 0x75, 0x70, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6c, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x6c, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x2e, 0x4d, 0x79, 0x53, 0x71, 0x6c, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x06, 0x66,
	0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x65, 0x65, 0x72,
	0x64, 0x62, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x53, 0x48, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x09, 0x73, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x5c, 0x0a, 0x15, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73,
	0x2e, 0x4d, 0x79, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x52, 0x14, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x6c, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x6c, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x07, 0x72,
	0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x90, 0xfa,
	0x91, 0x3f, 0x01, 0x48, 0x01, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x61, 0x88, 0x01, 0x01,
	0x12, 0x38, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x70, 0x65, 0x65,
	0x72, 0x73, 0x2e, 0x4d, 0x79, 0x53, 0x71, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x61, 0x77,
	0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x41, 0x77, 0x73, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x02, 0x52, 0x07, 0x61, 0x77, 0x73, 0x41, 0x75, 0x74, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x73, 0x6b, 0x69, 0x70, 0x43, 0x65, 0x72, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x73, 0x68, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f,
	0x63, 0x61, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x77, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x22,
	0xbd, 0x01, 0x0a, 0x0b, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x90, 0xfa, 0x91, 0x3f, 0x01, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x73, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x61, 0x73, 0x6c, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6c, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x22,
	0x89, 0x02, 0x0a, 0x13, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64,
	0x62, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61,
	0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x90, 0xfa, 0x91, 0x3f,
	0x01, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x05, 0x90, 0xfa, 0x91, 0x3f, 0x01, 0x48, 0x02, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0xb2, 0x07, 0x0a, 0x04,
	0x50, 0x65, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f,
	0x70, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x44, 0x42, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x6e, 0x6f, 0x77,
	0x66, 0x6c, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0f, 0x73,
	0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x47,
	0x0a, 0x0f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62,
	0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x42, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x67, 0x6f,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x6f, 0x6e,
	0x67, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x67,
	0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x47, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x35, 0x0a, 0x09, 0x73, 0x33, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x70, 0x65, 0x65,
	0x72, 0x73, 0x2e, 0x53, 0x33, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x08, 0x73,
	0x33, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4a, 0x0a, 0x10, 0x73, 0x71, 0x6c, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73,
	0x2e, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x00, 0x52, 0x0f, 0x73, 0x71, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x57, 0x0a, 0x15, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x68, 0x75, 0x62, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x75, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x68, 0x75,
	0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4d, 0x0a, 0x11,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62,
	0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e, 0x0a, 0x0c, 0x6b,
	0x61, 0x66, 0x6b, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73,
	0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0b,
	0x6b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x41, 0x0a, 0x0d, 0x70,
	0x75, 0x62, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x2e, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x0c, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x56,
	0x0a, 0x14, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x6c, 0x61, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x13, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e, 0x0a, 0x0c, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x79, 0x53, 0x71,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x79, 0x73, 0x71, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2a, 0x69, 0x0a, 0x14, 0x41, 0x77, 0x73, 0x49, 0x41, 0x4d, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x41, 0x4d, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x10, 0x00,
	0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x41, 0x4d, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x49, 0x43, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x53, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x41, 0x4d, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x41, 0x53,
	0x53, 0x55, 0x4d, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x40, 0x0a, 0x10, 0x50,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x15, 0x0a, 0x11, 0x50, 0x4f, 0x53, 0x54, 0x47, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x41, 0x53, 0x53,
	0x57, 0x4f, 0x52, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4f, 0x53, 0x54, 0x47, 0x52,
	0x45, 0x53, 0x5f, 0x49, 0x41, 0x4d, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x01, 0x2a, 0x3d, 0x0a,
	0x09, 0x41, 0x76, 0x72, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x75,
	0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x66, 0x6c, 0x61, 0x74, 0x65, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6e, 0x61, 0x70, 0x70, 0x79, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x5a, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x10, 0x03, 0x2a, 0x42, 0x0a, 0x0b,
	0x4d, 0x79, 0x53, 0x71, 0x6c, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x4d,
	0x59, 0x53, 0x51, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x5f, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x5f, 0x4d, 0x41, 0x52, 0x49, 0x41, 0x10, 0x02,
	0x2a, 0x4e, 0x0a, 0x19, 0x4d, 0x79, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x0e, 0x0a,
	0x0a, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x5f, 0x47, 0x54, 0x49, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x50, 0x4f, 0x53, 0x10, 0x02,
	0x2a, 0x37, 0x0a, 0x0d, 0x4d, 0x79, 0x53, 0x71, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57,
	0x4f, 0x52, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x5f, 0x49,
	0x41, 0x4d, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x01, 0x2a, 0x45, 0x0a, 0x15, 0x45, 0x6c, 0x61,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x41, 0x53,
	0x49, 0x43, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x50, 0x49, 0x4b, 0x45, 0x59, 0x10, 0x03,
	0x2a, 0xa9, 0x01, 0x0a, 0x06, 0x44, 0x42, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x42,
	0x49, 0x47, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x4e, 0x4f,
	0x57, 0x46, 0x4c, 0x41, 0x4b, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x4e, 0x47,
	0x4f, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4f, 0x53, 0x54, 0x47, 0x52, 0x45, 0x53, 0x10,
	0x03, 0x12, 0x06, 0x0a, 0x02, 0x53, 0x33, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x51, 0x4c,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x59, 0x53, 0x51,
	0x4c, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x48, 0x4f, 0x55, 0x53,
	0x45, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x10, 0x09, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x55, 0x42, 0x53, 0x55, 0x42, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x48, 0x55, 0x42, 0x53, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4c, 0x41,
	0x53, 0x54, 0x49, 0x43, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x0c, 0x3a, 0x4c, 0x0a, 0x0f,
	0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x65, 0x64, 0x12,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xa2,
	0x9f, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x52,
	0x65, 0x64, 0x61, 0x63, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x7c, 0x0a, 0x10, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x42, 0x0a,
	0x50, 0x65, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x10, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0xa2, 0x02,
	0x03, 0x50, 0x58, 0x58, 0xaa, 0x02, 0x0b, 0x50, 0x65, 0x65, 0x72, 0x64, 0x62, 0x50, 0x65, 0x65,
	0x72, 0x73, 0xca, 0x02, 0x0b, 0x50, 0x65, 0x65, 0x72, 0x64, 0x62, 0x50, 0x65, 0x65, 0x72, 0x73,
	0xe2, 0x02, 0x17, 0x50, 0x65, 0x65, 0x72, 0x64, 0x62, 0x50, 0x65, 0x65, 0x72, 0x73, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0b, 0x50, 0x65, 0x65,
	0x72, 0x64, 0x62, 0x50, 0x65, 0x65, 0x72, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_peers_proto_rawDescOnce sync.Once
	file_peers_proto_rawDescData = file_peers_proto_rawDesc
)

func file_peers_proto_rawDescGZIP() []byte {
	file_peers_proto_rawDescOnce.Do(func() {
		file_peers_proto_rawDescData = protoimpl.X.CompressGZIP(file_peers_proto_rawDescData)
	})
	return file_peers_proto_rawDescData
}

var file_peers_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_peers_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_peers_proto_goTypes = []interface{}{
	(AwsIAMAuthConfigType)(0),              // 0: peerdb_peers.AwsIAMAuthConfigType
	(PostgresAuthType)(0),                  // 1: peerdb_peers.PostgresAuthType
	(AvroCodec)(0),                         // 2: peerdb_peers.AvroCodec
	(MySqlFlavor)(0),                       // 3: peerdb_peers.MySqlFlavor
	(MySqlReplicationMechanism)(0),         // 4: peerdb_peers.MySqlReplicationMechanism
	(MySqlAuthType)(0),                     // 5: peerdb_peers.MySqlAuthType
	(ElasticsearchAuthType)(0),             // 6: peerdb_peers.ElasticsearchAuthType
	(DBType)(0),                            // 7: peerdb_peers.DBType
	(*SSHConfig)(nil),                      // 8: peerdb_peers.SSHConfig
	(*SnowflakeConfig)(nil),                // 9: peerdb_peers.SnowflakeConfig
	(*GcpServiceAccount)(nil),              // 10: peerdb_peers.GcpServiceAccount
	(*BigqueryConfig)(nil),                 // 11: peerdb_peers.BigqueryConfig
	(*PubSubConfig)(nil),                   // 12: peerdb_peers.PubSubConfig
	(*MongoConfig)(nil),                    // 13: peerdb_peers.MongoConfig
	(*AwsAuthStaticCredentialsConfig)(nil), // 14: peerdb_peers.AwsAuthStaticCredentialsConfig
	(*AWSAuthAssumeRoleConfig)(nil),        // 15: peerdb_peers.AWSAuthAssumeRoleConfig
	(*AwsAuthenticationConfig)(nil),        // 16: peerdb_peers.AwsAuthenticationConfig
	(*PostgresConfig)(nil),                 // 17: peerdb_peers.PostgresConfig
	(*EventHubConfig)(nil),                 // 18: peerdb_peers.EventHubConfig
	(*EventHubGroupConfig)(nil),            // 19: peerdb_peers.EventHubGroupConfig
	(*S3Config)(nil),                       // 20: peerdb_peers.S3Config
	(*ClickhouseConfig)(nil),               // 21: peerdb_peers.ClickhouseConfig
	(*SqlServerConfig)(nil),                // 22: peerdb_peers.SqlServerConfig
	(*MySqlConfig)(nil),                    // 23: peerdb_peers.MySqlConfig
	(*KafkaConfig)(nil),                    // 24: peerdb_peers.KafkaConfig
	(*ElasticsearchConfig)(nil),            // 25: peerdb_peers.ElasticsearchConfig
	(*Peer)(nil),                           // 26: peerdb_peers.Peer
	nil,                                    // 27: peerdb_peers.EventHubGroupConfig.EventhubsEntry
	(*descriptorpb.FieldOptions)(nil),      // 28: google.protobuf.FieldOptions
}
var file_peers_proto_depIdxs = []int32{
	10, // 0: peerdb_peers.PubSubConfig.service_account:type_name -> peerdb_peers.GcpServiceAccount
	0,  // 1: peerdb_peers.AwsAuthenticationConfig.auth_type:type_name -> peerdb_peers.AwsIAMAuthConfigType
	14, // 2: peerdb_peers.AwsAuthenticationConfig.static_credentials:type_name -> peerdb_peers.AwsAuthStaticCredentialsConfig
	15, // 3: peerdb_peers.AwsAuthenticationConfig.role:type_name -> peerdb_peers.AWSAuthAssumeRoleConfig
	8,  // 4: peerdb_peers.PostgresConfig.ssh_config:type_name -> peerdb_peers.SSHConfig
	1,  // 5: peerdb_peers.PostgresConfig.auth_type:type_name -> peerdb_peers.PostgresAuthType
	16, // 6: peerdb_peers.PostgresConfig.aws_auth:type_name -> peerdb_peers.AwsAuthenticationConfig
	27, // 7: peerdb_peers.EventHubGroupConfig.eventhubs:type_name -> peerdb_peers.EventHubGroupConfig.EventhubsEntry
	2,  // 8: peerdb_peers.S3Config.codec:type_name -> peerdb_peers.AvroCodec
	20, // 9: peerdb_peers.ClickhouseConfig.s3:type_name -> peerdb_peers.S3Config
	3,  // 10: peerdb_peers.MySqlConfig.flavor:type_name -> peerdb_peers.MySqlFlavor
	8,  // 11: peerdb_peers.MySqlConfig.ssh_config:type_name -> peerdb_peers.SSHConfig
	4,  // 12: peerdb_peers.MySqlConfig.replication_mechanism:type_name -> peerdb_peers.MySqlReplicationMechanism
	5,  // 13: peerdb_peers.MySqlConfig.auth_type:type_name -> peerdb_peers.MySqlAuthType
	16, // 14: peerdb_peers.MySqlConfig.aws_auth:type_name -> peerdb_peers.AwsAuthenticationConfig
	6,  // 15: peerdb_peers.ElasticsearchConfig.auth_type:type_name -> peerdb_peers.ElasticsearchAuthType
	7,  // 16: peerdb_peers.Peer.type:type_name -> peerdb_peers.DBType
	9,  // 17: peerdb_peers.Peer.snowflake_config:type_name -> peerdb_peers.SnowflakeConfig
	11, // 18: peerdb_peers.Peer.bigquery_config:type_name -> peerdb_peers.BigqueryConfig
	13, // 19: peerdb_peers.Peer.mongo_config:type_name -> peerdb_peers.MongoConfig
	17, // 20: peerdb_peers.Peer.postgres_config:type_name -> peerdb_peers.PostgresConfig
	20, // 21: peerdb_peers.Peer.s3_config:type_name -> peerdb_peers.S3Config
	22, // 22: peerdb_peers.Peer.sqlserver_config:type_name -> peerdb_peers.SqlServerConfig
	19, // 23: peerdb_peers.Peer.eventhub_group_config:type_name -> peerdb_peers.EventHubGroupConfig
	21, // 24: peerdb_peers.Peer.clickhouse_config:type_name -> peerdb_peers.ClickhouseConfig
	24, // 25: peerdb_peers.Peer.kafka_config:type_name -> peerdb_peers.KafkaConfig
	12, // 26: peerdb_peers.Peer.pubsub_config:type_name -> peerdb_peers.PubSubConfig
	25, // 27: peerdb_peers.Peer.elasticsearch_config:type_name -> peerdb_peers.ElasticsearchConfig
	23, // 28: peerdb_peers.Peer.mysql_config:type_name -> peerdb_peers.MySqlConfig
	18, // 29: peerdb_peers.EventHubGroupConfig.EventhubsEntry.value:type_name -> peerdb_peers.EventHubConfig
	28, // 30: peerdb_peers.peerdb_redacted:extendee -> google.protobuf.FieldOptions
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	30, // [30:31] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_peers_proto_init() }
func file_peers_proto_init() {
	if File_peers_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_peers_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSHConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peers_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnowflakeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peers_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GcpServiceAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peers_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BigqueryConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peers_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubSubConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peers_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peers_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsAuthStaticCredentialsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peers_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSAuthAssumeRoleConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peers_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsAuthenticationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peers_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostgresConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peers_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventHubConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peers_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventHubGroupConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peers_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peers_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peers_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlServerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peers_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MySqlConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peers_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peers_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElasticsearchConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peers_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Peer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_peers_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_peers_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_peers_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*AwsAuthenticationConfig_StaticCredentials)(nil),
		(*AwsAuthenticationConfig_Role)(nil),
	}
	file_peers_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_peers_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_peers_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_peers_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_peers_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_peers_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*Peer_SnowflakeConfig)(nil),
		(*Peer_BigqueryConfig)(nil),
		(*Peer_MongoConfig)(nil),
		(*Peer_PostgresConfig)(nil),
		(*Peer_S3Config)(nil),
		(*Peer_SqlserverConfig)(nil),
		(*Peer_EventhubGroupConfig)(nil),
		(*Peer_ClickhouseConfig)(nil),
		(*Peer_KafkaConfig)(nil),
		(*Peer_PubsubConfig)(nil),
		(*Peer_ElasticsearchConfig)(nil),
		(*Peer_MysqlConfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_peers_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   20,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_peers_proto_goTypes,
		DependencyIndexes: file_peers_proto_depIdxs,
		EnumInfos:         file_peers_proto_enumTypes,
		MessageInfos:      file_peers_proto_msgTypes,
		ExtensionInfos:    file_peers_proto_extTypes,
	}.Build()
	File_peers_proto = out.File
	file_peers_proto_rawDesc = nil
	file_peers_proto_goTypes = nil
	file_peers_proto_depIdxs = nil
}
