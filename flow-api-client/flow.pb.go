// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: flow.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TableEngine int32

const (
	TableEngine_CH_ENGINE_REPLACING_MERGE_TREE            TableEngine = 0
	TableEngine_CH_ENGINE_MERGE_TREE                      TableEngine = 1
	TableEngine_CH_ENGINE_NULL                            TableEngine = 2
	TableEngine_CH_ENGINE_REPLICATED_REPLACING_MERGE_TREE TableEngine = 3
	TableEngine_CH_ENGINE_REPLICATED_MERGE_TREE           TableEngine = 4
)

// Enum value maps for TableEngine.
var (
	TableEngine_name = map[int32]string{
		0: "CH_ENGINE_REPLACING_MERGE_TREE",
		1: "CH_ENGINE_MERGE_TREE",
		2: "CH_ENGINE_NULL",
		3: "CH_ENGINE_REPLICATED_REPLACING_MERGE_TREE",
		4: "CH_ENGINE_REPLICATED_MERGE_TREE",
	}
	TableEngine_value = map[string]int32{
		"CH_ENGINE_REPLACING_MERGE_TREE":            0,
		"CH_ENGINE_MERGE_TREE":                      1,
		"CH_ENGINE_NULL":                            2,
		"CH_ENGINE_REPLICATED_REPLACING_MERGE_TREE": 3,
		"CH_ENGINE_REPLICATED_MERGE_TREE":           4,
	}
)

func (x TableEngine) Enum() *TableEngine {
	p := new(TableEngine)
	*p = x
	return p
}

func (x TableEngine) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableEngine) Descriptor() protoreflect.EnumDescriptor {
	return file_flow_proto_enumTypes[0].Descriptor()
}

func (TableEngine) Type() protoreflect.EnumType {
	return &file_flow_proto_enumTypes[0]
}

func (x TableEngine) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TableEngine.Descriptor instead.
func (TableEngine) EnumDescriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{0}
}

// protos for qrep
type QRepWriteType int32

const (
	QRepWriteType_QREP_WRITE_MODE_APPEND QRepWriteType = 0
	QRepWriteType_QREP_WRITE_MODE_UPSERT QRepWriteType = 1
	// only valid when initial_copy_true is set to true. TRUNCATES tables before reverting to APPEND.
	QRepWriteType_QREP_WRITE_MODE_OVERWRITE QRepWriteType = 2
)

// Enum value maps for QRepWriteType.
var (
	QRepWriteType_name = map[int32]string{
		0: "QREP_WRITE_MODE_APPEND",
		1: "QREP_WRITE_MODE_UPSERT",
		2: "QREP_WRITE_MODE_OVERWRITE",
	}
	QRepWriteType_value = map[string]int32{
		"QREP_WRITE_MODE_APPEND":    0,
		"QREP_WRITE_MODE_UPSERT":    1,
		"QREP_WRITE_MODE_OVERWRITE": 2,
	}
)

func (x QRepWriteType) Enum() *QRepWriteType {
	p := new(QRepWriteType)
	*p = x
	return p
}

func (x QRepWriteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QRepWriteType) Descriptor() protoreflect.EnumDescriptor {
	return file_flow_proto_enumTypes[1].Descriptor()
}

func (QRepWriteType) Type() protoreflect.EnumType {
	return &file_flow_proto_enumTypes[1]
}

func (x QRepWriteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QRepWriteType.Descriptor instead.
func (QRepWriteType) EnumDescriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{1}
}

type TypeSystem int32

const (
	TypeSystem_Q  TypeSystem = 0
	TypeSystem_PG TypeSystem = 1
)

// Enum value maps for TypeSystem.
var (
	TypeSystem_name = map[int32]string{
		0: "Q",
		1: "PG",
	}
	TypeSystem_value = map[string]int32{
		"Q":  0,
		"PG": 1,
	}
)

func (x TypeSystem) Enum() *TypeSystem {
	p := new(TypeSystem)
	*p = x
	return p
}

func (x TypeSystem) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TypeSystem) Descriptor() protoreflect.EnumDescriptor {
	return file_flow_proto_enumTypes[2].Descriptor()
}

func (TypeSystem) Type() protoreflect.EnumType {
	return &file_flow_proto_enumTypes[2]
}

func (x TypeSystem) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TypeSystem.Descriptor instead.
func (TypeSystem) EnumDescriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{2}
}

// UI reads current workflow status and also requests status changes using same enum
// see flow/cmd/handler.go FlowStateChange
type FlowStatus int32

const (
	// should never be read by UI, bail
	FlowStatus_STATUS_UNKNOWN FlowStatus = 0
	// enable pause and terminate buttons
	FlowStatus_STATUS_RUNNING FlowStatus = 1
	// pause button becomes resume button
	FlowStatus_STATUS_PAUSED  FlowStatus = 2
	FlowStatus_STATUS_PAUSING FlowStatus = 3
	// not reachable in QRep mirrors
	FlowStatus_STATUS_SETUP FlowStatus = 4
	// not reachable in QRep mirrors
	FlowStatus_STATUS_SNAPSHOT    FlowStatus = 5
	FlowStatus_STATUS_TERMINATING FlowStatus = 6
	FlowStatus_STATUS_TERMINATED  FlowStatus = 7
	FlowStatus_STATUS_COMPLETED   FlowStatus = 8
	FlowStatus_STATUS_RESYNC      FlowStatus = 9
)

// Enum value maps for FlowStatus.
var (
	FlowStatus_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_RUNNING",
		2: "STATUS_PAUSED",
		3: "STATUS_PAUSING",
		4: "STATUS_SETUP",
		5: "STATUS_SNAPSHOT",
		6: "STATUS_TERMINATING",
		7: "STATUS_TERMINATED",
		8: "STATUS_COMPLETED",
		9: "STATUS_RESYNC",
	}
	FlowStatus_value = map[string]int32{
		"STATUS_UNKNOWN":     0,
		"STATUS_RUNNING":     1,
		"STATUS_PAUSED":      2,
		"STATUS_PAUSING":     3,
		"STATUS_SETUP":       4,
		"STATUS_SNAPSHOT":    5,
		"STATUS_TERMINATING": 6,
		"STATUS_TERMINATED":  7,
		"STATUS_COMPLETED":   8,
		"STATUS_RESYNC":      9,
	}
)

func (x FlowStatus) Enum() *FlowStatus {
	p := new(FlowStatus)
	*p = x
	return p
}

func (x FlowStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_flow_proto_enumTypes[3].Descriptor()
}

func (FlowStatus) Type() protoreflect.EnumType {
	return &file_flow_proto_enumTypes[3]
}

func (x FlowStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowStatus.Descriptor instead.
func (FlowStatus) EnumDescriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{3}
}

type DynconfValueType int32

const (
	DynconfValueType_UNKNOWN DynconfValueType = 0
	DynconfValueType_STRING  DynconfValueType = 1
	DynconfValueType_INT     DynconfValueType = 2
	DynconfValueType_UINT    DynconfValueType = 3
	DynconfValueType_BOOL    DynconfValueType = 4
)

// Enum value maps for DynconfValueType.
var (
	DynconfValueType_name = map[int32]string{
		0: "UNKNOWN",
		1: "STRING",
		2: "INT",
		3: "UINT",
		4: "BOOL",
	}
	DynconfValueType_value = map[string]int32{
		"UNKNOWN": 0,
		"STRING":  1,
		"INT":     2,
		"UINT":    3,
		"BOOL":    4,
	}
)

func (x DynconfValueType) Enum() *DynconfValueType {
	p := new(DynconfValueType)
	*p = x
	return p
}

func (x DynconfValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DynconfValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_flow_proto_enumTypes[4].Descriptor()
}

func (DynconfValueType) Type() protoreflect.EnumType {
	return &file_flow_proto_enumTypes[4]
}

func (x DynconfValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DynconfValueType.Descriptor instead.
func (DynconfValueType) EnumDescriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{4}
}

type DynconfApplyMode int32

const (
	DynconfApplyMode_APPLY_MODE_UNKNOWN DynconfApplyMode = 0
	// should apply immediately
	DynconfApplyMode_APPLY_MODE_IMMEDIATE DynconfApplyMode = 1
	// should apply after the mirror is paused and resumed
	DynconfApplyMode_APPLY_MODE_AFTER_RESUME DynconfApplyMode = 2
	// should apply after pod is restarted
	DynconfApplyMode_APPLY_MODE_RESTART DynconfApplyMode = 3
	// only applies to newly created mirrors
	DynconfApplyMode_APPLY_MODE_NEW_MIRROR DynconfApplyMode = 4
)

// Enum value maps for DynconfApplyMode.
var (
	DynconfApplyMode_name = map[int32]string{
		0: "APPLY_MODE_UNKNOWN",
		1: "APPLY_MODE_IMMEDIATE",
		2: "APPLY_MODE_AFTER_RESUME",
		3: "APPLY_MODE_RESTART",
		4: "APPLY_MODE_NEW_MIRROR",
	}
	DynconfApplyMode_value = map[string]int32{
		"APPLY_MODE_UNKNOWN":      0,
		"APPLY_MODE_IMMEDIATE":    1,
		"APPLY_MODE_AFTER_RESUME": 2,
		"APPLY_MODE_RESTART":      3,
		"APPLY_MODE_NEW_MIRROR":   4,
	}
)

func (x DynconfApplyMode) Enum() *DynconfApplyMode {
	p := new(DynconfApplyMode)
	*p = x
	return p
}

func (x DynconfApplyMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DynconfApplyMode) Descriptor() protoreflect.EnumDescriptor {
	return file_flow_proto_enumTypes[5].Descriptor()
}

func (DynconfApplyMode) Type() protoreflect.EnumType {
	return &file_flow_proto_enumTypes[5]
}

func (x DynconfApplyMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DynconfApplyMode.Descriptor instead.
func (DynconfApplyMode) EnumDescriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{5}
}

type DynconfTarget int32

const (
	DynconfTarget_ALL        DynconfTarget = 0
	DynconfTarget_BIGQUERY   DynconfTarget = 1
	DynconfTarget_SNOWFLAKE  DynconfTarget = 2
	DynconfTarget_CLICKHOUSE DynconfTarget = 3
	DynconfTarget_QUEUES     DynconfTarget = 4
)

// Enum value maps for DynconfTarget.
var (
	DynconfTarget_name = map[int32]string{
		0: "ALL",
		1: "BIGQUERY",
		2: "SNOWFLAKE",
		3: "CLICKHOUSE",
		4: "QUEUES",
	}
	DynconfTarget_value = map[string]int32{
		"ALL":        0,
		"BIGQUERY":   1,
		"SNOWFLAKE":  2,
		"CLICKHOUSE": 3,
		"QUEUES":     4,
	}
)

func (x DynconfTarget) Enum() *DynconfTarget {
	p := new(DynconfTarget)
	*p = x
	return p
}

func (x DynconfTarget) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DynconfTarget) Descriptor() protoreflect.EnumDescriptor {
	return file_flow_proto_enumTypes[6].Descriptor()
}

func (DynconfTarget) Type() protoreflect.EnumType {
	return &file_flow_proto_enumTypes[6]
}

func (x DynconfTarget) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DynconfTarget.Descriptor instead.
func (DynconfTarget) EnumDescriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{6}
}

type FlowOperation int32

const (
	FlowOperation_FLOW_OPERATION_UNKNOWN   FlowOperation = 0
	FlowOperation_FLOW_OPERATION_SYNC      FlowOperation = 1
	FlowOperation_FLOW_OPERATION_NORMALIZE FlowOperation = 2
)

// Enum value maps for FlowOperation.
var (
	FlowOperation_name = map[int32]string{
		0: "FLOW_OPERATION_UNKNOWN",
		1: "FLOW_OPERATION_SYNC",
		2: "FLOW_OPERATION_NORMALIZE",
	}
	FlowOperation_value = map[string]int32{
		"FLOW_OPERATION_UNKNOWN":   0,
		"FLOW_OPERATION_SYNC":      1,
		"FLOW_OPERATION_NORMALIZE": 2,
	}
)

func (x FlowOperation) Enum() *FlowOperation {
	p := new(FlowOperation)
	*p = x
	return p
}

func (x FlowOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_flow_proto_enumTypes[7].Descriptor()
}

func (FlowOperation) Type() protoreflect.EnumType {
	return &file_flow_proto_enumTypes[7]
}

func (x FlowOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowOperation.Descriptor instead.
func (FlowOperation) EnumDescriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{7}
}

type AlertInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowName string `protobuf:"bytes,1,opt,name=flow_name,json=flowName,proto3" json:"flow_name,omitempty"`
	Message  string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AlertInput) Reset() {
	*x = AlertInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertInput) ProtoMessage() {}

func (x *AlertInput) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertInput.ProtoReflect.Descriptor instead.
func (*AlertInput) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{0}
}

func (x *AlertInput) GetFlowName() string {
	if x != nil {
		return x.FlowName
	}
	return ""
}

func (x *AlertInput) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TableNameMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceTableName      string `protobuf:"bytes,1,opt,name=source_table_name,json=sourceTableName,proto3" json:"source_table_name,omitempty"`
	DestinationTableName string `protobuf:"bytes,2,opt,name=destination_table_name,json=destinationTableName,proto3" json:"destination_table_name,omitempty"`
}

func (x *TableNameMapping) Reset() {
	*x = TableNameMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableNameMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableNameMapping) ProtoMessage() {}

func (x *TableNameMapping) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableNameMapping.ProtoReflect.Descriptor instead.
func (*TableNameMapping) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{1}
}

func (x *TableNameMapping) GetSourceTableName() string {
	if x != nil {
		return x.SourceTableName
	}
	return ""
}

func (x *TableNameMapping) GetDestinationTableName() string {
	if x != nil {
		return x.DestinationTableName
	}
	return ""
}

type ColumnSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceName      string `protobuf:"bytes,1,opt,name=source_name,json=sourceName,proto3" json:"source_name,omitempty"`
	DestinationName string `protobuf:"bytes,2,opt,name=destination_name,json=destinationName,proto3" json:"destination_name,omitempty"`
	DestinationType string `protobuf:"bytes,3,opt,name=destination_type,json=destinationType,proto3" json:"destination_type,omitempty"`
	Ordering        int32  `protobuf:"varint,4,opt,name=ordering,proto3" json:"ordering,omitempty"`
	NullableEnabled bool   `protobuf:"varint,5,opt,name=nullable_enabled,json=nullableEnabled,proto3" json:"nullable_enabled,omitempty"`
}

func (x *ColumnSetting) Reset() {
	*x = ColumnSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnSetting) ProtoMessage() {}

func (x *ColumnSetting) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnSetting.ProtoReflect.Descriptor instead.
func (*ColumnSetting) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{2}
}

func (x *ColumnSetting) GetSourceName() string {
	if x != nil {
		return x.SourceName
	}
	return ""
}

func (x *ColumnSetting) GetDestinationName() string {
	if x != nil {
		return x.DestinationName
	}
	return ""
}

func (x *ColumnSetting) GetDestinationType() string {
	if x != nil {
		return x.DestinationType
	}
	return ""
}

func (x *ColumnSetting) GetOrdering() int32 {
	if x != nil {
		return x.Ordering
	}
	return 0
}

func (x *ColumnSetting) GetNullableEnabled() bool {
	if x != nil {
		return x.NullableEnabled
	}
	return false
}

type TableMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceTableIdentifier      string           `protobuf:"bytes,1,opt,name=source_table_identifier,json=sourceTableIdentifier,proto3" json:"source_table_identifier,omitempty"`
	DestinationTableIdentifier string           `protobuf:"bytes,2,opt,name=destination_table_identifier,json=destinationTableIdentifier,proto3" json:"destination_table_identifier,omitempty"`
	PartitionKey               string           `protobuf:"bytes,3,opt,name=partition_key,json=partitionKey,proto3" json:"partition_key,omitempty"`
	Exclude                    []string         `protobuf:"bytes,4,rep,name=exclude,proto3" json:"exclude,omitempty"`
	Columns                    []*ColumnSetting `protobuf:"bytes,5,rep,name=columns,proto3" json:"columns,omitempty"`
	Engine                     TableEngine      `protobuf:"varint,6,opt,name=engine,proto3,enum=peerdb_flow.TableEngine" json:"engine,omitempty"`
	ShardingKey                string           `protobuf:"bytes,7,opt,name=sharding_key,json=shardingKey,proto3" json:"sharding_key,omitempty"`
	PolicyName                 string           `protobuf:"bytes,8,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
}

func (x *TableMapping) Reset() {
	*x = TableMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableMapping) ProtoMessage() {}

func (x *TableMapping) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableMapping.ProtoReflect.Descriptor instead.
func (*TableMapping) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{3}
}

func (x *TableMapping) GetSourceTableIdentifier() string {
	if x != nil {
		return x.SourceTableIdentifier
	}
	return ""
}

func (x *TableMapping) GetDestinationTableIdentifier() string {
	if x != nil {
		return x.DestinationTableIdentifier
	}
	return ""
}

func (x *TableMapping) GetPartitionKey() string {
	if x != nil {
		return x.PartitionKey
	}
	return ""
}

func (x *TableMapping) GetExclude() []string {
	if x != nil {
		return x.Exclude
	}
	return nil
}

func (x *TableMapping) GetColumns() []*ColumnSetting {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *TableMapping) GetEngine() TableEngine {
	if x != nil {
		return x.Engine
	}
	return TableEngine_CH_ENGINE_REPLACING_MERGE_TREE
}

func (x *TableMapping) GetShardingKey() string {
	if x != nil {
		return x.ShardingKey
	}
	return ""
}

func (x *TableMapping) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

type SetupInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Env      map[string]string `protobuf:"bytes,1,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FlowName string            `protobuf:"bytes,2,opt,name=flow_name,json=flowName,proto3" json:"flow_name,omitempty"`
	PeerName string            `protobuf:"bytes,3,opt,name=peer_name,json=peerName,proto3" json:"peer_name,omitempty"`
}

func (x *SetupInput) Reset() {
	*x = SetupInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetupInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupInput) ProtoMessage() {}

func (x *SetupInput) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupInput.ProtoReflect.Descriptor instead.
func (*SetupInput) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{4}
}

func (x *SetupInput) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *SetupInput) GetFlowName() string {
	if x != nil {
		return x.FlowName
	}
	return ""
}

func (x *SetupInput) GetPeerName() string {
	if x != nil {
		return x.PeerName
	}
	return ""
}

type FlowConnectionConfigs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowJobName string `protobuf:"bytes,1,opt,name=flow_job_name,json=flowJobName,proto3" json:"flow_job_name,omitempty"`
	// config for the CDC flow itself
	// currently, TableMappings, MaxBatchSize and IdleTimeoutSeconds are dynamic via Temporal signals
	TableMappings       []*TableMapping `protobuf:"bytes,4,rep,name=table_mappings,json=tableMappings,proto3" json:"table_mappings,omitempty"`
	MaxBatchSize        uint32          `protobuf:"varint,5,opt,name=max_batch_size,json=maxBatchSize,proto3" json:"max_batch_size,omitempty"`
	IdleTimeoutSeconds  uint64          `protobuf:"varint,6,opt,name=idle_timeout_seconds,json=idleTimeoutSeconds,proto3" json:"idle_timeout_seconds,omitempty"`
	CdcStagingPath      string          `protobuf:"bytes,7,opt,name=cdc_staging_path,json=cdcStagingPath,proto3" json:"cdc_staging_path,omitempty"`
	PublicationName     string          `protobuf:"bytes,8,opt,name=publication_name,json=publicationName,proto3" json:"publication_name,omitempty"`
	ReplicationSlotName string          `protobuf:"bytes,9,opt,name=replication_slot_name,json=replicationSlotName,proto3" json:"replication_slot_name,omitempty"`
	// config for the initial load feature, along with interactions like resync and initial_snapshot_only
	DoInitialSnapshot           bool   `protobuf:"varint,10,opt,name=do_initial_snapshot,json=doInitialSnapshot,proto3" json:"do_initial_snapshot,omitempty"`
	SnapshotNumRowsPerPartition uint32 `protobuf:"varint,11,opt,name=snapshot_num_rows_per_partition,json=snapshotNumRowsPerPartition,proto3" json:"snapshot_num_rows_per_partition,omitempty"`
	SnapshotStagingPath         string `protobuf:"bytes,12,opt,name=snapshot_staging_path,json=snapshotStagingPath,proto3" json:"snapshot_staging_path,omitempty"`
	// max parallel workers is per table
	SnapshotMaxParallelWorkers  uint32 `protobuf:"varint,13,opt,name=snapshot_max_parallel_workers,json=snapshotMaxParallelWorkers,proto3" json:"snapshot_max_parallel_workers,omitempty"`
	SnapshotNumTablesInParallel uint32 `protobuf:"varint,14,opt,name=snapshot_num_tables_in_parallel,json=snapshotNumTablesInParallel,proto3" json:"snapshot_num_tables_in_parallel,omitempty"`
	// if true, then the flow will be resynced
	// create new tables with "_resync" suffix, perform initial load and then swap the new tables with the old ones
	// to only be used after the old mirror is dropped
	Resync              bool `protobuf:"varint,15,opt,name=resync,proto3" json:"resync,omitempty"`
	InitialSnapshotOnly bool `protobuf:"varint,16,opt,name=initial_snapshot_only,json=initialSnapshotOnly,proto3" json:"initial_snapshot_only,omitempty"`
	// configurations for soft delete and synced at columns, affects both initial snapshot and CDC
	SoftDeleteColName string     `protobuf:"bytes,18,opt,name=soft_delete_col_name,json=softDeleteColName,proto3" json:"soft_delete_col_name,omitempty"`
	SyncedAtColName   string     `protobuf:"bytes,19,opt,name=synced_at_col_name,json=syncedAtColName,proto3" json:"synced_at_col_name,omitempty"`
	Script            string     `protobuf:"bytes,20,opt,name=script,proto3" json:"script,omitempty"`
	System            TypeSystem `protobuf:"varint,21,opt,name=system,proto3,enum=peerdb_flow.TypeSystem" json:"system,omitempty"`
	// source and destination peer
	SourceName      string            `protobuf:"bytes,22,opt,name=source_name,json=sourceName,proto3" json:"source_name,omitempty"`
	DestinationName string            `protobuf:"bytes,23,opt,name=destination_name,json=destinationName,proto3" json:"destination_name,omitempty"`
	Env             map[string]string `protobuf:"bytes,24,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Version         uint32            `protobuf:"varint,25,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *FlowConnectionConfigs) Reset() {
	*x = FlowConnectionConfigs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowConnectionConfigs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowConnectionConfigs) ProtoMessage() {}

func (x *FlowConnectionConfigs) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowConnectionConfigs.ProtoReflect.Descriptor instead.
func (*FlowConnectionConfigs) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{5}
}

func (x *FlowConnectionConfigs) GetFlowJobName() string {
	if x != nil {
		return x.FlowJobName
	}
	return ""
}

func (x *FlowConnectionConfigs) GetTableMappings() []*TableMapping {
	if x != nil {
		return x.TableMappings
	}
	return nil
}

func (x *FlowConnectionConfigs) GetMaxBatchSize() uint32 {
	if x != nil {
		return x.MaxBatchSize
	}
	return 0
}

func (x *FlowConnectionConfigs) GetIdleTimeoutSeconds() uint64 {
	if x != nil {
		return x.IdleTimeoutSeconds
	}
	return 0
}

func (x *FlowConnectionConfigs) GetCdcStagingPath() string {
	if x != nil {
		return x.CdcStagingPath
	}
	return ""
}

func (x *FlowConnectionConfigs) GetPublicationName() string {
	if x != nil {
		return x.PublicationName
	}
	return ""
}

func (x *FlowConnectionConfigs) GetReplicationSlotName() string {
	if x != nil {
		return x.ReplicationSlotName
	}
	return ""
}

func (x *FlowConnectionConfigs) GetDoInitialSnapshot() bool {
	if x != nil {
		return x.DoInitialSnapshot
	}
	return false
}

func (x *FlowConnectionConfigs) GetSnapshotNumRowsPerPartition() uint32 {
	if x != nil {
		return x.SnapshotNumRowsPerPartition
	}
	return 0
}

func (x *FlowConnectionConfigs) GetSnapshotStagingPath() string {
	if x != nil {
		return x.SnapshotStagingPath
	}
	return ""
}

func (x *FlowConnectionConfigs) GetSnapshotMaxParallelWorkers() uint32 {
	if x != nil {
		return x.SnapshotMaxParallelWorkers
	}
	return 0
}

func (x *FlowConnectionConfigs) GetSnapshotNumTablesInParallel() uint32 {
	if x != nil {
		return x.SnapshotNumTablesInParallel
	}
	return 0
}

func (x *FlowConnectionConfigs) GetResync() bool {
	if x != nil {
		return x.Resync
	}
	return false
}

func (x *FlowConnectionConfigs) GetInitialSnapshotOnly() bool {
	if x != nil {
		return x.InitialSnapshotOnly
	}
	return false
}

func (x *FlowConnectionConfigs) GetSoftDeleteColName() string {
	if x != nil {
		return x.SoftDeleteColName
	}
	return ""
}

func (x *FlowConnectionConfigs) GetSyncedAtColName() string {
	if x != nil {
		return x.SyncedAtColName
	}
	return ""
}

func (x *FlowConnectionConfigs) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

func (x *FlowConnectionConfigs) GetSystem() TypeSystem {
	if x != nil {
		return x.System
	}
	return TypeSystem_Q
}

func (x *FlowConnectionConfigs) GetSourceName() string {
	if x != nil {
		return x.SourceName
	}
	return ""
}

func (x *FlowConnectionConfigs) GetDestinationName() string {
	if x != nil {
		return x.DestinationName
	}
	return ""
}

func (x *FlowConnectionConfigs) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *FlowConnectionConfigs) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type RenameTableOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentName string `protobuf:"bytes,1,opt,name=current_name,json=currentName,proto3" json:"current_name,omitempty"`
	NewName     string `protobuf:"bytes,2,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
}

func (x *RenameTableOption) Reset() {
	*x = RenameTableOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameTableOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameTableOption) ProtoMessage() {}

func (x *RenameTableOption) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameTableOption.ProtoReflect.Descriptor instead.
func (*RenameTableOption) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{6}
}

func (x *RenameTableOption) GetCurrentName() string {
	if x != nil {
		return x.CurrentName
	}
	return ""
}

func (x *RenameTableOption) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

type RenameTablesInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowJobName        string               `protobuf:"bytes,1,opt,name=flow_job_name,json=flowJobName,proto3" json:"flow_job_name,omitempty"`
	RenameTableOptions []*RenameTableOption `protobuf:"bytes,3,rep,name=rename_table_options,json=renameTableOptions,proto3" json:"rename_table_options,omitempty"`
	PeerName           string               `protobuf:"bytes,6,opt,name=peer_name,json=peerName,proto3" json:"peer_name,omitempty"`
	SoftDeleteColName  string               `protobuf:"bytes,7,opt,name=soft_delete_col_name,json=softDeleteColName,proto3" json:"soft_delete_col_name,omitempty"`
	SyncedAtColName    string               `protobuf:"bytes,8,opt,name=synced_at_col_name,json=syncedAtColName,proto3" json:"synced_at_col_name,omitempty"`
}

func (x *RenameTablesInput) Reset() {
	*x = RenameTablesInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameTablesInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameTablesInput) ProtoMessage() {}

func (x *RenameTablesInput) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameTablesInput.ProtoReflect.Descriptor instead.
func (*RenameTablesInput) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{7}
}

func (x *RenameTablesInput) GetFlowJobName() string {
	if x != nil {
		return x.FlowJobName
	}
	return ""
}

func (x *RenameTablesInput) GetRenameTableOptions() []*RenameTableOption {
	if x != nil {
		return x.RenameTableOptions
	}
	return nil
}

func (x *RenameTablesInput) GetPeerName() string {
	if x != nil {
		return x.PeerName
	}
	return ""
}

func (x *RenameTablesInput) GetSoftDeleteColName() string {
	if x != nil {
		return x.SoftDeleteColName
	}
	return ""
}

func (x *RenameTablesInput) GetSyncedAtColName() string {
	if x != nil {
		return x.SyncedAtColName
	}
	return ""
}

type RemoveTablesFromRawTableInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowJobName           string   `protobuf:"bytes,1,opt,name=flow_job_name,json=flowJobName,proto3" json:"flow_job_name,omitempty"`
	DestinationTableNames []string `protobuf:"bytes,2,rep,name=destination_table_names,json=destinationTableNames,proto3" json:"destination_table_names,omitempty"`
	SyncBatchId           int64    `protobuf:"varint,3,opt,name=sync_batch_id,json=syncBatchId,proto3" json:"sync_batch_id,omitempty"`
	NormalizeBatchId      int64    `protobuf:"varint,4,opt,name=normalize_batch_id,json=normalizeBatchId,proto3" json:"normalize_batch_id,omitempty"`
}

func (x *RemoveTablesFromRawTableInput) Reset() {
	*x = RemoveTablesFromRawTableInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTablesFromRawTableInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTablesFromRawTableInput) ProtoMessage() {}

func (x *RemoveTablesFromRawTableInput) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTablesFromRawTableInput.ProtoReflect.Descriptor instead.
func (*RemoveTablesFromRawTableInput) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{8}
}

func (x *RemoveTablesFromRawTableInput) GetFlowJobName() string {
	if x != nil {
		return x.FlowJobName
	}
	return ""
}

func (x *RemoveTablesFromRawTableInput) GetDestinationTableNames() []string {
	if x != nil {
		return x.DestinationTableNames
	}
	return nil
}

func (x *RemoveTablesFromRawTableInput) GetSyncBatchId() int64 {
	if x != nil {
		return x.SyncBatchId
	}
	return 0
}

func (x *RemoveTablesFromRawTableInput) GetNormalizeBatchId() int64 {
	if x != nil {
		return x.NormalizeBatchId
	}
	return 0
}

type RenameTablesOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowJobName string `protobuf:"bytes,1,opt,name=flow_job_name,json=flowJobName,proto3" json:"flow_job_name,omitempty"`
}

func (x *RenameTablesOutput) Reset() {
	*x = RenameTablesOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameTablesOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameTablesOutput) ProtoMessage() {}

func (x *RenameTablesOutput) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameTablesOutput.ProtoReflect.Descriptor instead.
func (*RenameTablesOutput) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{9}
}

func (x *RenameTablesOutput) GetFlowJobName() string {
	if x != nil {
		return x.FlowJobName
	}
	return ""
}

type CreateTablesFromExistingInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowJobName               string            `protobuf:"bytes,1,opt,name=flow_job_name,json=flowJobName,proto3" json:"flow_job_name,omitempty"`
	NewToExistingTableMapping map[string]string `protobuf:"bytes,3,rep,name=new_to_existing_table_mapping,json=newToExistingTableMapping,proto3" json:"new_to_existing_table_mapping,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PeerName                  string            `protobuf:"bytes,4,opt,name=peer_name,json=peerName,proto3" json:"peer_name,omitempty"`
}

func (x *CreateTablesFromExistingInput) Reset() {
	*x = CreateTablesFromExistingInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTablesFromExistingInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTablesFromExistingInput) ProtoMessage() {}

func (x *CreateTablesFromExistingInput) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTablesFromExistingInput.ProtoReflect.Descriptor instead.
func (*CreateTablesFromExistingInput) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{10}
}

func (x *CreateTablesFromExistingInput) GetFlowJobName() string {
	if x != nil {
		return x.FlowJobName
	}
	return ""
}

func (x *CreateTablesFromExistingInput) GetNewToExistingTableMapping() map[string]string {
	if x != nil {
		return x.NewToExistingTableMapping
	}
	return nil
}

func (x *CreateTablesFromExistingInput) GetPeerName() string {
	if x != nil {
		return x.PeerName
	}
	return ""
}

type CreateTablesFromExistingOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowJobName string `protobuf:"bytes,2,opt,name=flow_job_name,json=flowJobName,proto3" json:"flow_job_name,omitempty"`
}

func (x *CreateTablesFromExistingOutput) Reset() {
	*x = CreateTablesFromExistingOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTablesFromExistingOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTablesFromExistingOutput) ProtoMessage() {}

func (x *CreateTablesFromExistingOutput) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTablesFromExistingOutput.ProtoReflect.Descriptor instead.
func (*CreateTablesFromExistingOutput) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{11}
}

func (x *CreateTablesFromExistingOutput) GetFlowJobName() string {
	if x != nil {
		return x.FlowJobName
	}
	return ""
}

type SyncFlowOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchSize             uint32            `protobuf:"varint,1,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	IdleTimeoutSeconds    uint64            `protobuf:"varint,3,opt,name=idle_timeout_seconds,json=idleTimeoutSeconds,proto3" json:"idle_timeout_seconds,omitempty"`
	SrcTableIdNameMapping map[uint32]string `protobuf:"bytes,4,rep,name=src_table_id_name_mapping,json=srcTableIdNameMapping,proto3" json:"src_table_id_name_mapping,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TableMappings         []*TableMapping   `protobuf:"bytes,6,rep,name=table_mappings,json=tableMappings,proto3" json:"table_mappings,omitempty"`
	NumberOfSyncs         int32             `protobuf:"varint,7,opt,name=number_of_syncs,json=numberOfSyncs,proto3" json:"number_of_syncs,omitempty"`
}

func (x *SyncFlowOptions) Reset() {
	*x = SyncFlowOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncFlowOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncFlowOptions) ProtoMessage() {}

func (x *SyncFlowOptions) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncFlowOptions.ProtoReflect.Descriptor instead.
func (*SyncFlowOptions) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{12}
}

func (x *SyncFlowOptions) GetBatchSize() uint32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *SyncFlowOptions) GetIdleTimeoutSeconds() uint64 {
	if x != nil {
		return x.IdleTimeoutSeconds
	}
	return 0
}

func (x *SyncFlowOptions) GetSrcTableIdNameMapping() map[uint32]string {
	if x != nil {
		return x.SrcTableIdNameMapping
	}
	return nil
}

func (x *SyncFlowOptions) GetTableMappings() []*TableMapping {
	if x != nil {
		return x.TableMappings
	}
	return nil
}

func (x *SyncFlowOptions) GetNumberOfSyncs() int32 {
	if x != nil {
		return x.NumberOfSyncs
	}
	return 0
}

type EnsurePullabilityBatchInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowJobName            string   `protobuf:"bytes,2,opt,name=flow_job_name,json=flowJobName,proto3" json:"flow_job_name,omitempty"`
	SourceTableIdentifiers []string `protobuf:"bytes,3,rep,name=source_table_identifiers,json=sourceTableIdentifiers,proto3" json:"source_table_identifiers,omitempty"`
	CheckConstraints       bool     `protobuf:"varint,4,opt,name=check_constraints,json=checkConstraints,proto3" json:"check_constraints,omitempty"`
	PeerName               string   `protobuf:"bytes,5,opt,name=peer_name,json=peerName,proto3" json:"peer_name,omitempty"`
}

func (x *EnsurePullabilityBatchInput) Reset() {
	*x = EnsurePullabilityBatchInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnsurePullabilityBatchInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnsurePullabilityBatchInput) ProtoMessage() {}

func (x *EnsurePullabilityBatchInput) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnsurePullabilityBatchInput.ProtoReflect.Descriptor instead.
func (*EnsurePullabilityBatchInput) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{13}
}

func (x *EnsurePullabilityBatchInput) GetFlowJobName() string {
	if x != nil {
		return x.FlowJobName
	}
	return ""
}

func (x *EnsurePullabilityBatchInput) GetSourceTableIdentifiers() []string {
	if x != nil {
		return x.SourceTableIdentifiers
	}
	return nil
}

func (x *EnsurePullabilityBatchInput) GetCheckConstraints() bool {
	if x != nil {
		return x.CheckConstraints
	}
	return false
}

func (x *EnsurePullabilityBatchInput) GetPeerName() string {
	if x != nil {
		return x.PeerName
	}
	return ""
}

type PostgresTableIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelId uint32 `protobuf:"varint,1,opt,name=rel_id,json=relId,proto3" json:"rel_id,omitempty"`
}

func (x *PostgresTableIdentifier) Reset() {
	*x = PostgresTableIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostgresTableIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresTableIdentifier) ProtoMessage() {}

func (x *PostgresTableIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresTableIdentifier.ProtoReflect.Descriptor instead.
func (*PostgresTableIdentifier) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{14}
}

func (x *PostgresTableIdentifier) GetRelId() uint32 {
	if x != nil {
		return x.RelId
	}
	return 0
}

type EnsurePullabilityBatchOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableIdentifierMapping map[string]*PostgresTableIdentifier `protobuf:"bytes,1,rep,name=table_identifier_mapping,json=tableIdentifierMapping,proto3" json:"table_identifier_mapping,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EnsurePullabilityBatchOutput) Reset() {
	*x = EnsurePullabilityBatchOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnsurePullabilityBatchOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnsurePullabilityBatchOutput) ProtoMessage() {}

func (x *EnsurePullabilityBatchOutput) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnsurePullabilityBatchOutput.ProtoReflect.Descriptor instead.
func (*EnsurePullabilityBatchOutput) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{15}
}

func (x *EnsurePullabilityBatchOutput) GetTableIdentifierMapping() map[string]*PostgresTableIdentifier {
	if x != nil {
		return x.TableIdentifierMapping
	}
	return nil
}

type SetupReplicationInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowJobName      string            `protobuf:"bytes,2,opt,name=flow_job_name,json=flowJobName,proto3" json:"flow_job_name,omitempty"`
	TableNameMapping map[string]string `protobuf:"bytes,3,rep,name=table_name_mapping,json=tableNameMapping,proto3" json:"table_name_mapping,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Env              map[string]string `protobuf:"bytes,4,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// replicate to destination using ctid
	DoInitialSnapshot           bool   `protobuf:"varint,5,opt,name=do_initial_snapshot,json=doInitialSnapshot,proto3" json:"do_initial_snapshot,omitempty"`
	ExistingPublicationName     string `protobuf:"bytes,6,opt,name=existing_publication_name,json=existingPublicationName,proto3" json:"existing_publication_name,omitempty"`
	ExistingReplicationSlotName string `protobuf:"bytes,7,opt,name=existing_replication_slot_name,json=existingReplicationSlotName,proto3" json:"existing_replication_slot_name,omitempty"`
	PeerName                    string `protobuf:"bytes,8,opt,name=peer_name,json=peerName,proto3" json:"peer_name,omitempty"`
	DestinationName             string `protobuf:"bytes,9,opt,name=destination_name,json=destinationName,proto3" json:"destination_name,omitempty"`
}

func (x *SetupReplicationInput) Reset() {
	*x = SetupReplicationInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetupReplicationInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupReplicationInput) ProtoMessage() {}

func (x *SetupReplicationInput) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupReplicationInput.ProtoReflect.Descriptor instead.
func (*SetupReplicationInput) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{16}
}

func (x *SetupReplicationInput) GetFlowJobName() string {
	if x != nil {
		return x.FlowJobName
	}
	return ""
}

func (x *SetupReplicationInput) GetTableNameMapping() map[string]string {
	if x != nil {
		return x.TableNameMapping
	}
	return nil
}

func (x *SetupReplicationInput) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *SetupReplicationInput) GetDoInitialSnapshot() bool {
	if x != nil {
		return x.DoInitialSnapshot
	}
	return false
}

func (x *SetupReplicationInput) GetExistingPublicationName() string {
	if x != nil {
		return x.ExistingPublicationName
	}
	return ""
}

func (x *SetupReplicationInput) GetExistingReplicationSlotName() string {
	if x != nil {
		return x.ExistingReplicationSlotName
	}
	return ""
}

func (x *SetupReplicationInput) GetPeerName() string {
	if x != nil {
		return x.PeerName
	}
	return ""
}

func (x *SetupReplicationInput) GetDestinationName() string {
	if x != nil {
		return x.DestinationName
	}
	return ""
}

type SetupReplicationOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotName         string `protobuf:"bytes,1,opt,name=slot_name,json=slotName,proto3" json:"slot_name,omitempty"`
	SnapshotName     string `protobuf:"bytes,2,opt,name=snapshot_name,json=snapshotName,proto3" json:"snapshot_name,omitempty"`
	SupportsTidScans bool   `protobuf:"varint,3,opt,name=supports_tid_scans,json=supportsTidScans,proto3" json:"supports_tid_scans,omitempty"`
}

func (x *SetupReplicationOutput) Reset() {
	*x = SetupReplicationOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetupReplicationOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupReplicationOutput) ProtoMessage() {}

func (x *SetupReplicationOutput) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupReplicationOutput.ProtoReflect.Descriptor instead.
func (*SetupReplicationOutput) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{17}
}

func (x *SetupReplicationOutput) GetSlotName() string {
	if x != nil {
		return x.SlotName
	}
	return ""
}

func (x *SetupReplicationOutput) GetSnapshotName() string {
	if x != nil {
		return x.SnapshotName
	}
	return ""
}

func (x *SetupReplicationOutput) GetSupportsTidScans() bool {
	if x != nil {
		return x.SupportsTidScans
	}
	return false
}

type CreateRawTableInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowJobName      string            `protobuf:"bytes,2,opt,name=flow_job_name,json=flowJobName,proto3" json:"flow_job_name,omitempty"`
	TableNameMapping map[string]string `protobuf:"bytes,3,rep,name=table_name_mapping,json=tableNameMapping,proto3" json:"table_name_mapping,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PeerName         string            `protobuf:"bytes,4,opt,name=peer_name,json=peerName,proto3" json:"peer_name,omitempty"`
}

func (x *CreateRawTableInput) Reset() {
	*x = CreateRawTableInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRawTableInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRawTableInput) ProtoMessage() {}

func (x *CreateRawTableInput) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRawTableInput.ProtoReflect.Descriptor instead.
func (*CreateRawTableInput) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{18}
}

func (x *CreateRawTableInput) GetFlowJobName() string {
	if x != nil {
		return x.FlowJobName
	}
	return ""
}

func (x *CreateRawTableInput) GetTableNameMapping() map[string]string {
	if x != nil {
		return x.TableNameMapping
	}
	return nil
}

func (x *CreateRawTableInput) GetPeerName() string {
	if x != nil {
		return x.PeerName
	}
	return ""
}

type CreateRawTableOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableIdentifier string `protobuf:"bytes,1,opt,name=table_identifier,json=tableIdentifier,proto3" json:"table_identifier,omitempty"`
}

func (x *CreateRawTableOutput) Reset() {
	*x = CreateRawTableOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRawTableOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRawTableOutput) ProtoMessage() {}

func (x *CreateRawTableOutput) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRawTableOutput.ProtoReflect.Descriptor instead.
func (*CreateRawTableOutput) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{19}
}

func (x *CreateRawTableOutput) GetTableIdentifier() string {
	if x != nil {
		return x.TableIdentifier
	}
	return ""
}

// stored in catalog table table_schema_mapping, be wary of breaking changes
type TableSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableIdentifier       string              `protobuf:"bytes,1,opt,name=table_identifier,json=tableIdentifier,proto3" json:"table_identifier,omitempty"`
	PrimaryKeyColumns     []string            `protobuf:"bytes,2,rep,name=primary_key_columns,json=primaryKeyColumns,proto3" json:"primary_key_columns,omitempty"`
	IsReplicaIdentityFull bool                `protobuf:"varint,3,opt,name=is_replica_identity_full,json=isReplicaIdentityFull,proto3" json:"is_replica_identity_full,omitempty"`
	System                TypeSystem          `protobuf:"varint,4,opt,name=system,proto3,enum=peerdb_flow.TypeSystem" json:"system,omitempty"`
	NullableEnabled       bool                `protobuf:"varint,5,opt,name=nullable_enabled,json=nullableEnabled,proto3" json:"nullable_enabled,omitempty"`
	Columns               []*FieldDescription `protobuf:"bytes,6,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *TableSchema) Reset() {
	*x = TableSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableSchema) ProtoMessage() {}

func (x *TableSchema) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableSchema.ProtoReflect.Descriptor instead.
func (*TableSchema) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{20}
}

func (x *TableSchema) GetTableIdentifier() string {
	if x != nil {
		return x.TableIdentifier
	}
	return ""
}

func (x *TableSchema) GetPrimaryKeyColumns() []string {
	if x != nil {
		return x.PrimaryKeyColumns
	}
	return nil
}

func (x *TableSchema) GetIsReplicaIdentityFull() bool {
	if x != nil {
		return x.IsReplicaIdentityFull
	}
	return false
}

func (x *TableSchema) GetSystem() TypeSystem {
	if x != nil {
		return x.System
	}
	return TypeSystem_Q
}

func (x *TableSchema) GetNullableEnabled() bool {
	if x != nil {
		return x.NullableEnabled
	}
	return false
}

func (x *TableSchema) GetColumns() []*FieldDescription {
	if x != nil {
		return x.Columns
	}
	return nil
}

type FieldDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type         string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	TypeModifier int32  `protobuf:"varint,3,opt,name=type_modifier,json=typeModifier,proto3" json:"type_modifier,omitempty"`
	Nullable     bool   `protobuf:"varint,4,opt,name=nullable,proto3" json:"nullable,omitempty"`
}

func (x *FieldDescription) Reset() {
	*x = FieldDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldDescription) ProtoMessage() {}

func (x *FieldDescription) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldDescription.ProtoReflect.Descriptor instead.
func (*FieldDescription) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{21}
}

func (x *FieldDescription) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FieldDescription) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FieldDescription) GetTypeModifier() int32 {
	if x != nil {
		return x.TypeModifier
	}
	return 0
}

func (x *FieldDescription) GetNullable() bool {
	if x != nil {
		return x.Nullable
	}
	return false
}

type SetupTableSchemaBatchInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Env           map[string]string `protobuf:"bytes,1,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FlowName      string            `protobuf:"bytes,3,opt,name=flow_name,json=flowName,proto3" json:"flow_name,omitempty"`
	System        TypeSystem        `protobuf:"varint,4,opt,name=system,proto3,enum=peerdb_flow.TypeSystem" json:"system,omitempty"`
	PeerName      string            `protobuf:"bytes,5,opt,name=peer_name,json=peerName,proto3" json:"peer_name,omitempty"`
	TableMappings []*TableMapping   `protobuf:"bytes,6,rep,name=table_mappings,json=tableMappings,proto3" json:"table_mappings,omitempty"`
	Version       uint32            `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *SetupTableSchemaBatchInput) Reset() {
	*x = SetupTableSchemaBatchInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetupTableSchemaBatchInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupTableSchemaBatchInput) ProtoMessage() {}

func (x *SetupTableSchemaBatchInput) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupTableSchemaBatchInput.ProtoReflect.Descriptor instead.
func (*SetupTableSchemaBatchInput) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{22}
}

func (x *SetupTableSchemaBatchInput) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *SetupTableSchemaBatchInput) GetFlowName() string {
	if x != nil {
		return x.FlowName
	}
	return ""
}

func (x *SetupTableSchemaBatchInput) GetSystem() TypeSystem {
	if x != nil {
		return x.System
	}
	return TypeSystem_Q
}

func (x *SetupTableSchemaBatchInput) GetPeerName() string {
	if x != nil {
		return x.PeerName
	}
	return ""
}

func (x *SetupTableSchemaBatchInput) GetTableMappings() []*TableMapping {
	if x != nil {
		return x.TableMappings
	}
	return nil
}

func (x *SetupTableSchemaBatchInput) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type SetupNormalizedTableBatchInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Env           map[string]string `protobuf:"bytes,1,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TableMappings []*TableMapping   `protobuf:"bytes,3,rep,name=table_mappings,json=tableMappings,proto3" json:"table_mappings,omitempty"`
	// migration related columns
	SoftDeleteColName string `protobuf:"bytes,4,opt,name=soft_delete_col_name,json=softDeleteColName,proto3" json:"soft_delete_col_name,omitempty"`
	SyncedAtColName   string `protobuf:"bytes,5,opt,name=synced_at_col_name,json=syncedAtColName,proto3" json:"synced_at_col_name,omitempty"`
	FlowName          string `protobuf:"bytes,6,opt,name=flow_name,json=flowName,proto3" json:"flow_name,omitempty"`
	PeerName          string `protobuf:"bytes,7,opt,name=peer_name,json=peerName,proto3" json:"peer_name,omitempty"`
	IsResync          bool   `protobuf:"varint,8,opt,name=is_resync,json=isResync,proto3" json:"is_resync,omitempty"`
}

func (x *SetupNormalizedTableBatchInput) Reset() {
	*x = SetupNormalizedTableBatchInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetupNormalizedTableBatchInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupNormalizedTableBatchInput) ProtoMessage() {}

func (x *SetupNormalizedTableBatchInput) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupNormalizedTableBatchInput.ProtoReflect.Descriptor instead.
func (*SetupNormalizedTableBatchInput) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{23}
}

func (x *SetupNormalizedTableBatchInput) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *SetupNormalizedTableBatchInput) GetTableMappings() []*TableMapping {
	if x != nil {
		return x.TableMappings
	}
	return nil
}

func (x *SetupNormalizedTableBatchInput) GetSoftDeleteColName() string {
	if x != nil {
		return x.SoftDeleteColName
	}
	return ""
}

func (x *SetupNormalizedTableBatchInput) GetSyncedAtColName() string {
	if x != nil {
		return x.SyncedAtColName
	}
	return ""
}

func (x *SetupNormalizedTableBatchInput) GetFlowName() string {
	if x != nil {
		return x.FlowName
	}
	return ""
}

func (x *SetupNormalizedTableBatchInput) GetPeerName() string {
	if x != nil {
		return x.PeerName
	}
	return ""
}

func (x *SetupNormalizedTableBatchInput) GetIsResync() bool {
	if x != nil {
		return x.IsResync
	}
	return false
}

type SetupNormalizedTableOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableIdentifier string `protobuf:"bytes,1,opt,name=table_identifier,json=tableIdentifier,proto3" json:"table_identifier,omitempty"`
	AlreadyExists   bool   `protobuf:"varint,2,opt,name=already_exists,json=alreadyExists,proto3" json:"already_exists,omitempty"`
}

func (x *SetupNormalizedTableOutput) Reset() {
	*x = SetupNormalizedTableOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetupNormalizedTableOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupNormalizedTableOutput) ProtoMessage() {}

func (x *SetupNormalizedTableOutput) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupNormalizedTableOutput.ProtoReflect.Descriptor instead.
func (*SetupNormalizedTableOutput) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{24}
}

func (x *SetupNormalizedTableOutput) GetTableIdentifier() string {
	if x != nil {
		return x.TableIdentifier
	}
	return ""
}

func (x *SetupNormalizedTableOutput) GetAlreadyExists() bool {
	if x != nil {
		return x.AlreadyExists
	}
	return false
}

type SetupNormalizedTableBatchOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableExistsMapping map[string]bool `protobuf:"bytes,1,rep,name=table_exists_mapping,json=tableExistsMapping,proto3" json:"table_exists_mapping,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *SetupNormalizedTableBatchOutput) Reset() {
	*x = SetupNormalizedTableBatchOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetupNormalizedTableBatchOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupNormalizedTableBatchOutput) ProtoMessage() {}

func (x *SetupNormalizedTableBatchOutput) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupNormalizedTableBatchOutput.ProtoReflect.Descriptor instead.
func (*SetupNormalizedTableBatchOutput) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{25}
}

func (x *SetupNormalizedTableBatchOutput) GetTableExistsMapping() map[string]bool {
	if x != nil {
		return x.TableExistsMapping
	}
	return nil
}

// partition ranges [start, end] inclusive
type IntPartitionRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start int64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   int64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *IntPartitionRange) Reset() {
	*x = IntPartitionRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntPartitionRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntPartitionRange) ProtoMessage() {}

func (x *IntPartitionRange) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntPartitionRange.ProtoReflect.Descriptor instead.
func (*IntPartitionRange) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{26}
}

func (x *IntPartitionRange) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *IntPartitionRange) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

type TimestampPartitionRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *TimestampPartitionRange) Reset() {
	*x = TimestampPartitionRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampPartitionRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampPartitionRange) ProtoMessage() {}

func (x *TimestampPartitionRange) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampPartitionRange.ProtoReflect.Descriptor instead.
func (*TimestampPartitionRange) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{27}
}

func (x *TimestampPartitionRange) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *TimestampPartitionRange) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

type TID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockNumber  uint32 `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	OffsetNumber uint32 `protobuf:"varint,2,opt,name=offset_number,json=offsetNumber,proto3" json:"offset_number,omitempty"`
}

func (x *TID) Reset() {
	*x = TID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TID) ProtoMessage() {}

func (x *TID) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TID.ProtoReflect.Descriptor instead.
func (*TID) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{28}
}

func (x *TID) GetBlockNumber() uint32 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *TID) GetOffsetNumber() uint32 {
	if x != nil {
		return x.OffsetNumber
	}
	return 0
}

type TIDPartitionRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *TID `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   *TID `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *TIDPartitionRange) Reset() {
	*x = TIDPartitionRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TIDPartitionRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TIDPartitionRange) ProtoMessage() {}

func (x *TIDPartitionRange) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TIDPartitionRange.ProtoReflect.Descriptor instead.
func (*TIDPartitionRange) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{29}
}

func (x *TIDPartitionRange) GetStart() *TID {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *TIDPartitionRange) GetEnd() *TID {
	if x != nil {
		return x.End
	}
	return nil
}

type UIntPartitionRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start uint64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   uint64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *UIntPartitionRange) Reset() {
	*x = UIntPartitionRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIntPartitionRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIntPartitionRange) ProtoMessage() {}

func (x *UIntPartitionRange) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIntPartitionRange.ProtoReflect.Descriptor instead.
func (*UIntPartitionRange) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{30}
}

func (x *UIntPartitionRange) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *UIntPartitionRange) GetEnd() uint64 {
	if x != nil {
		return x.End
	}
	return 0
}

type ObjectIdPartitionRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start string `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   string `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *ObjectIdPartitionRange) Reset() {
	*x = ObjectIdPartitionRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectIdPartitionRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectIdPartitionRange) ProtoMessage() {}

func (x *ObjectIdPartitionRange) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectIdPartitionRange.ProtoReflect.Descriptor instead.
func (*ObjectIdPartitionRange) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{31}
}

func (x *ObjectIdPartitionRange) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *ObjectIdPartitionRange) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

type PartitionRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// can be a timestamp range or an integer range
	//
	// Types that are assignable to Range:
	//
	//	*PartitionRange_IntRange
	//	*PartitionRange_TimestampRange
	//	*PartitionRange_TidRange
	//	*PartitionRange_UintRange
	//	*PartitionRange_ObjectIdRange
	Range isPartitionRange_Range `protobuf_oneof:"range"`
}

func (x *PartitionRange) Reset() {
	*x = PartitionRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionRange) ProtoMessage() {}

func (x *PartitionRange) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionRange.ProtoReflect.Descriptor instead.
func (*PartitionRange) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{32}
}

func (m *PartitionRange) GetRange() isPartitionRange_Range {
	if m != nil {
		return m.Range
	}
	return nil
}

func (x *PartitionRange) GetIntRange() *IntPartitionRange {
	if x, ok := x.GetRange().(*PartitionRange_IntRange); ok {
		return x.IntRange
	}
	return nil
}

func (x *PartitionRange) GetTimestampRange() *TimestampPartitionRange {
	if x, ok := x.GetRange().(*PartitionRange_TimestampRange); ok {
		return x.TimestampRange
	}
	return nil
}

func (x *PartitionRange) GetTidRange() *TIDPartitionRange {
	if x, ok := x.GetRange().(*PartitionRange_TidRange); ok {
		return x.TidRange
	}
	return nil
}

func (x *PartitionRange) GetUintRange() *UIntPartitionRange {
	if x, ok := x.GetRange().(*PartitionRange_UintRange); ok {
		return x.UintRange
	}
	return nil
}

func (x *PartitionRange) GetObjectIdRange() *ObjectIdPartitionRange {
	if x, ok := x.GetRange().(*PartitionRange_ObjectIdRange); ok {
		return x.ObjectIdRange
	}
	return nil
}

type isPartitionRange_Range interface {
	isPartitionRange_Range()
}

type PartitionRange_IntRange struct {
	IntRange *IntPartitionRange `protobuf:"bytes,1,opt,name=int_range,json=intRange,proto3,oneof"`
}

type PartitionRange_TimestampRange struct {
	TimestampRange *TimestampPartitionRange `protobuf:"bytes,2,opt,name=timestamp_range,json=timestampRange,proto3,oneof"`
}

type PartitionRange_TidRange struct {
	TidRange *TIDPartitionRange `protobuf:"bytes,3,opt,name=tid_range,json=tidRange,proto3,oneof"`
}

type PartitionRange_UintRange struct {
	UintRange *UIntPartitionRange `protobuf:"bytes,4,opt,name=uint_range,json=uintRange,proto3,oneof"`
}

type PartitionRange_ObjectIdRange struct {
	ObjectIdRange *ObjectIdPartitionRange `protobuf:"bytes,5,opt,name=object_id_range,json=objectIdRange,proto3,oneof"`
}

func (*PartitionRange_IntRange) isPartitionRange_Range() {}

func (*PartitionRange_TimestampRange) isPartitionRange_Range() {}

func (*PartitionRange_TidRange) isPartitionRange_Range() {}

func (*PartitionRange_UintRange) isPartitionRange_Range() {}

func (*PartitionRange_ObjectIdRange) isPartitionRange_Range() {}

type QRepWriteMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WriteType        QRepWriteType `protobuf:"varint,1,opt,name=write_type,json=writeType,proto3,enum=peerdb_flow.QRepWriteType" json:"write_type,omitempty"`
	UpsertKeyColumns []string      `protobuf:"bytes,2,rep,name=upsert_key_columns,json=upsertKeyColumns,proto3" json:"upsert_key_columns,omitempty"`
}

func (x *QRepWriteMode) Reset() {
	*x = QRepWriteMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QRepWriteMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QRepWriteMode) ProtoMessage() {}

func (x *QRepWriteMode) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QRepWriteMode.ProtoReflect.Descriptor instead.
func (*QRepWriteMode) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{33}
}

func (x *QRepWriteMode) GetWriteType() QRepWriteType {
	if x != nil {
		return x.WriteType
	}
	return QRepWriteType_QREP_WRITE_MODE_APPEND
}

func (x *QRepWriteMode) GetUpsertKeyColumns() []string {
	if x != nil {
		return x.UpsertKeyColumns
	}
	return nil
}

type QRepConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowJobName                string `protobuf:"bytes,1,opt,name=flow_job_name,json=flowJobName,proto3" json:"flow_job_name,omitempty"`
	DestinationTableIdentifier string `protobuf:"bytes,4,opt,name=destination_table_identifier,json=destinationTableIdentifier,proto3" json:"destination_table_identifier,omitempty"`
	Query                      string `protobuf:"bytes,5,opt,name=query,proto3" json:"query,omitempty"`
	WatermarkTable             string `protobuf:"bytes,6,opt,name=watermark_table,json=watermarkTable,proto3" json:"watermark_table,omitempty"`
	WatermarkColumn            string `protobuf:"bytes,7,opt,name=watermark_column,json=watermarkColumn,proto3" json:"watermark_column,omitempty"`
	InitialCopyOnly            bool   `protobuf:"varint,8,opt,name=initial_copy_only,json=initialCopyOnly,proto3" json:"initial_copy_only,omitempty"`
	MaxParallelWorkers         uint32 `protobuf:"varint,9,opt,name=max_parallel_workers,json=maxParallelWorkers,proto3" json:"max_parallel_workers,omitempty"`
	// time to wait between getting partitions to process
	WaitBetweenBatchesSeconds uint32         `protobuf:"varint,10,opt,name=wait_between_batches_seconds,json=waitBetweenBatchesSeconds,proto3" json:"wait_between_batches_seconds,omitempty"`
	WriteMode                 *QRepWriteMode `protobuf:"bytes,11,opt,name=write_mode,json=writeMode,proto3" json:"write_mode,omitempty"`
	// This is only used when sync_mode is AVRO
	// this is the location where the avro files will be written
	// if this starts with gs:// then it will be written to GCS
	// if this starts with s3:// then it will be written to S3, only supported in Snowflake
	// if nothing is specified then it will be written to local disk
	// if using GCS or S3 make sure your instance has the correct permissions.
	StagingPath string `protobuf:"bytes,12,opt,name=staging_path,json=stagingPath,proto3" json:"staging_path,omitempty"`
	// This setting overrides batch_size_int and batch_duration_seconds
	// and instead uses the number of rows per partition to determine
	// how many rows to process per batch.
	NumRowsPerPartition uint32 `protobuf:"varint,13,opt,name=num_rows_per_partition,json=numRowsPerPartition,proto3" json:"num_rows_per_partition,omitempty"`
	// Creates the watermark table on the destination as-is, can be used for some queries.
	SetupWatermarkTableOnDestination bool `protobuf:"varint,14,opt,name=setup_watermark_table_on_destination,json=setupWatermarkTableOnDestination,proto3" json:"setup_watermark_table_on_destination,omitempty"`
	// create new tables with "_peerdb_resync" suffix, perform initial load and then swap the new table with the old ones
	// to be used after the old mirror is dropped
	DstTableFullResync bool              `protobuf:"varint,15,opt,name=dst_table_full_resync,json=dstTableFullResync,proto3" json:"dst_table_full_resync,omitempty"`
	SyncedAtColName    string            `protobuf:"bytes,16,opt,name=synced_at_col_name,json=syncedAtColName,proto3" json:"synced_at_col_name,omitempty"`
	SoftDeleteColName  string            `protobuf:"bytes,17,opt,name=soft_delete_col_name,json=softDeleteColName,proto3" json:"soft_delete_col_name,omitempty"`
	System             TypeSystem        `protobuf:"varint,18,opt,name=system,proto3,enum=peerdb_flow.TypeSystem" json:"system,omitempty"`
	Script             string            `protobuf:"bytes,19,opt,name=script,proto3" json:"script,omitempty"`
	SourceName         string            `protobuf:"bytes,20,opt,name=source_name,json=sourceName,proto3" json:"source_name,omitempty"`
	DestinationName    string            `protobuf:"bytes,21,opt,name=destination_name,json=destinationName,proto3" json:"destination_name,omitempty"`
	SnapshotName       string            `protobuf:"bytes,23,opt,name=snapshot_name,json=snapshotName,proto3" json:"snapshot_name,omitempty"`
	Env                map[string]string `protobuf:"bytes,24,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ParentMirrorName   string            `protobuf:"bytes,25,opt,name=parent_mirror_name,json=parentMirrorName,proto3" json:"parent_mirror_name,omitempty"`
	Exclude            []string          `protobuf:"bytes,26,rep,name=exclude,proto3" json:"exclude,omitempty"`
	Columns            []*ColumnSetting  `protobuf:"bytes,27,rep,name=columns,proto3" json:"columns,omitempty"`
	Version            uint32            `protobuf:"varint,28,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *QRepConfig) Reset() {
	*x = QRepConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QRepConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QRepConfig) ProtoMessage() {}

func (x *QRepConfig) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QRepConfig.ProtoReflect.Descriptor instead.
func (*QRepConfig) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{34}
}

func (x *QRepConfig) GetFlowJobName() string {
	if x != nil {
		return x.FlowJobName
	}
	return ""
}

func (x *QRepConfig) GetDestinationTableIdentifier() string {
	if x != nil {
		return x.DestinationTableIdentifier
	}
	return ""
}

func (x *QRepConfig) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *QRepConfig) GetWatermarkTable() string {
	if x != nil {
		return x.WatermarkTable
	}
	return ""
}

func (x *QRepConfig) GetWatermarkColumn() string {
	if x != nil {
		return x.WatermarkColumn
	}
	return ""
}

func (x *QRepConfig) GetInitialCopyOnly() bool {
	if x != nil {
		return x.InitialCopyOnly
	}
	return false
}

func (x *QRepConfig) GetMaxParallelWorkers() uint32 {
	if x != nil {
		return x.MaxParallelWorkers
	}
	return 0
}

func (x *QRepConfig) GetWaitBetweenBatchesSeconds() uint32 {
	if x != nil {
		return x.WaitBetweenBatchesSeconds
	}
	return 0
}

func (x *QRepConfig) GetWriteMode() *QRepWriteMode {
	if x != nil {
		return x.WriteMode
	}
	return nil
}

func (x *QRepConfig) GetStagingPath() string {
	if x != nil {
		return x.StagingPath
	}
	return ""
}

func (x *QRepConfig) GetNumRowsPerPartition() uint32 {
	if x != nil {
		return x.NumRowsPerPartition
	}
	return 0
}

func (x *QRepConfig) GetSetupWatermarkTableOnDestination() bool {
	if x != nil {
		return x.SetupWatermarkTableOnDestination
	}
	return false
}

func (x *QRepConfig) GetDstTableFullResync() bool {
	if x != nil {
		return x.DstTableFullResync
	}
	return false
}

func (x *QRepConfig) GetSyncedAtColName() string {
	if x != nil {
		return x.SyncedAtColName
	}
	return ""
}

func (x *QRepConfig) GetSoftDeleteColName() string {
	if x != nil {
		return x.SoftDeleteColName
	}
	return ""
}

func (x *QRepConfig) GetSystem() TypeSystem {
	if x != nil {
		return x.System
	}
	return TypeSystem_Q
}

func (x *QRepConfig) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

func (x *QRepConfig) GetSourceName() string {
	if x != nil {
		return x.SourceName
	}
	return ""
}

func (x *QRepConfig) GetDestinationName() string {
	if x != nil {
		return x.DestinationName
	}
	return ""
}

func (x *QRepConfig) GetSnapshotName() string {
	if x != nil {
		return x.SnapshotName
	}
	return ""
}

func (x *QRepConfig) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *QRepConfig) GetParentMirrorName() string {
	if x != nil {
		return x.ParentMirrorName
	}
	return ""
}

func (x *QRepConfig) GetExclude() []string {
	if x != nil {
		return x.Exclude
	}
	return nil
}

func (x *QRepConfig) GetColumns() []*ColumnSetting {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *QRepConfig) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type QRepPartition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionId        string          `protobuf:"bytes,2,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	Range              *PartitionRange `protobuf:"bytes,3,opt,name=range,proto3" json:"range,omitempty"`
	FullTablePartition bool            `protobuf:"varint,4,opt,name=full_table_partition,json=fullTablePartition,proto3" json:"full_table_partition,omitempty"`
}

func (x *QRepPartition) Reset() {
	*x = QRepPartition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QRepPartition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QRepPartition) ProtoMessage() {}

func (x *QRepPartition) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QRepPartition.ProtoReflect.Descriptor instead.
func (*QRepPartition) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{35}
}

func (x *QRepPartition) GetPartitionId() string {
	if x != nil {
		return x.PartitionId
	}
	return ""
}

func (x *QRepPartition) GetRange() *PartitionRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *QRepPartition) GetFullTablePartition() bool {
	if x != nil {
		return x.FullTablePartition
	}
	return false
}

type QRepPartitionBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchId    int32            `protobuf:"varint,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	Partitions []*QRepPartition `protobuf:"bytes,2,rep,name=partitions,proto3" json:"partitions,omitempty"`
}

func (x *QRepPartitionBatch) Reset() {
	*x = QRepPartitionBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QRepPartitionBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QRepPartitionBatch) ProtoMessage() {}

func (x *QRepPartitionBatch) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QRepPartitionBatch.ProtoReflect.Descriptor instead.
func (*QRepPartitionBatch) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{36}
}

func (x *QRepPartitionBatch) GetBatchId() int32 {
	if x != nil {
		return x.BatchId
	}
	return 0
}

func (x *QRepPartitionBatch) GetPartitions() []*QRepPartition {
	if x != nil {
		return x.Partitions
	}
	return nil
}

type QRepParitionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Partitions []*QRepPartition `protobuf:"bytes,1,rep,name=partitions,proto3" json:"partitions,omitempty"`
}

func (x *QRepParitionResult) Reset() {
	*x = QRepParitionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QRepParitionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QRepParitionResult) ProtoMessage() {}

func (x *QRepParitionResult) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QRepParitionResult.ProtoReflect.Descriptor instead.
func (*QRepParitionResult) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{37}
}

func (x *QRepParitionResult) GetPartitions() []*QRepPartition {
	if x != nil {
		return x.Partitions
	}
	return nil
}

type DropFlowInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowJobName           string                 `protobuf:"bytes,1,opt,name=flow_job_name,json=flowJobName,proto3" json:"flow_job_name,omitempty"`
	DropFlowStats         bool                   `protobuf:"varint,4,opt,name=drop_flow_stats,json=dropFlowStats,proto3" json:"drop_flow_stats,omitempty"`
	FlowConnectionConfigs *FlowConnectionConfigs `protobuf:"bytes,5,opt,name=flow_connection_configs,json=flowConnectionConfigs,proto3" json:"flow_connection_configs,omitempty"`
	SkipDestinationDrop   bool                   `protobuf:"varint,6,opt,name=skip_destination_drop,json=skipDestinationDrop,proto3" json:"skip_destination_drop,omitempty"`
	SkipSourceDrop        bool                   `protobuf:"varint,7,opt,name=skip_source_drop,json=skipSourceDrop,proto3" json:"skip_source_drop,omitempty"`
	Resync                bool                   `protobuf:"varint,8,opt,name=resync,proto3" json:"resync,omitempty"`
}

func (x *DropFlowInput) Reset() {
	*x = DropFlowInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropFlowInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropFlowInput) ProtoMessage() {}

func (x *DropFlowInput) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropFlowInput.ProtoReflect.Descriptor instead.
func (*DropFlowInput) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{38}
}

func (x *DropFlowInput) GetFlowJobName() string {
	if x != nil {
		return x.FlowJobName
	}
	return ""
}

func (x *DropFlowInput) GetDropFlowStats() bool {
	if x != nil {
		return x.DropFlowStats
	}
	return false
}

func (x *DropFlowInput) GetFlowConnectionConfigs() *FlowConnectionConfigs {
	if x != nil {
		return x.FlowConnectionConfigs
	}
	return nil
}

func (x *DropFlowInput) GetSkipDestinationDrop() bool {
	if x != nil {
		return x.SkipDestinationDrop
	}
	return false
}

func (x *DropFlowInput) GetSkipSourceDrop() bool {
	if x != nil {
		return x.SkipSourceDrop
	}
	return false
}

func (x *DropFlowInput) GetResync() bool {
	if x != nil {
		return x.Resync
	}
	return false
}

type TableSchemaDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcTableName    string              `protobuf:"bytes,1,opt,name=src_table_name,json=srcTableName,proto3" json:"src_table_name,omitempty"`
	DstTableName    string              `protobuf:"bytes,2,opt,name=dst_table_name,json=dstTableName,proto3" json:"dst_table_name,omitempty"`
	AddedColumns    []*FieldDescription `protobuf:"bytes,3,rep,name=added_columns,json=addedColumns,proto3" json:"added_columns,omitempty"`
	System          TypeSystem          `protobuf:"varint,4,opt,name=system,proto3,enum=peerdb_flow.TypeSystem" json:"system,omitempty"`
	NullableEnabled bool                `protobuf:"varint,5,opt,name=nullable_enabled,json=nullableEnabled,proto3" json:"nullable_enabled,omitempty"`
}

func (x *TableSchemaDelta) Reset() {
	*x = TableSchemaDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableSchemaDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableSchemaDelta) ProtoMessage() {}

func (x *TableSchemaDelta) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableSchemaDelta.ProtoReflect.Descriptor instead.
func (*TableSchemaDelta) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{39}
}

func (x *TableSchemaDelta) GetSrcTableName() string {
	if x != nil {
		return x.SrcTableName
	}
	return ""
}

func (x *TableSchemaDelta) GetDstTableName() string {
	if x != nil {
		return x.DstTableName
	}
	return ""
}

func (x *TableSchemaDelta) GetAddedColumns() []*FieldDescription {
	if x != nil {
		return x.AddedColumns
	}
	return nil
}

func (x *TableSchemaDelta) GetSystem() TypeSystem {
	if x != nil {
		return x.System
	}
	return TypeSystem_Q
}

func (x *TableSchemaDelta) GetNullableEnabled() bool {
	if x != nil {
		return x.NullableEnabled
	}
	return false
}

type QRepFlowState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastPartition          *QRepPartition `protobuf:"bytes,1,opt,name=last_partition,json=lastPartition,proto3" json:"last_partition,omitempty"`
	NumPartitionsProcessed uint64         `protobuf:"varint,2,opt,name=num_partitions_processed,json=numPartitionsProcessed,proto3" json:"num_partitions_processed,omitempty"`
	NeedsResync            bool           `protobuf:"varint,3,opt,name=needs_resync,json=needsResync,proto3" json:"needs_resync,omitempty"`
	CurrentFlowStatus      FlowStatus     `protobuf:"varint,5,opt,name=current_flow_status,json=currentFlowStatus,proto3,enum=peerdb_flow.FlowStatus" json:"current_flow_status,omitempty"`
}

func (x *QRepFlowState) Reset() {
	*x = QRepFlowState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QRepFlowState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QRepFlowState) ProtoMessage() {}

func (x *QRepFlowState) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QRepFlowState.ProtoReflect.Descriptor instead.
func (*QRepFlowState) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{40}
}

func (x *QRepFlowState) GetLastPartition() *QRepPartition {
	if x != nil {
		return x.LastPartition
	}
	return nil
}

func (x *QRepFlowState) GetNumPartitionsProcessed() uint64 {
	if x != nil {
		return x.NumPartitionsProcessed
	}
	return 0
}

func (x *QRepFlowState) GetNeedsResync() bool {
	if x != nil {
		return x.NeedsResync
	}
	return false
}

func (x *QRepFlowState) GetCurrentFlowStatus() FlowStatus {
	if x != nil {
		return x.CurrentFlowStatus
	}
	return FlowStatus_STATUS_UNKNOWN
}

type PeerDBColumns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SoftDeleteColName string `protobuf:"bytes,1,opt,name=soft_delete_col_name,json=softDeleteColName,proto3" json:"soft_delete_col_name,omitempty"`
	SyncedAtColName   string `protobuf:"bytes,2,opt,name=synced_at_col_name,json=syncedAtColName,proto3" json:"synced_at_col_name,omitempty"`
}

func (x *PeerDBColumns) Reset() {
	*x = PeerDBColumns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerDBColumns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerDBColumns) ProtoMessage() {}

func (x *PeerDBColumns) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerDBColumns.ProtoReflect.Descriptor instead.
func (*PeerDBColumns) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{41}
}

func (x *PeerDBColumns) GetSoftDeleteColName() string {
	if x != nil {
		return x.SoftDeleteColName
	}
	return ""
}

func (x *PeerDBColumns) GetSyncedAtColName() string {
	if x != nil {
		return x.SyncedAtColName
	}
	return ""
}

type GetOpenConnectionsForUserResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName               string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	CurrentOpenConnections int64  `protobuf:"varint,2,opt,name=current_open_connections,json=currentOpenConnections,proto3" json:"current_open_connections,omitempty"`
}

func (x *GetOpenConnectionsForUserResult) Reset() {
	*x = GetOpenConnectionsForUserResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOpenConnectionsForUserResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOpenConnectionsForUserResult) ProtoMessage() {}

func (x *GetOpenConnectionsForUserResult) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOpenConnectionsForUserResult.ProtoReflect.Descriptor instead.
func (*GetOpenConnectionsForUserResult) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{42}
}

func (x *GetOpenConnectionsForUserResult) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *GetOpenConnectionsForUserResult) GetCurrentOpenConnections() int64 {
	if x != nil {
		return x.CurrentOpenConnections
	}
	return 0
}

type CDCFlowConfigUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdditionalTables []*TableMapping `protobuf:"bytes,1,rep,name=additional_tables,json=additionalTables,proto3" json:"additional_tables,omitempty"`
	BatchSize        uint32          `protobuf:"varint,2,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	IdleTimeout      uint64          `protobuf:"varint,3,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	NumberOfSyncs    int32           `protobuf:"varint,4,opt,name=number_of_syncs,json=numberOfSyncs,proto3" json:"number_of_syncs,omitempty"`
	RemovedTables    []*TableMapping `protobuf:"bytes,5,rep,name=removed_tables,json=removedTables,proto3" json:"removed_tables,omitempty"`
	// updates keys in the env map, existing keys left unchanged
	UpdatedEnv map[string]string `protobuf:"bytes,6,rep,name=updated_env,json=updatedEnv,proto3" json:"updated_env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CDCFlowConfigUpdate) Reset() {
	*x = CDCFlowConfigUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDCFlowConfigUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCFlowConfigUpdate) ProtoMessage() {}

func (x *CDCFlowConfigUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCFlowConfigUpdate.ProtoReflect.Descriptor instead.
func (*CDCFlowConfigUpdate) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{43}
}

func (x *CDCFlowConfigUpdate) GetAdditionalTables() []*TableMapping {
	if x != nil {
		return x.AdditionalTables
	}
	return nil
}

func (x *CDCFlowConfigUpdate) GetBatchSize() uint32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *CDCFlowConfigUpdate) GetIdleTimeout() uint64 {
	if x != nil {
		return x.IdleTimeout
	}
	return 0
}

func (x *CDCFlowConfigUpdate) GetNumberOfSyncs() int32 {
	if x != nil {
		return x.NumberOfSyncs
	}
	return 0
}

func (x *CDCFlowConfigUpdate) GetRemovedTables() []*TableMapping {
	if x != nil {
		return x.RemovedTables
	}
	return nil
}

func (x *CDCFlowConfigUpdate) GetUpdatedEnv() map[string]string {
	if x != nil {
		return x.UpdatedEnv
	}
	return nil
}

type QRepFlowConfigUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QRepFlowConfigUpdate) Reset() {
	*x = QRepFlowConfigUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QRepFlowConfigUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QRepFlowConfigUpdate) ProtoMessage() {}

func (x *QRepFlowConfigUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QRepFlowConfigUpdate.ProtoReflect.Descriptor instead.
func (*QRepFlowConfigUpdate) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{44}
}

type FlowConfigUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//
	//	*FlowConfigUpdate_CdcFlowConfigUpdate
	//	*FlowConfigUpdate_QrepFlowConfigUpdate
	Update isFlowConfigUpdate_Update `protobuf_oneof:"update"`
}

func (x *FlowConfigUpdate) Reset() {
	*x = FlowConfigUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowConfigUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowConfigUpdate) ProtoMessage() {}

func (x *FlowConfigUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowConfigUpdate.ProtoReflect.Descriptor instead.
func (*FlowConfigUpdate) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{45}
}

func (m *FlowConfigUpdate) GetUpdate() isFlowConfigUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *FlowConfigUpdate) GetCdcFlowConfigUpdate() *CDCFlowConfigUpdate {
	if x, ok := x.GetUpdate().(*FlowConfigUpdate_CdcFlowConfigUpdate); ok {
		return x.CdcFlowConfigUpdate
	}
	return nil
}

func (x *FlowConfigUpdate) GetQrepFlowConfigUpdate() *QRepFlowConfigUpdate {
	if x, ok := x.GetUpdate().(*FlowConfigUpdate_QrepFlowConfigUpdate); ok {
		return x.QrepFlowConfigUpdate
	}
	return nil
}

type isFlowConfigUpdate_Update interface {
	isFlowConfigUpdate_Update()
}

type FlowConfigUpdate_CdcFlowConfigUpdate struct {
	CdcFlowConfigUpdate *CDCFlowConfigUpdate `protobuf:"bytes,1,opt,name=cdc_flow_config_update,json=cdcFlowConfigUpdate,proto3,oneof"`
}

type FlowConfigUpdate_QrepFlowConfigUpdate struct {
	QrepFlowConfigUpdate *QRepFlowConfigUpdate `protobuf:"bytes,2,opt,name=qrep_flow_config_update,json=qrepFlowConfigUpdate,proto3,oneof"`
}

func (*FlowConfigUpdate_CdcFlowConfigUpdate) isFlowConfigUpdate_Update() {}

func (*FlowConfigUpdate_QrepFlowConfigUpdate) isFlowConfigUpdate_Update() {}

type SetupFlowOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcTableIdNameMapping map[uint32]string `protobuf:"bytes,1,rep,name=src_table_id_name_mapping,json=srcTableIdNameMapping,proto3" json:"src_table_id_name_mapping,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SetupFlowOutput) Reset() {
	*x = SetupFlowOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetupFlowOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupFlowOutput) ProtoMessage() {}

func (x *SetupFlowOutput) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupFlowOutput.ProtoReflect.Descriptor instead.
func (*SetupFlowOutput) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{46}
}

func (x *SetupFlowOutput) GetSrcTableIdNameMapping() map[uint32]string {
	if x != nil {
		return x.SrcTableIdNameMapping
	}
	return nil
}

type AddTablesToPublicationInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowJobName      string          `protobuf:"bytes,1,opt,name=flow_job_name,json=flowJobName,proto3" json:"flow_job_name,omitempty"`
	PublicationName  string          `protobuf:"bytes,2,opt,name=publication_name,json=publicationName,proto3" json:"publication_name,omitempty"`
	AdditionalTables []*TableMapping `protobuf:"bytes,3,rep,name=additional_tables,json=additionalTables,proto3" json:"additional_tables,omitempty"`
}

func (x *AddTablesToPublicationInput) Reset() {
	*x = AddTablesToPublicationInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTablesToPublicationInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTablesToPublicationInput) ProtoMessage() {}

func (x *AddTablesToPublicationInput) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTablesToPublicationInput.ProtoReflect.Descriptor instead.
func (*AddTablesToPublicationInput) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{47}
}

func (x *AddTablesToPublicationInput) GetFlowJobName() string {
	if x != nil {
		return x.FlowJobName
	}
	return ""
}

func (x *AddTablesToPublicationInput) GetPublicationName() string {
	if x != nil {
		return x.PublicationName
	}
	return ""
}

func (x *AddTablesToPublicationInput) GetAdditionalTables() []*TableMapping {
	if x != nil {
		return x.AdditionalTables
	}
	return nil
}

type RemoveTablesFromPublicationInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowJobName     string          `protobuf:"bytes,1,opt,name=flow_job_name,json=flowJobName,proto3" json:"flow_job_name,omitempty"`
	PublicationName string          `protobuf:"bytes,2,opt,name=publication_name,json=publicationName,proto3" json:"publication_name,omitempty"`
	TablesToRemove  []*TableMapping `protobuf:"bytes,3,rep,name=tables_to_remove,json=tablesToRemove,proto3" json:"tables_to_remove,omitempty"`
}

func (x *RemoveTablesFromPublicationInput) Reset() {
	*x = RemoveTablesFromPublicationInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTablesFromPublicationInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTablesFromPublicationInput) ProtoMessage() {}

func (x *RemoveTablesFromPublicationInput) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTablesFromPublicationInput.ProtoReflect.Descriptor instead.
func (*RemoveTablesFromPublicationInput) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{48}
}

func (x *RemoveTablesFromPublicationInput) GetFlowJobName() string {
	if x != nil {
		return x.FlowJobName
	}
	return ""
}

func (x *RemoveTablesFromPublicationInput) GetPublicationName() string {
	if x != nil {
		return x.PublicationName
	}
	return ""
}

func (x *RemoveTablesFromPublicationInput) GetTablesToRemove() []*TableMapping {
	if x != nil {
		return x.TablesToRemove
	}
	return nil
}

type IsQRepPartitionSyncedInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowJobName string `protobuf:"bytes,1,opt,name=flow_job_name,json=flowJobName,proto3" json:"flow_job_name,omitempty"`
	PartitionId string `protobuf:"bytes,2,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
}

func (x *IsQRepPartitionSyncedInput) Reset() {
	*x = IsQRepPartitionSyncedInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsQRepPartitionSyncedInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsQRepPartitionSyncedInput) ProtoMessage() {}

func (x *IsQRepPartitionSyncedInput) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsQRepPartitionSyncedInput.ProtoReflect.Descriptor instead.
func (*IsQRepPartitionSyncedInput) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{49}
}

func (x *IsQRepPartitionSyncedInput) GetFlowJobName() string {
	if x != nil {
		return x.FlowJobName
	}
	return ""
}

func (x *IsQRepPartitionSyncedInput) GetPartitionId() string {
	if x != nil {
		return x.PartitionId
	}
	return ""
}

type ExportTxSnapshotOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnapshotName     string `protobuf:"bytes,1,opt,name=snapshot_name,json=snapshotName,proto3" json:"snapshot_name,omitempty"`
	SupportsTidScans bool   `protobuf:"varint,2,opt,name=supports_tid_scans,json=supportsTidScans,proto3" json:"supports_tid_scans,omitempty"`
}

func (x *ExportTxSnapshotOutput) Reset() {
	*x = ExportTxSnapshotOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportTxSnapshotOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportTxSnapshotOutput) ProtoMessage() {}

func (x *ExportTxSnapshotOutput) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportTxSnapshotOutput.ProtoReflect.Descriptor instead.
func (*ExportTxSnapshotOutput) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{50}
}

func (x *ExportTxSnapshotOutput) GetSnapshotName() string {
	if x != nil {
		return x.SnapshotName
	}
	return ""
}

func (x *ExportTxSnapshotOutput) GetSupportsTidScans() bool {
	if x != nil {
		return x.SupportsTidScans
	}
	return false
}

type DropFlowActivityInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowJobName string `protobuf:"bytes,1,opt,name=flow_job_name,json=flowJobName,proto3" json:"flow_job_name,omitempty"`
	PeerName    string `protobuf:"bytes,2,opt,name=peer_name,json=peerName,proto3" json:"peer_name,omitempty"`
}

func (x *DropFlowActivityInput) Reset() {
	*x = DropFlowActivityInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropFlowActivityInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropFlowActivityInput) ProtoMessage() {}

func (x *DropFlowActivityInput) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropFlowActivityInput.ProtoReflect.Descriptor instead.
func (*DropFlowActivityInput) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{51}
}

func (x *DropFlowActivityInput) GetFlowJobName() string {
	if x != nil {
		return x.FlowJobName
	}
	return ""
}

func (x *DropFlowActivityInput) GetPeerName() string {
	if x != nil {
		return x.PeerName
	}
	return ""
}

type StartMaintenanceFlowInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartMaintenanceFlowInput) Reset() {
	*x = StartMaintenanceFlowInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartMaintenanceFlowInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartMaintenanceFlowInput) ProtoMessage() {}

func (x *StartMaintenanceFlowInput) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartMaintenanceFlowInput.ProtoReflect.Descriptor instead.
func (*StartMaintenanceFlowInput) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{52}
}

type StartMaintenanceFlowOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *StartMaintenanceFlowOutput) Reset() {
	*x = StartMaintenanceFlowOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartMaintenanceFlowOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartMaintenanceFlowOutput) ProtoMessage() {}

func (x *StartMaintenanceFlowOutput) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartMaintenanceFlowOutput.ProtoReflect.Descriptor instead.
func (*StartMaintenanceFlowOutput) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{53}
}

func (x *StartMaintenanceFlowOutput) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type StartMaintenanceSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkippedSnapshotWaitFlows []string `protobuf:"bytes,1,rep,name=skipped_snapshot_wait_flows,json=skippedSnapshotWaitFlows,proto3" json:"skipped_snapshot_wait_flows,omitempty"`
}

func (x *StartMaintenanceSignal) Reset() {
	*x = StartMaintenanceSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartMaintenanceSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartMaintenanceSignal) ProtoMessage() {}

func (x *StartMaintenanceSignal) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartMaintenanceSignal.ProtoReflect.Descriptor instead.
func (*StartMaintenanceSignal) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{54}
}

func (x *StartMaintenanceSignal) GetSkippedSnapshotWaitFlows() []string {
	if x != nil {
		return x.SkippedSnapshotWaitFlows
	}
	return nil
}

type EndMaintenanceFlowInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EndMaintenanceFlowInput) Reset() {
	*x = EndMaintenanceFlowInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndMaintenanceFlowInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndMaintenanceFlowInput) ProtoMessage() {}

func (x *EndMaintenanceFlowInput) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndMaintenanceFlowInput.ProtoReflect.Descriptor instead.
func (*EndMaintenanceFlowInput) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{55}
}

type EndMaintenanceFlowOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *EndMaintenanceFlowOutput) Reset() {
	*x = EndMaintenanceFlowOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndMaintenanceFlowOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndMaintenanceFlowOutput) ProtoMessage() {}

func (x *EndMaintenanceFlowOutput) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndMaintenanceFlowOutput.ProtoReflect.Descriptor instead.
func (*EndMaintenanceFlowOutput) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{56}
}

func (x *EndMaintenanceFlowOutput) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type MaintenanceMirror struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MirrorId        int64                  `protobuf:"varint,1,opt,name=mirror_id,json=mirrorId,proto3" json:"mirror_id,omitempty"`
	MirrorName      string                 `protobuf:"bytes,2,opt,name=mirror_name,json=mirrorName,proto3" json:"mirror_name,omitempty"`
	WorkflowId      string                 `protobuf:"bytes,3,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	IsCdc           bool                   `protobuf:"varint,4,opt,name=is_cdc,json=isCdc,proto3" json:"is_cdc,omitempty"`
	MirrorCreatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=mirror_created_at,json=mirrorCreatedAt,proto3" json:"mirror_created_at,omitempty"`
	MirrorUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=mirror_updated_at,json=mirrorUpdatedAt,proto3" json:"mirror_updated_at,omitempty"`
}

func (x *MaintenanceMirror) Reset() {
	*x = MaintenanceMirror{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaintenanceMirror) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaintenanceMirror) ProtoMessage() {}

func (x *MaintenanceMirror) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaintenanceMirror.ProtoReflect.Descriptor instead.
func (*MaintenanceMirror) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{57}
}

func (x *MaintenanceMirror) GetMirrorId() int64 {
	if x != nil {
		return x.MirrorId
	}
	return 0
}

func (x *MaintenanceMirror) GetMirrorName() string {
	if x != nil {
		return x.MirrorName
	}
	return ""
}

func (x *MaintenanceMirror) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *MaintenanceMirror) GetIsCdc() bool {
	if x != nil {
		return x.IsCdc
	}
	return false
}

func (x *MaintenanceMirror) GetMirrorCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.MirrorCreatedAt
	}
	return nil
}

func (x *MaintenanceMirror) GetMirrorUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.MirrorUpdatedAt
	}
	return nil
}

type MaintenanceMirrors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mirrors []*MaintenanceMirror `protobuf:"bytes,1,rep,name=mirrors,proto3" json:"mirrors,omitempty"`
}

func (x *MaintenanceMirrors) Reset() {
	*x = MaintenanceMirrors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaintenanceMirrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaintenanceMirrors) ProtoMessage() {}

func (x *MaintenanceMirrors) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaintenanceMirrors.ProtoReflect.Descriptor instead.
func (*MaintenanceMirrors) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{58}
}

func (x *MaintenanceMirrors) GetMirrors() []*MaintenanceMirror {
	if x != nil {
		return x.Mirrors
	}
	return nil
}

type PeerContextMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type DBType `protobuf:"varint,2,opt,name=type,proto3,enum=peerdb_peers.DBType" json:"type,omitempty"`
}

func (x *PeerContextMetadata) Reset() {
	*x = PeerContextMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerContextMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerContextMetadata) ProtoMessage() {}

func (x *PeerContextMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerContextMetadata.ProtoReflect.Descriptor instead.
func (*PeerContextMetadata) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{59}
}

func (x *PeerContextMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PeerContextMetadata) GetType() DBType {
	if x != nil {
		return x.Type
	}
	return DBType_BIGQUERY
}

type FlowContextMetadataInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowName        string     `protobuf:"bytes,1,opt,name=flow_name,json=flowName,proto3" json:"flow_name,omitempty"`
	SourceName      string     `protobuf:"bytes,2,opt,name=source_name,json=sourceName,proto3" json:"source_name,omitempty"`
	DestinationName string     `protobuf:"bytes,3,opt,name=destination_name,json=destinationName,proto3" json:"destination_name,omitempty"`
	Status          FlowStatus `protobuf:"varint,4,opt,name=status,proto3,enum=peerdb_flow.FlowStatus" json:"status,omitempty"`
	IsResync        bool       `protobuf:"varint,5,opt,name=is_resync,json=isResync,proto3" json:"is_resync,omitempty"`
}

func (x *FlowContextMetadataInput) Reset() {
	*x = FlowContextMetadataInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowContextMetadataInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowContextMetadataInput) ProtoMessage() {}

func (x *FlowContextMetadataInput) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowContextMetadataInput.ProtoReflect.Descriptor instead.
func (*FlowContextMetadataInput) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{60}
}

func (x *FlowContextMetadataInput) GetFlowName() string {
	if x != nil {
		return x.FlowName
	}
	return ""
}

func (x *FlowContextMetadataInput) GetSourceName() string {
	if x != nil {
		return x.SourceName
	}
	return ""
}

func (x *FlowContextMetadataInput) GetDestinationName() string {
	if x != nil {
		return x.DestinationName
	}
	return ""
}

func (x *FlowContextMetadataInput) GetStatus() FlowStatus {
	if x != nil {
		return x.Status
	}
	return FlowStatus_STATUS_UNKNOWN
}

func (x *FlowContextMetadataInput) GetIsResync() bool {
	if x != nil {
		return x.IsResync
	}
	return false
}

// FlowContextMetadata has contextual information of a flow and is universal at the flow level, it cannot be different for children context
// it is referenced via pointer
type FlowContextMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowName    string               `protobuf:"bytes,1,opt,name=flow_name,json=flowName,proto3" json:"flow_name,omitempty"`
	Source      *PeerContextMetadata `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Destination *PeerContextMetadata `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	Status      FlowStatus           `protobuf:"varint,4,opt,name=status,proto3,enum=peerdb_flow.FlowStatus" json:"status,omitempty"`
	IsResync    bool                 `protobuf:"varint,5,opt,name=is_resync,json=isResync,proto3" json:"is_resync,omitempty"`
}

func (x *FlowContextMetadata) Reset() {
	*x = FlowContextMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowContextMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowContextMetadata) ProtoMessage() {}

func (x *FlowContextMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowContextMetadata.ProtoReflect.Descriptor instead.
func (*FlowContextMetadata) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{61}
}

func (x *FlowContextMetadata) GetFlowName() string {
	if x != nil {
		return x.FlowName
	}
	return ""
}

func (x *FlowContextMetadata) GetSource() *PeerContextMetadata {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *FlowContextMetadata) GetDestination() *PeerContextMetadata {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *FlowContextMetadata) GetStatus() FlowStatus {
	if x != nil {
		return x.Status
	}
	return FlowStatus_STATUS_UNKNOWN
}

func (x *FlowContextMetadata) GetIsResync() bool {
	if x != nil {
		return x.IsResync
	}
	return false
}

type AdditionalContextMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation FlowOperation `protobuf:"varint,1,opt,name=operation,proto3,enum=peerdb_flow.FlowOperation" json:"operation,omitempty"`
}

func (x *AdditionalContextMetadata) Reset() {
	*x = AdditionalContextMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdditionalContextMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalContextMetadata) ProtoMessage() {}

func (x *AdditionalContextMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalContextMetadata.ProtoReflect.Descriptor instead.
func (*AdditionalContextMetadata) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{62}
}

func (x *AdditionalContextMetadata) GetOperation() FlowOperation {
	if x != nil {
		return x.Operation
	}
	return FlowOperation_FLOW_OPERATION_UNKNOWN
}

var File_flow_proto protoreflect.FileDescriptor

var file_flow_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x70, 0x65,
	0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x43, 0x0a, 0x0a, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x74, 0x0a, 0x10,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x75, 0x6c, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x22, 0xf3, 0x02, 0x0a, 0x0c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x1c, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1a, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x07,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x06, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x45, 0x6e,
	0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf3, 0x08,
	0x0a, 0x15, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x66, 0x6c, 0x6f, 0x77, 0x4a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0d,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x12, 0x69, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x64, 0x63, 0x5f, 0x73, 0x74, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x64, 0x63, 0x53, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x29, 0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x64, 0x6f, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x6f, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x44,
	0x0a, 0x1f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x72,
	0x6f, 0x77, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x4e, 0x75, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x50, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x74, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65,
	0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x61,
	0x6c, 0x6c, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x1f, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4e, 0x75,
	0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2f, 0x0a,
	0x14, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x6f, 0x66,
	0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b,
	0x0a, 0x12, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x79, 0x6e, 0x63,
	0x65, 0x64, 0x41, 0x74, 0x43, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x3d, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x6e, 0x76,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08,
	0x11, 0x10, 0x12, 0x22, 0x51, 0x0a, 0x11, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x96, 0x02, 0x0a, 0x11, 0x52, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0d,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x4a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x50, 0x0a, 0x14, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12,
	0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2f, 0x0a, 0x14, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73,
	0x6f, 0x66, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x12, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x63, 0x6f,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x79,
	0x6e, 0x63, 0x65, 0x64, 0x41, 0x74, 0x43, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08,
	0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22,
	0xcd, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x46, 0x72, 0x6f, 0x6d, 0x52, 0x61, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x4a, 0x6f,
	0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x0d, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22,
	0x38, 0x0a, 0x12, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6a, 0x6f,
	0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6c,
	0x6f, 0x77, 0x4a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xbc, 0x02, 0x0a, 0x1d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x4a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x8b, 0x01, 0x0a, 0x1d, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x6f, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x19, 0x6e, 0x65, 0x77, 0x54, 0x6f, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x4c, 0x0a, 0x1e, 0x4e, 0x65,
	0x77, 0x54, 0x6f, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x44, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x4a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8f,
	0x03, 0x0a, 0x0f, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x12, 0x69, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x71, 0x0a, 0x19, 0x73, 0x72, 0x63, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x72, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x15, 0x73, 0x72, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x79, 0x6e, 0x63, 0x73,
	0x1a, 0x48, 0x0a, 0x1a, 0x53, 0x72, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06,
	0x22, 0xc5, 0x01, 0x0a, 0x1b, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x22, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x4a, 0x6f, 0x62,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x2b,
	0x0a, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x17, 0x50, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x90, 0x02, 0x0a, 0x1c, 0x45,
	0x6e, 0x73, 0x75, 0x72, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x7f, 0x0a, 0x18, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x45, 0x6e, 0x73, 0x75,
	0x72, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x6f, 0x0a, 0x1b,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70,
	0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd8, 0x04,
	0x0a, 0x15, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x66, 0x6c, 0x6f, 0x77, 0x4a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x66, 0x0a, 0x12, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53,
	0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65,
	0x6e, 0x76, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x6f, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x64, 0x6f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43,
	0x0a, 0x1e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x43, 0x0a, 0x15, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x36, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x88, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x5f, 0x74, 0x69, 0x64, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x54, 0x69, 0x64, 0x53, 0x63,
	0x61, 0x6e, 0x73, 0x22, 0x81, 0x02, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x61,
	0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x4a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x64, 0x0a, 0x12, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x1a, 0x43, 0x0a, 0x15, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x41, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x61, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x29, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xb6, 0x02, 0x0a, 0x0b, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x75, 0x6c,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x2f,
	0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x29, 0x0a, 0x10, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x75, 0x6c, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x22, 0x7b, 0x0a, 0x10, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x22, 0xe5, 0x02, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x75, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x42, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70,
	0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03,
	0x65, 0x6e, 0x76, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2f, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40,
	0x0a, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x52, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x6e,
	0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x97, 0x03, 0x0a, 0x1e, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x46, 0x0a, 0x03, 0x65,
	0x6e, 0x76, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64,
	0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03,
	0x65, 0x6e, 0x76, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x6f, 0x66, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x41, 0x74, 0x43, 0x6f, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x6e,
	0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x6e, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x61,
	0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x22, 0xe0, 0x01, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x76, 0x0a, 0x14, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x45,
	0x0a, 0x17, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3b, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x22, 0x79, 0x0a, 0x17, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x30, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x4d, 0x0a,
	0x03, 0x54, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x5f, 0x0a, 0x11,
	0x54, 0x49, 0x44, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54,
	0x49, 0x44, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x03, 0x65, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x49, 0x44, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x3c, 0x0a,
	0x12, 0x55, 0x49, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x40, 0x0a, 0x16, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0xf9, 0x02,
	0x0a, 0x0e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x3d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x49, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x4f, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64,
	0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x3d, 0x0a, 0x09, 0x74, 0x69, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x54, 0x49, 0x44, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x08, 0x74, 0x69, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x40, 0x0a, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x09, 0x75, 0x69, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x65,
	0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x78, 0x0a, 0x0d, 0x51, 0x52, 0x65,
	0x70, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x51, 0x52, 0x65,
	0x70, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x10, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x22, 0xb9, 0x09, 0x0a, 0x0a, 0x51, 0x52, 0x65, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x4a,
	0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x1c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x27,
	0x0a, 0x0f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x72, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x61, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x70, 0x79, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x70, 0x79, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x30,
	0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x61,
	0x78, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73,
	0x12, 0x3f, 0x0a, 0x1c, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e,
	0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x77, 0x61, 0x69, 0x74, 0x42, 0x65, 0x74, 0x77,
	0x65, 0x65, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x39, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x51, 0x52, 0x65, 0x70, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x33, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x6e, 0x75, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x50, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x24, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x77, 0x61,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x20, 0x73, 0x65, 0x74, 0x75, 0x70, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x72, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x6e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x64, 0x73, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x2b, 0x0a, 0x12, 0x73, 0x79, 0x6e, 0x63, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x41, 0x74, 0x43, 0x6f, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x73, 0x6f, 0x66, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x06,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x32, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70,
	0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x51, 0x52, 0x65, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03,
	0x65, 0x6e, 0x76, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70,
	0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x36, 0x0a, 0x08, 0x45,
	0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22,
	0x97, 0x01, 0x0a, 0x0d, 0x51, 0x52, 0x65, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x75, 0x6c, 0x6c, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x66, 0x75, 0x6c, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6b, 0x0a, 0x12, 0x51, 0x52, 0x65,
	0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x51, 0x52, 0x65,
	0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x50, 0x0a, 0x12, 0x51, 0x52, 0x65, 0x70, 0x50, 0x61,
	0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x0a,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x51,
	0x52, 0x65, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb9, 0x02, 0x0a, 0x0d, 0x44, 0x72, 0x6f,
	0x70, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x4a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x72, 0x6f, 0x70, 0x46, 0x6c, 0x6f,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x5a, 0x0a, 0x17, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x15, 0x66, 0x6c, 0x6f,
	0x77, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x73, 0x6b, 0x69, 0x70, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x73, 0x6b, 0x69, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x72, 0x6f, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04,
	0x08, 0x03, 0x10, 0x04, 0x22, 0xfe, 0x01, 0x0a, 0x10, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x72, 0x63,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x64, 0x73, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x64, 0x64,
	0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x65, 0x65, 0x72,
	0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x75,
	0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xfe, 0x01, 0x0a, 0x0d, 0x51, 0x52, 0x65, 0x70, 0x46, 0x6c,
	0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x51, 0x52,
	0x65, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6c, 0x61, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x6e, 0x75,
	0x6d, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x6e, 0x75,
	0x6d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x79, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x65, 0x65, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x47, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x73, 0x0a, 0x0d, 0x50, 0x65, 0x65, 0x72, 0x44, 0x42,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x6f, 0x66, 0x74, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x6f, 0x66, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x73, 0x79, 0x6e, 0x63,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x41, 0x74, 0x43, 0x6f,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x78, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9b, 0x03, 0x0a, 0x13, 0x43, 0x44, 0x43, 0x46, 0x6c, 0x6f,
	0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a,
	0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64,
	0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x52, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x64, 0x6c, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x79, 0x6e, 0x63, 0x73, 0x12,
	0x40, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x12, 0x51, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x76,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x44, 0x43, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x45, 0x6e, 0x76, 0x1a, 0x3d, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x45,
	0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x16, 0x0a, 0x14, 0x51, 0x52, 0x65, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x10,
	0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x57, 0x0a, 0x16, 0x63, 0x64, 0x63, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43,
	0x44, 0x43, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x13, 0x63, 0x64, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x5a, 0x0a, 0x17, 0x71, 0x72, 0x65,
	0x70, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x65, 0x65,
	0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x51, 0x52, 0x65, 0x70, 0x46, 0x6c, 0x6f,
	0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x14, 0x71, 0x72, 0x65, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22,
	0xce, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x75, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x71, 0x0a, 0x19, 0x73, 0x72, 0x63, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x2e, 0x53, 0x72, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x15, 0x73, 0x72, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x48, 0x0a, 0x1a, 0x53, 0x72, 0x63, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xb4, 0x01, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x54, 0x6f,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x22, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x4a, 0x6f, 0x62,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x46, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x65, 0x65,
	0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x20, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0d,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x4a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x10, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x52, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x22, 0x63, 0x0a, 0x1a, 0x49, 0x73, 0x51, 0x52, 0x65, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x22,
	0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x4a, 0x6f, 0x62, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x16, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x78, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x5f, 0x74, 0x69, 0x64, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x54, 0x69, 0x64, 0x53, 0x63, 0x61,
	0x6e, 0x73, 0x22, 0x58, 0x0a, 0x15, 0x44, 0x72, 0x6f, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x4a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x1b, 0x0a, 0x19,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x36, 0x0a, 0x1a, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x6f,
	0x77, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x57, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x1b, 0x73,
	0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x18, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x45, 0x6e,
	0x64, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x34, 0x0a, 0x18, 0x45, 0x6e, 0x64, 0x4d, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x99, 0x02, 0x0a, 0x11,
	0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x63, 0x64, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x69, 0x73, 0x43, 0x64, 0x63, 0x12, 0x46, 0x0a, 0x11, 0x6d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f,
	0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x46, 0x0a, 0x11, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x4e, 0x0a, 0x12, 0x4d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x38, 0x0a,
	0x07, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x07,
	0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x53, 0x0a, 0x13, 0x50, 0x65, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2e,
	0x44, 0x42, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd1, 0x01, 0x0a,
	0x18, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6c,
	0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63,
	0x22, 0xfe, 0x01, 0x0a, 0x13, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6c, 0x6f,
	0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x42, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x79, 0x6e,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x52, 0x65, 0x73, 0x79, 0x6e,
	0x63, 0x22, 0x55, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0xb3, 0x01, 0x0a, 0x0b, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x48, 0x5f, 0x45,
	0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x49, 0x4e, 0x47, 0x5f,
	0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x54, 0x52, 0x45, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x43, 0x48, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f,
	0x54, 0x52, 0x45, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x5f, 0x45, 0x4e, 0x47,
	0x49, 0x4e, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x2d, 0x0a, 0x29, 0x43, 0x48,
	0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x45, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x45, 0x52,
	0x47, 0x45, 0x5f, 0x54, 0x52, 0x45, 0x45, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x48, 0x5f,
	0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45,
	0x44, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x54, 0x52, 0x45, 0x45, 0x10, 0x04, 0x2a, 0x66,
	0x0a, 0x0d, 0x51, 0x52, 0x65, 0x70, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x16, 0x51, 0x52, 0x45, 0x50, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x51,
	0x52, 0x45, 0x50, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x50, 0x53, 0x45, 0x52, 0x54, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x51, 0x52, 0x45, 0x50, 0x5f,
	0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x57,
	0x52, 0x49, 0x54, 0x45, 0x10, 0x02, 0x2a, 0x1b, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x05, 0x0a, 0x01, 0x51, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x50,
	0x47, 0x10, 0x01, 0x2a, 0xda, 0x01, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x49, 0x4e, 0x47, 0x10,
	0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x55,
	0x50, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x4e,
	0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x06,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49,
	0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x09,
	0x2a, 0x48, 0x0a, 0x10, 0x44, 0x79, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x49, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x49, 0x4e, 0x54, 0x10, 0x03,
	0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x04, 0x2a, 0x94, 0x01, 0x0a, 0x10, 0x44,
	0x79, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x12, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x50, 0x50, 0x4c, 0x59,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x16,
	0x0a, 0x12, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x04, 0x2a, 0x51, 0x0a, 0x0d, 0x44, 0x79, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x42,
	0x49, 0x47, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x4e, 0x4f,
	0x57, 0x46, 0x4c, 0x41, 0x4b, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4c, 0x49, 0x43,
	0x4b, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x55, 0x45, 0x55,
	0x45, 0x53, 0x10, 0x04, 0x2a, 0x62, 0x0a, 0x0d, 0x46, 0x6c, 0x6f, 0x77, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x4c,
	0x4f, 0x57, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x52,
	0x4d, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x10, 0x02, 0x42, 0x76, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x09, 0x46, 0x6c, 0x6f,
	0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0xa2, 0x02, 0x03, 0x50, 0x58, 0x58,
	0xaa, 0x02, 0x0a, 0x50, 0x65, 0x65, 0x72, 0x64, 0x62, 0x46, 0x6c, 0x6f, 0x77, 0xca, 0x02, 0x0a,
	0x50, 0x65, 0x65, 0x72, 0x64, 0x62, 0x46, 0x6c, 0x6f, 0x77, 0xe2, 0x02, 0x16, 0x50, 0x65, 0x65,
	0x72, 0x64, 0x62, 0x46, 0x6c, 0x6f, 0x77, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x0a, 0x50, 0x65, 0x65, 0x72, 0x64, 0x62, 0x46, 0x6c, 0x6f, 0x77,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flow_proto_rawDescOnce sync.Once
	file_flow_proto_rawDescData = file_flow_proto_rawDesc
)

func file_flow_proto_rawDescGZIP() []byte {
	file_flow_proto_rawDescOnce.Do(func() {
		file_flow_proto_rawDescData = protoimpl.X.CompressGZIP(file_flow_proto_rawDescData)
	})
	return file_flow_proto_rawDescData
}

var file_flow_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_flow_proto_msgTypes = make([]protoimpl.MessageInfo, 77)
var file_flow_proto_goTypes = []interface{}{
	(TableEngine)(0),                         // 0: peerdb_flow.TableEngine
	(QRepWriteType)(0),                       // 1: peerdb_flow.QRepWriteType
	(TypeSystem)(0),                          // 2: peerdb_flow.TypeSystem
	(FlowStatus)(0),                          // 3: peerdb_flow.FlowStatus
	(DynconfValueType)(0),                    // 4: peerdb_flow.DynconfValueType
	(DynconfApplyMode)(0),                    // 5: peerdb_flow.DynconfApplyMode
	(DynconfTarget)(0),                       // 6: peerdb_flow.DynconfTarget
	(FlowOperation)(0),                       // 7: peerdb_flow.FlowOperation
	(*AlertInput)(nil),                       // 8: peerdb_flow.AlertInput
	(*TableNameMapping)(nil),                 // 9: peerdb_flow.TableNameMapping
	(*ColumnSetting)(nil),                    // 10: peerdb_flow.ColumnSetting
	(*TableMapping)(nil),                     // 11: peerdb_flow.TableMapping
	(*SetupInput)(nil),                       // 12: peerdb_flow.SetupInput
	(*FlowConnectionConfigs)(nil),            // 13: peerdb_flow.FlowConnectionConfigs
	(*RenameTableOption)(nil),                // 14: peerdb_flow.RenameTableOption
	(*RenameTablesInput)(nil),                // 15: peerdb_flow.RenameTablesInput
	(*RemoveTablesFromRawTableInput)(nil),    // 16: peerdb_flow.RemoveTablesFromRawTableInput
	(*RenameTablesOutput)(nil),               // 17: peerdb_flow.RenameTablesOutput
	(*CreateTablesFromExistingInput)(nil),    // 18: peerdb_flow.CreateTablesFromExistingInput
	(*CreateTablesFromExistingOutput)(nil),   // 19: peerdb_flow.CreateTablesFromExistingOutput
	(*SyncFlowOptions)(nil),                  // 20: peerdb_flow.SyncFlowOptions
	(*EnsurePullabilityBatchInput)(nil),      // 21: peerdb_flow.EnsurePullabilityBatchInput
	(*PostgresTableIdentifier)(nil),          // 22: peerdb_flow.PostgresTableIdentifier
	(*EnsurePullabilityBatchOutput)(nil),     // 23: peerdb_flow.EnsurePullabilityBatchOutput
	(*SetupReplicationInput)(nil),            // 24: peerdb_flow.SetupReplicationInput
	(*SetupReplicationOutput)(nil),           // 25: peerdb_flow.SetupReplicationOutput
	(*CreateRawTableInput)(nil),              // 26: peerdb_flow.CreateRawTableInput
	(*CreateRawTableOutput)(nil),             // 27: peerdb_flow.CreateRawTableOutput
	(*TableSchema)(nil),                      // 28: peerdb_flow.TableSchema
	(*FieldDescription)(nil),                 // 29: peerdb_flow.FieldDescription
	(*SetupTableSchemaBatchInput)(nil),       // 30: peerdb_flow.SetupTableSchemaBatchInput
	(*SetupNormalizedTableBatchInput)(nil),   // 31: peerdb_flow.SetupNormalizedTableBatchInput
	(*SetupNormalizedTableOutput)(nil),       // 32: peerdb_flow.SetupNormalizedTableOutput
	(*SetupNormalizedTableBatchOutput)(nil),  // 33: peerdb_flow.SetupNormalizedTableBatchOutput
	(*IntPartitionRange)(nil),                // 34: peerdb_flow.IntPartitionRange
	(*TimestampPartitionRange)(nil),          // 35: peerdb_flow.TimestampPartitionRange
	(*TID)(nil),                              // 36: peerdb_flow.TID
	(*TIDPartitionRange)(nil),                // 37: peerdb_flow.TIDPartitionRange
	(*UIntPartitionRange)(nil),               // 38: peerdb_flow.UIntPartitionRange
	(*ObjectIdPartitionRange)(nil),           // 39: peerdb_flow.ObjectIdPartitionRange
	(*PartitionRange)(nil),                   // 40: peerdb_flow.PartitionRange
	(*QRepWriteMode)(nil),                    // 41: peerdb_flow.QRepWriteMode
	(*QRepConfig)(nil),                       // 42: peerdb_flow.QRepConfig
	(*QRepPartition)(nil),                    // 43: peerdb_flow.QRepPartition
	(*QRepPartitionBatch)(nil),               // 44: peerdb_flow.QRepPartitionBatch
	(*QRepParitionResult)(nil),               // 45: peerdb_flow.QRepParitionResult
	(*DropFlowInput)(nil),                    // 46: peerdb_flow.DropFlowInput
	(*TableSchemaDelta)(nil),                 // 47: peerdb_flow.TableSchemaDelta
	(*QRepFlowState)(nil),                    // 48: peerdb_flow.QRepFlowState
	(*PeerDBColumns)(nil),                    // 49: peerdb_flow.PeerDBColumns
	(*GetOpenConnectionsForUserResult)(nil),  // 50: peerdb_flow.GetOpenConnectionsForUserResult
	(*CDCFlowConfigUpdate)(nil),              // 51: peerdb_flow.CDCFlowConfigUpdate
	(*QRepFlowConfigUpdate)(nil),             // 52: peerdb_flow.QRepFlowConfigUpdate
	(*FlowConfigUpdate)(nil),                 // 53: peerdb_flow.FlowConfigUpdate
	(*SetupFlowOutput)(nil),                  // 54: peerdb_flow.SetupFlowOutput
	(*AddTablesToPublicationInput)(nil),      // 55: peerdb_flow.AddTablesToPublicationInput
	(*RemoveTablesFromPublicationInput)(nil), // 56: peerdb_flow.RemoveTablesFromPublicationInput
	(*IsQRepPartitionSyncedInput)(nil),       // 57: peerdb_flow.IsQRepPartitionSyncedInput
	(*ExportTxSnapshotOutput)(nil),           // 58: peerdb_flow.ExportTxSnapshotOutput
	(*DropFlowActivityInput)(nil),            // 59: peerdb_flow.DropFlowActivityInput
	(*StartMaintenanceFlowInput)(nil),        // 60: peerdb_flow.StartMaintenanceFlowInput
	(*StartMaintenanceFlowOutput)(nil),       // 61: peerdb_flow.StartMaintenanceFlowOutput
	(*StartMaintenanceSignal)(nil),           // 62: peerdb_flow.StartMaintenanceSignal
	(*EndMaintenanceFlowInput)(nil),          // 63: peerdb_flow.EndMaintenanceFlowInput
	(*EndMaintenanceFlowOutput)(nil),         // 64: peerdb_flow.EndMaintenanceFlowOutput
	(*MaintenanceMirror)(nil),                // 65: peerdb_flow.MaintenanceMirror
	(*MaintenanceMirrors)(nil),               // 66: peerdb_flow.MaintenanceMirrors
	(*PeerContextMetadata)(nil),              // 67: peerdb_flow.PeerContextMetadata
	(*FlowContextMetadataInput)(nil),         // 68: peerdb_flow.FlowContextMetadataInput
	(*FlowContextMetadata)(nil),              // 69: peerdb_flow.FlowContextMetadata
	(*AdditionalContextMetadata)(nil),        // 70: peerdb_flow.AdditionalContextMetadata
	nil,                                      // 71: peerdb_flow.SetupInput.EnvEntry
	nil,                                      // 72: peerdb_flow.FlowConnectionConfigs.EnvEntry
	nil,                                      // 73: peerdb_flow.CreateTablesFromExistingInput.NewToExistingTableMappingEntry
	nil,                                      // 74: peerdb_flow.SyncFlowOptions.SrcTableIdNameMappingEntry
	nil,                                      // 75: peerdb_flow.EnsurePullabilityBatchOutput.TableIdentifierMappingEntry
	nil,                                      // 76: peerdb_flow.SetupReplicationInput.TableNameMappingEntry
	nil,                                      // 77: peerdb_flow.SetupReplicationInput.EnvEntry
	nil,                                      // 78: peerdb_flow.CreateRawTableInput.TableNameMappingEntry
	nil,                                      // 79: peerdb_flow.SetupTableSchemaBatchInput.EnvEntry
	nil,                                      // 80: peerdb_flow.SetupNormalizedTableBatchInput.EnvEntry
	nil,                                      // 81: peerdb_flow.SetupNormalizedTableBatchOutput.TableExistsMappingEntry
	nil,                                      // 82: peerdb_flow.QRepConfig.EnvEntry
	nil,                                      // 83: peerdb_flow.CDCFlowConfigUpdate.UpdatedEnvEntry
	nil,                                      // 84: peerdb_flow.SetupFlowOutput.SrcTableIdNameMappingEntry
	(*timestamppb.Timestamp)(nil),            // 85: google.protobuf.Timestamp
	(DBType)(0),                              // 86: peerdb_peers.DBType
}
var file_flow_proto_depIdxs = []int32{
	10, // 0: peerdb_flow.TableMapping.columns:type_name -> peerdb_flow.ColumnSetting
	0,  // 1: peerdb_flow.TableMapping.engine:type_name -> peerdb_flow.TableEngine
	71, // 2: peerdb_flow.SetupInput.env:type_name -> peerdb_flow.SetupInput.EnvEntry
	11, // 3: peerdb_flow.FlowConnectionConfigs.table_mappings:type_name -> peerdb_flow.TableMapping
	2,  // 4: peerdb_flow.FlowConnectionConfigs.system:type_name -> peerdb_flow.TypeSystem
	72, // 5: peerdb_flow.FlowConnectionConfigs.env:type_name -> peerdb_flow.FlowConnectionConfigs.EnvEntry
	14, // 6: peerdb_flow.RenameTablesInput.rename_table_options:type_name -> peerdb_flow.RenameTableOption
	73, // 7: peerdb_flow.CreateTablesFromExistingInput.new_to_existing_table_mapping:type_name -> peerdb_flow.CreateTablesFromExistingInput.NewToExistingTableMappingEntry
	74, // 8: peerdb_flow.SyncFlowOptions.src_table_id_name_mapping:type_name -> peerdb_flow.SyncFlowOptions.SrcTableIdNameMappingEntry
	11, // 9: peerdb_flow.SyncFlowOptions.table_mappings:type_name -> peerdb_flow.TableMapping
	75, // 10: peerdb_flow.EnsurePullabilityBatchOutput.table_identifier_mapping:type_name -> peerdb_flow.EnsurePullabilityBatchOutput.TableIdentifierMappingEntry
	76, // 11: peerdb_flow.SetupReplicationInput.table_name_mapping:type_name -> peerdb_flow.SetupReplicationInput.TableNameMappingEntry
	77, // 12: peerdb_flow.SetupReplicationInput.env:type_name -> peerdb_flow.SetupReplicationInput.EnvEntry
	78, // 13: peerdb_flow.CreateRawTableInput.table_name_mapping:type_name -> peerdb_flow.CreateRawTableInput.TableNameMappingEntry
	2,  // 14: peerdb_flow.TableSchema.system:type_name -> peerdb_flow.TypeSystem
	29, // 15: peerdb_flow.TableSchema.columns:type_name -> peerdb_flow.FieldDescription
	79, // 16: peerdb_flow.SetupTableSchemaBatchInput.env:type_name -> peerdb_flow.SetupTableSchemaBatchInput.EnvEntry
	2,  // 17: peerdb_flow.SetupTableSchemaBatchInput.system:type_name -> peerdb_flow.TypeSystem
	11, // 18: peerdb_flow.SetupTableSchemaBatchInput.table_mappings:type_name -> peerdb_flow.TableMapping
	80, // 19: peerdb_flow.SetupNormalizedTableBatchInput.env:type_name -> peerdb_flow.SetupNormalizedTableBatchInput.EnvEntry
	11, // 20: peerdb_flow.SetupNormalizedTableBatchInput.table_mappings:type_name -> peerdb_flow.TableMapping
	81, // 21: peerdb_flow.SetupNormalizedTableBatchOutput.table_exists_mapping:type_name -> peerdb_flow.SetupNormalizedTableBatchOutput.TableExistsMappingEntry
	85, // 22: peerdb_flow.TimestampPartitionRange.start:type_name -> google.protobuf.Timestamp
	85, // 23: peerdb_flow.TimestampPartitionRange.end:type_name -> google.protobuf.Timestamp
	36, // 24: peerdb_flow.TIDPartitionRange.start:type_name -> peerdb_flow.TID
	36, // 25: peerdb_flow.TIDPartitionRange.end:type_name -> peerdb_flow.TID
	34, // 26: peerdb_flow.PartitionRange.int_range:type_name -> peerdb_flow.IntPartitionRange
	35, // 27: peerdb_flow.PartitionRange.timestamp_range:type_name -> peerdb_flow.TimestampPartitionRange
	37, // 28: peerdb_flow.PartitionRange.tid_range:type_name -> peerdb_flow.TIDPartitionRange
	38, // 29: peerdb_flow.PartitionRange.uint_range:type_name -> peerdb_flow.UIntPartitionRange
	39, // 30: peerdb_flow.PartitionRange.object_id_range:type_name -> peerdb_flow.ObjectIdPartitionRange
	1,  // 31: peerdb_flow.QRepWriteMode.write_type:type_name -> peerdb_flow.QRepWriteType
	41, // 32: peerdb_flow.QRepConfig.write_mode:type_name -> peerdb_flow.QRepWriteMode
	2,  // 33: peerdb_flow.QRepConfig.system:type_name -> peerdb_flow.TypeSystem
	82, // 34: peerdb_flow.QRepConfig.env:type_name -> peerdb_flow.QRepConfig.EnvEntry
	10, // 35: peerdb_flow.QRepConfig.columns:type_name -> peerdb_flow.ColumnSetting
	40, // 36: peerdb_flow.QRepPartition.range:type_name -> peerdb_flow.PartitionRange
	43, // 37: peerdb_flow.QRepPartitionBatch.partitions:type_name -> peerdb_flow.QRepPartition
	43, // 38: peerdb_flow.QRepParitionResult.partitions:type_name -> peerdb_flow.QRepPartition
	13, // 39: peerdb_flow.DropFlowInput.flow_connection_configs:type_name -> peerdb_flow.FlowConnectionConfigs
	29, // 40: peerdb_flow.TableSchemaDelta.added_columns:type_name -> peerdb_flow.FieldDescription
	2,  // 41: peerdb_flow.TableSchemaDelta.system:type_name -> peerdb_flow.TypeSystem
	43, // 42: peerdb_flow.QRepFlowState.last_partition:type_name -> peerdb_flow.QRepPartition
	3,  // 43: peerdb_flow.QRepFlowState.current_flow_status:type_name -> peerdb_flow.FlowStatus
	11, // 44: peerdb_flow.CDCFlowConfigUpdate.additional_tables:type_name -> peerdb_flow.TableMapping
	11, // 45: peerdb_flow.CDCFlowConfigUpdate.removed_tables:type_name -> peerdb_flow.TableMapping
	83, // 46: peerdb_flow.CDCFlowConfigUpdate.updated_env:type_name -> peerdb_flow.CDCFlowConfigUpdate.UpdatedEnvEntry
	51, // 47: peerdb_flow.FlowConfigUpdate.cdc_flow_config_update:type_name -> peerdb_flow.CDCFlowConfigUpdate
	52, // 48: peerdb_flow.FlowConfigUpdate.qrep_flow_config_update:type_name -> peerdb_flow.QRepFlowConfigUpdate
	84, // 49: peerdb_flow.SetupFlowOutput.src_table_id_name_mapping:type_name -> peerdb_flow.SetupFlowOutput.SrcTableIdNameMappingEntry
	11, // 50: peerdb_flow.AddTablesToPublicationInput.additional_tables:type_name -> peerdb_flow.TableMapping
	11, // 51: peerdb_flow.RemoveTablesFromPublicationInput.tables_to_remove:type_name -> peerdb_flow.TableMapping
	85, // 52: peerdb_flow.MaintenanceMirror.mirror_created_at:type_name -> google.protobuf.Timestamp
	85, // 53: peerdb_flow.MaintenanceMirror.mirror_updated_at:type_name -> google.protobuf.Timestamp
	65, // 54: peerdb_flow.MaintenanceMirrors.mirrors:type_name -> peerdb_flow.MaintenanceMirror
	86, // 55: peerdb_flow.PeerContextMetadata.type:type_name -> peerdb_peers.DBType
	3,  // 56: peerdb_flow.FlowContextMetadataInput.status:type_name -> peerdb_flow.FlowStatus
	67, // 57: peerdb_flow.FlowContextMetadata.source:type_name -> peerdb_flow.PeerContextMetadata
	67, // 58: peerdb_flow.FlowContextMetadata.destination:type_name -> peerdb_flow.PeerContextMetadata
	3,  // 59: peerdb_flow.FlowContextMetadata.status:type_name -> peerdb_flow.FlowStatus
	7,  // 60: peerdb_flow.AdditionalContextMetadata.operation:type_name -> peerdb_flow.FlowOperation
	22, // 61: peerdb_flow.EnsurePullabilityBatchOutput.TableIdentifierMappingEntry.value:type_name -> peerdb_flow.PostgresTableIdentifier
	62, // [62:62] is the sub-list for method output_type
	62, // [62:62] is the sub-list for method input_type
	62, // [62:62] is the sub-list for extension type_name
	62, // [62:62] is the sub-list for extension extendee
	0,  // [0:62] is the sub-list for field type_name
}

func init() { file_flow_proto_init() }
func file_flow_proto_init() {
	if File_flow_proto != nil {
		return
	}
	file_peers_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_flow_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableNameMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetupInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowConnectionConfigs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameTableOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameTablesInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTablesFromRawTableInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameTablesOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTablesFromExistingInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTablesFromExistingOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncFlowOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnsurePullabilityBatchInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostgresTableIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnsurePullabilityBatchOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetupReplicationInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetupReplicationOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRawTableInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRawTableOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetupTableSchemaBatchInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetupNormalizedTableBatchInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetupNormalizedTableOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetupNormalizedTableBatchOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntPartitionRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampPartitionRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TIDPartitionRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UIntPartitionRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectIdPartitionRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QRepWriteMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QRepConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QRepPartition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QRepPartitionBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QRepParitionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropFlowInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableSchemaDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QRepFlowState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerDBColumns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOpenConnectionsForUserResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDCFlowConfigUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QRepFlowConfigUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowConfigUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetupFlowOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTablesToPublicationInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTablesFromPublicationInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsQRepPartitionSyncedInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportTxSnapshotOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropFlowActivityInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartMaintenanceFlowInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartMaintenanceFlowOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartMaintenanceSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndMaintenanceFlowInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndMaintenanceFlowOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaintenanceMirror); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaintenanceMirrors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerContextMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowContextMetadataInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowContextMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdditionalContextMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_flow_proto_msgTypes[32].OneofWrappers = []interface{}{
		(*PartitionRange_IntRange)(nil),
		(*PartitionRange_TimestampRange)(nil),
		(*PartitionRange_TidRange)(nil),
		(*PartitionRange_UintRange)(nil),
		(*PartitionRange_ObjectIdRange)(nil),
	}
	file_flow_proto_msgTypes[45].OneofWrappers = []interface{}{
		(*FlowConfigUpdate_CdcFlowConfigUpdate)(nil),
		(*FlowConfigUpdate_QrepFlowConfigUpdate)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flow_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   77,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_flow_proto_goTypes,
		DependencyIndexes: file_flow_proto_depIdxs,
		EnumInfos:         file_flow_proto_enumTypes,
		MessageInfos:      file_flow_proto_msgTypes,
	}.Build()
	File_flow_proto = out.File
	file_flow_proto_rawDesc = nil
	file_flow_proto_goTypes = nil
	file_flow_proto_depIdxs = nil
}
