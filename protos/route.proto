syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

import "peers.proto";
import "flow.proto";

package peerdb_route;

message CreateCDCFlowRequest {
  peerdb_flow.FlowConnectionConfigs connection_configs = 1;
}

message CreateCDCFlowResponse {
  string workflow_id = 1;
}

message CreateQRepFlowRequest {
  peerdb_flow.QRepConfig qrep_config = 1;
  bool create_catalog_entry = 2;
}

message CreateQRepFlowResponse {
  string workflow_id = 1;
}

message CreateCustomSyncRequest {
  string flow_job_name = 1;
  int32 number_of_syncs = 2;
}

message CreateCustomSyncResponse {
  string flow_job_name = 1;
  int32 number_of_syncs = 2;
  string error_message = 3;
  bool ok = 4;
}

message ShutdownRequest {
  string flow_job_name = 2;
}

message ShutdownResponse {
  bool ok = 1;
  string error_message = 2;
}

message ValidatePeerRequest {
 peerdb_peers.Peer peer = 1;
}

message CreatePeerRequest {
  peerdb_peers.Peer peer = 1;
}

message DropPeerRequest {
  string peer_name = 1;
}

message DropPeerResponse {
  bool ok = 1;
  string error_message = 2;
}

enum ValidatePeerStatus {
  CREATION_UNKNOWN = 0;
  VALID = 1;
  INVALID = 2;
}

enum CreatePeerStatus {
  VALIDATION_UNKNOWN = 0;
  CREATED = 1;
  FAILED = 2;
}

message ValidatePeerResponse {
  ValidatePeerStatus status = 1;
  string message = 2;
}

message CreatePeerResponse {
  CreatePeerStatus status = 1;
  string message = 2;
}

message MirrorStatusRequest {
  string flow_job_name = 1;
  bool include_flow_info = 2;
}

message PartitionStatus {
  string partition_id = 1;
  google.protobuf.Timestamp start_time = 2;
  google.protobuf.Timestamp end_time = 3;
  int32 num_rows = 4;
}

message QRepMirrorStatus {
  repeated PartitionStatus partitions = 2;
  // TODO make note to see if we are still in initial copy
  // or if we are in the continuous streaming mode.
}

// to be removed eventually
message CDCSyncStatus {
  int64 start_lsn = 1;
  int64 end_lsn = 2;
  int32 num_rows = 3;
  google.protobuf.Timestamp start_time = 4;
  google.protobuf.Timestamp end_time = 5;
}

message PeerSchemasResponse {
  repeated string schemas = 1;
}

message PeerPublicationsResponse {
  repeated string publication_names = 1;
}

message SchemaTablesRequest {
  string peer_name = 1;
  string schema_name = 2;
}

message SchemaTablesResponse {
  repeated TableResponse tables = 1;
}

message TableResponse {
  string table_name = 1;
  bool can_mirror = 2;
  string table_size = 3;
}

message AllTablesResponse {
  repeated string tables = 1;
}

message TableColumnsRequest {
  string peer_name = 1;
  string schema_name = 2;
  string table_name = 3;
}

message TableColumnsResponse {
  repeated string columns = 1;
}

message PostgresPeerActivityInfoRequest {
  string peer_name = 1;
}

message PeerInfoRequest {
  string peer_name = 1;
}

message SlotInfo {
  string slot_name = 1;
  string redo_lSN = 2;
  string restart_lSN = 3;
  bool active = 4;
  float lag_in_mb = 5;
  string confirmed_flush_lSN = 6;
  string wal_status = 7;
}

message StatInfo {
  int64 pid = 1;
  string wait_event = 2;
  string wait_event_type = 3;
  string query_start = 4;
  string query = 5;
  float duration = 6;
}

message PeerSlotResponse {
  repeated SlotInfo slot_data = 1;
}

message PeerStatResponse {
  repeated StatInfo stat_data = 1;
}

message CloneTableSummary {
  string table_name = 1;
  google.protobuf.Timestamp start_time = 2;
  int32 num_partitions_completed = 3;
  int32 num_partitions_total = 4;
  int64 num_rows_synced = 5;
  int64 avg_time_per_partition_ms = 6;
  string flow_job_name = 7;
  string source_table = 8;
  bool fetch_completed = 9;
  bool consolidate_completed = 10;
  string mirror_name = 11;
}

message SnapshotStatus {
  repeated CloneTableSummary clones = 1;
}

message CDCMirrorStatus {
  peerdb_flow.FlowConnectionConfigs config = 1;
  SnapshotStatus snapshot_status = 2;
  repeated CDCSyncStatus cdc_syncs = 3;
  peerdb_peers.DBType source_type = 4;
  peerdb_peers.DBType destination_type = 5;
}

message MirrorStatusResponse {
  string flow_job_name = 1;
  oneof status {
    QRepMirrorStatus qrep_status = 2;
    CDCMirrorStatus cdc_status = 3;
  }
  string error_message = 4;
  peerdb_flow.FlowStatus current_flow_state = 5;
  bool ok = 6;
}

message ValidateCDCMirrorResponse{
  bool ok = 1;
}

message FlowStateChangeRequest {
  string flow_job_name = 1;
  peerdb_flow.FlowStatus requested_flow_state = 2;
  string source_peer = 3;
  string destination_peer = 4;
  // only can be sent in certain situations
  optional peerdb_flow.FlowConfigUpdate flow_config_update = 5;
}

message FlowStateChangeResponse {
  bool ok = 1;
  string error_message = 2;
}

message PeerDBVersionRequest {
}

message PeerDBVersionResponse {
  string version = 1;
}

service FlowService {
  rpc ValidatePeer(ValidatePeerRequest) returns (ValidatePeerResponse) {
    option (google.api.http) = {
      post: "/v1/peers/validate",
      body: "*"
     };
  }
  rpc ValidateCDCMirror(CreateCDCFlowRequest) returns (ValidateCDCMirrorResponse) {
    option (google.api.http) = {
      post: "/v1/mirrors/cdc/validate",
      body: "*"
     };
  }
  rpc CreatePeer(CreatePeerRequest) returns (CreatePeerResponse) {
    option (google.api.http) = {
      post: "/v1/peers/create",
      body: "*"
     };
  }
  rpc DropPeer(DropPeerRequest) returns (DropPeerResponse) {
    option (google.api.http) = {
      post: "/v1/peers/drop",
      body: "*"
    };
  }

  rpc CreateCDCFlow(CreateCDCFlowRequest) returns (CreateCDCFlowResponse) {
    option (google.api.http) = {
      post: "/v1/flows/cdc/create",
      body: "*"
     };
  }
  rpc CreateQRepFlow(CreateQRepFlowRequest) returns (CreateQRepFlowResponse) {
    option (google.api.http) = {
      post: "/v1/flows/qrep/create",
      body: "*"
     };
  }
  rpc CustomSyncFlow(CreateCustomSyncRequest) returns (CreateCustomSyncResponse) {
    option (google.api.http) = {
      post: "/v1/flows/cdc/sync",
      body: "*"
     };
  }

  rpc GetSchemas(PostgresPeerActivityInfoRequest) returns (PeerSchemasResponse) {
    option (google.api.http) = { get: "/v1/peers/schemas" };
  }

  rpc GetPublications(PostgresPeerActivityInfoRequest) returns (PeerPublicationsResponse) {
    option (google.api.http) = { get: "/v1/peers/publications" };
  }

  rpc GetTablesInSchema(SchemaTablesRequest) returns (SchemaTablesResponse) {
    option (google.api.http) = { get: "/v1/peers/tables" };
  }

  rpc GetAllTables(PostgresPeerActivityInfoRequest) returns (AllTablesResponse) {
    option (google.api.http) = { get: "/v1/peers/tables/all" };
  }

  rpc GetColumns(TableColumnsRequest) returns (TableColumnsResponse) {
    option (google.api.http) = { get: "/v1/peers/columns" };
  }

  rpc GetSlotInfo(PostgresPeerActivityInfoRequest) returns (PeerSlotResponse) {
    option (google.api.http) = { get: "/v1/peers/slots/{peer_name}" };
  }
  rpc GetStatInfo(PostgresPeerActivityInfoRequest) returns (PeerStatResponse) {
    option (google.api.http) = { get: "/v1/peers/stats/{peer_name}" };
  }

  rpc ShutdownFlow(ShutdownRequest) returns (ShutdownResponse) {
    option (google.api.http) = { post: "/v1/mirrors/drop", body: "*" };
  }
  rpc FlowStateChange(FlowStateChangeRequest) returns (FlowStateChangeResponse) {
    option (google.api.http) = { post: "/v1/mirrors/state_change", body: "*" };
  }
  rpc MirrorStatus(MirrorStatusRequest) returns (MirrorStatusResponse) {
    option (google.api.http) = { get: "/v1/mirrors/{flow_job_name}" };
  }

  rpc GetPeerInfo(PeerInfoRequest) returns (peerdb_peers.Peer) {
    option (google.api.http) = { get: "/v1/peers/info/{peer_name}" };
  }

  rpc GetVersion(PeerDBVersionRequest) returns (PeerDBVersionResponse) {
    option (google.api.http) = { get: "/v1/version" };
  }
}
