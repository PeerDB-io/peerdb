syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

import "peers.proto";
import "flow.proto";

package peerdb_route;

message CreateCDCFlowRequest {
  peerdb_flow.FlowConnectionConfigs connection_configs = 1;
}

message CreateCDCFlowResponse {
  string workflow_id = 1;
}

message CreateQRepFlowRequest {
  peerdb_flow.QRepConfig qrep_config = 1;
  bool create_catalog_entry = 2;
}

message CreateQRepFlowResponse {
  string workflow_id = 1;
}

message CreateCustomSyncRequest {
  string flow_job_name = 1;
  int32 number_of_syncs = 2;
}

message CreateCustomSyncResponse {
  string flow_job_name = 1;
  int32 number_of_syncs = 2;
}

message AlertConfig {
  int32 id = 1;
  string service_type = 2;
  string service_config = 3;
  repeated string alert_for_mirrors = 4;
}
message GetAlertConfigsRequest {
}

message PostAlertConfigRequest {
  AlertConfig config = 1;
}
message DeleteAlertConfigRequest {
  int32 id = 1;
}
message GetAlertConfigsResponse {
  repeated AlertConfig configs = 1;
}
message PostAlertConfigResponse {
  int32 id = 3;
}
message DeleteAlertConfigResponse {
}

message DynamicSetting {
  string name = 1;
  optional string value = 2;
  string default_value = 3;
  string description = 4;
  peerdb_flow.DynconfValueType value_type = 5;
  peerdb_flow.DynconfApplyMode apply_mode = 6;
  peerdb_flow.DynconfTarget target_for_setting = 7;
}
message GetDynamicSettingsRequest {
}
message GetDynamicSettingsResponse {
  repeated DynamicSetting settings = 1;
}
message PostDynamicSettingRequest {
  string name = 1;
  optional string value = 2;
}
message PostDynamicSettingResponse {
}

message Script {
  int32 id = 1;
  string lang = 2;
  string name = 3;
  string source = 4;
}
message GetScriptsRequest {
  int32 id = 1;
}
message GetScriptsResponse {
  repeated Script scripts = 1;
}
message PostScriptRequest {
  Script script = 1;
}
message PostScriptResponse {
  int32 id = 1;
}
message DeleteScriptRequest {
  int32 id = 1;
}
message DeleteScriptResponse {
}

message ValidatePeerRequest {
 peerdb_peers.Peer peer = 1;
}

message CreatePeerRequest {
  peerdb_peers.Peer peer = 1;
  bool allow_update = 2;
}

message DropPeerRequest {
  string peer_name = 1;
}

message DropPeerResponse {
}

enum ValidatePeerStatus {
  CREATION_UNKNOWN = 0;
  VALID = 1;
  INVALID = 2;
}

enum CreatePeerStatus {
  VALIDATION_UNKNOWN = 0;
  CREATED = 1;
  FAILED = 2;
}

message ValidatePeerResponse {
  ValidatePeerStatus status = 1;
  string message = 2;
}

message CreatePeerResponse {
  CreatePeerStatus status = 1;
  string message = 2;
}

message MirrorStatusRequest {
  string flow_job_name = 1;
  bool include_flow_info = 2;
}

message PartitionStatus {
  string partition_id = 1;
  google.protobuf.Timestamp start_time = 2;
  google.protobuf.Timestamp end_time = 3;
  int64 rows_in_partition = 4;
  int64 rows_synced = 5;
}

message QRepMirrorStatus {
  repeated PartitionStatus partitions = 2;
  // TODO make note to see if we are still in initial copy
  // or if we are in the continuous streaming mode.
}

message CDCBatch {
  int64 start_lsn = 1;
  int64 end_lsn = 2;
  int64 num_rows = 3;
  google.protobuf.Timestamp start_time = 4;
  google.protobuf.Timestamp end_time = 5;
  int64 batch_id = 6;
}


message CDCRowCounts {
  int64 total_count = 1;
  int64 inserts_count = 2;
  int64 updates_count = 3;
  int64 deletes_count = 4;
}
message CDCTableRowCounts {
  string table_name = 1;
  CDCRowCounts counts = 2;
}
message CDCTableTotalCountsRequest {
  string flow_job_name = 1;
}
message CDCTableTotalCountsResponse {
  CDCRowCounts total_data = 1;
  repeated CDCTableRowCounts tables_data = 2;
}

message PeerSchemasResponse {
  repeated string schemas = 1;
}

message PeerPublicationsResponse {
  repeated string publication_names = 1;
}

message SchemaTablesRequest {
  string peer_name = 1;
  string schema_name = 2;
  bool cdc_enabled = 3;
}

message SchemaTablesResponse {
  repeated TableResponse tables = 1;
}

message TableResponse {
  string table_name = 1;
  bool can_mirror = 2;
  string table_size = 3;
}

message AllTablesResponse {
  repeated string tables = 1;
}

message TableColumnsRequest {
  string peer_name = 1;
  string schema_name = 2;
  string table_name = 3;
}

message TableColumnsResponse {
  repeated string columns = 1;
}

message PostgresPeerActivityInfoRequest {
  string peer_name = 1;
}

message PeerInfoRequest {
  string peer_name = 1;
}

message PeerListItem {
  string name = 1;
  peerdb_peers.DBType type = 2;
}
message ListPeersRequest {
}
message ListPeersResponse {
  repeated PeerListItem items = 1;
  repeated PeerListItem source_items = 2;
  repeated PeerListItem destination_items = 3;
}

message SlotInfo {
  string slot_name = 1;
  string redo_lSN = 2;
  string restart_lSN = 3;
  bool active = 4;
  float lag_in_mb = 5;
  string confirmed_flush_lSN = 6;
  string wal_status = 7;
}

message SlotLagPoint {
  double updated_at = 1;
  double slot_size = 2;
}
message GetSlotLagHistoryRequest {
  string peer_name = 1;
  string slot_name = 2;
  string time_since = 3;
}
message GetSlotLagHistoryResponse {
  repeated SlotLagPoint data = 1;
}

message StatInfo {
  int64 pid = 1;
  string wait_event = 2;
  string wait_event_type = 3;
  string query_start = 4;
  string query = 5;
  float duration = 6;
}

message PeerSlotResponse {
  repeated SlotInfo slot_data = 1;
}

message PeerStatResponse {
  repeated StatInfo stat_data = 1;
}

message CloneTableSummary {
  string table_name = 1;
  google.protobuf.Timestamp start_time = 2;
  int32 num_partitions_completed = 3;
  int32 num_partitions_total = 4;
  int64 num_rows_synced = 5;
  int64 avg_time_per_partition_ms = 6;
  string flow_job_name = 7;
  string source_table = 8;
  bool fetch_completed = 9;
  bool consolidate_completed = 10;
  string mirror_name = 11;
}

message SnapshotStatus {
  repeated CloneTableSummary clones = 1;
}

message CDCMirrorStatus {
  peerdb_flow.FlowConnectionConfigs config = 1;
  SnapshotStatus snapshot_status = 2;
  repeated CDCBatch cdc_batches = 3;
  peerdb_peers.DBType source_type = 4;
  peerdb_peers.DBType destination_type = 5;
}

message MirrorStatusResponse {
  string flow_job_name = 1;
  oneof status {
    QRepMirrorStatus qrep_status = 2;
    CDCMirrorStatus cdc_status = 3;
  }
  peerdb_flow.FlowStatus current_flow_state = 5;
  google.protobuf.Timestamp created_at = 7;
}

message InitialLoadSummaryRequest {
  string parent_mirror_name = 1;
}

message InitialLoadSummaryResponse {
  repeated CloneTableSummary tableSummaries = 1;
}

message GetCDCBatchesRequest {
  string flow_job_name = 1;
  uint32 limit = 2;
}

message GetCDCBatchesResponse {
  repeated CDCBatch cdc_batches = 1;
}

message MirrorLog {
  string flow_name = 1;
  string error_message = 2;
  string error_type = 3;
  double error_timestamp = 4;
}
message ListMirrorLogsRequest {
  string flow_job_name = 1;
  string level = 2;
  int32 page = 3;
  int32 num_per_page = 4;
}
message ListMirrorLogsResponse {
  repeated MirrorLog errors = 1;
  int32 total = 2;
}

message ValidateCDCMirrorResponse{
}

message ListMirrorsItem {
  int64 id = 1;
  string workflow_id = 2;
  string name = 3;
  string source_name = 4;
  peerdb_peers.DBType source_type = 5;
  string destination_name = 6;
  peerdb_peers.DBType destination_type = 7;
  double created_at = 8;
  bool is_cdc = 9;
}
message ListMirrorsRequest {
}
message ListMirrorsResponse {
  repeated ListMirrorsItem mirrors = 1;
}

message ListMirrorNamesRequest {
}
message ListMirrorNamesResponse {
  repeated string names = 1;
}

message FlowStateChangeRequest {
  string flow_job_name = 1;
  peerdb_flow.FlowStatus requested_flow_state = 2;
  // only can be sent in certain situations
  optional peerdb_flow.FlowConfigUpdate flow_config_update = 5;
  bool drop_mirror_stats = 6;
}
message FlowStateChangeResponse {
}

message PeerDBVersionRequest {
}
message PeerDBVersionResponse {
  string version = 1;
}

message ResyncMirrorRequest {
  string flow_job_name = 1;
  bool drop_stats = 2;
}

message ResyncMirrorResponse {
}

service FlowService {
  rpc ValidatePeer(ValidatePeerRequest) returns (ValidatePeerResponse) {
    option (google.api.http) = {
      post: "/v1/peers/validate",
      body: "*"
     };
  }
  rpc ValidateCDCMirror(CreateCDCFlowRequest) returns (ValidateCDCMirrorResponse) {
    option (google.api.http) = {
      post: "/v1/mirrors/cdc/validate",
      body: "*"
     };
  }
  rpc CreatePeer(CreatePeerRequest) returns (CreatePeerResponse) {
    option (google.api.http) = {
      post: "/v1/peers/create",
      body: "*"
     };
  }
  rpc DropPeer(DropPeerRequest) returns (DropPeerResponse) {
    option (google.api.http) = {
      post: "/v1/peers/drop",
      body: "*"
    };
  }

  rpc CreateCDCFlow(CreateCDCFlowRequest) returns (CreateCDCFlowResponse) {
    option (google.api.http) = {
      post: "/v1/flows/cdc/create",
      body: "*"
     };
  }
  rpc CreateQRepFlow(CreateQRepFlowRequest) returns (CreateQRepFlowResponse) {
    option (google.api.http) = {
      post: "/v1/flows/qrep/create",
      body: "*"
     };
  }
  rpc CustomSyncFlow(CreateCustomSyncRequest) returns (CreateCustomSyncResponse) {
    option (google.api.http) = {
      post: "/v1/flows/cdc/sync",
      body: "*"
     };
  }

  rpc GetAlertConfigs(GetAlertConfigsRequest) returns (GetAlertConfigsResponse) {
    option (google.api.http) = { get: "/v1/alerts/config" };
  }
  rpc PostAlertConfig(PostAlertConfigRequest) returns (PostAlertConfigResponse) {
    option (google.api.http) = { post: "/v1/alerts/config", body: "*" };
  }
  rpc DeleteAlertConfig(DeleteAlertConfigRequest) returns (DeleteAlertConfigResponse) {
    option (google.api.http) = { delete: "/v1/alerts/config/{id}" };
  }

  rpc GetDynamicSettings(GetDynamicSettingsRequest) returns (GetDynamicSettingsResponse) {
    option (google.api.http) = { get: "/v1/dynamic_settings" };
  }
  rpc PostDynamicSetting(PostDynamicSettingRequest) returns (PostDynamicSettingResponse) {
    option (google.api.http) = { post: "/v1/dynamic_settings", body: "*" };
  }

  rpc GetScripts(GetScriptsRequest) returns (GetScriptsResponse) {
    option (google.api.http) = { get: "/v1/scripts/{id}" };
  }
  rpc PostScript(PostScriptRequest) returns (PostScriptResponse) {
    option (google.api.http) = { post: "/v1/scripts", body: "*" };
  }
  rpc DeleteScript(DeleteScriptRequest) returns (DeleteScriptResponse) {
    option (google.api.http) = { delete: "/v1/scripts/{id}" };
  }

  rpc CDCTableTotalCounts(CDCTableTotalCountsRequest) returns (CDCTableTotalCountsResponse) {
    option (google.api.http) = { get: "/v1/mirrors/cdc/table_total_counts/{flow_job_name}" };
  }

  rpc GetSchemas(PostgresPeerActivityInfoRequest) returns (PeerSchemasResponse) {
    option (google.api.http) = { get: "/v1/peers/schemas" };
  }

  rpc GetPublications(PostgresPeerActivityInfoRequest) returns (PeerPublicationsResponse) {
    option (google.api.http) = { get: "/v1/peers/publications" };
  }

  rpc GetTablesInSchema(SchemaTablesRequest) returns (SchemaTablesResponse) {
    option (google.api.http) = { get: "/v1/peers/tables" };
  }

  rpc GetAllTables(PostgresPeerActivityInfoRequest) returns (AllTablesResponse) {
    option (google.api.http) = { get: "/v1/peers/tables/all" };
  }

  rpc GetColumns(TableColumnsRequest) returns (TableColumnsResponse) {
    option (google.api.http) = { get: "/v1/peers/columns" };
  }

  rpc GetSlotInfo(PostgresPeerActivityInfoRequest) returns (PeerSlotResponse) {
    option (google.api.http) = { get: "/v1/peers/slots/{peer_name}" };
  }
  rpc GetSlotLagHistory(GetSlotLagHistoryRequest) returns (GetSlotLagHistoryResponse) {
    option (google.api.http) = { post: "/v1/peers/slots/lag_history", body: "*" };
  }
  rpc GetStatInfo(PostgresPeerActivityInfoRequest) returns (PeerStatResponse) {
    option (google.api.http) = { get: "/v1/peers/stats/{peer_name}" };
  }

  rpc ListMirrorLogs(ListMirrorLogsRequest) returns (ListMirrorLogsResponse) {
    option (google.api.http) = { post: "/v1/mirrors/logs", body: "*" };
  }

  rpc ListMirrors(ListMirrorsRequest) returns (ListMirrorsResponse) {
    option (google.api.http) = { get: "/v1/mirrors/list" };
  }
  rpc ListMirrorNames(ListMirrorNamesRequest) returns (ListMirrorNamesResponse) {
    option (google.api.http) = { get: "/v1/mirrors/names" };
  }

  rpc FlowStateChange(FlowStateChangeRequest) returns (FlowStateChangeResponse) {
    option (google.api.http) = { post: "/v1/mirrors/state_change", body: "*" };
  }
  rpc MirrorStatus(MirrorStatusRequest) returns (MirrorStatusResponse) {
    option (google.api.http) = { post: "/v1/mirrors/status", body: "*" };
  }

  rpc GetCDCBatches(GetCDCBatchesRequest) returns (GetCDCBatchesResponse) {
    option (google.api.http) = { get: "/v1/mirrors/cdc/batches/{flow_job_name}"};
  }

  rpc InitialLoadSummary(InitialLoadSummaryRequest) returns (InitialLoadSummaryResponse) {
    option (google.api.http) = { get: "/v1/mirrors/cdc/initial_load/{parent_mirror_name}"};
  }

  rpc GetPeerInfo(PeerInfoRequest) returns (peerdb_peers.Peer) {
    option (google.api.http) = { get: "/v1/peers/info/{peer_name}" };
  }
  rpc ListPeers(ListPeersRequest) returns (ListPeersResponse) {
    option (google.api.http) = { get: "/v1/peers/list" };
  }

  rpc GetVersion(PeerDBVersionRequest) returns (PeerDBVersionResponse) {
    option (google.api.http) = { get: "/v1/version" };
  }

  rpc ResyncMirror(ResyncMirrorRequest) returns (ResyncMirrorResponse) {
    option (google.api.http) = { post: "/v1/mirrors/resync", body: "*" };
  }
}
