syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "peers.proto";

option go_package = "generated/protos";

package peerdb_flow;

message TableNameMapping {
  string source_table_name = 1;
  string destination_table_name = 2;
}

message FlowConnectionConfigs {
  peerdb_peers.Peer source = 1;
  peerdb_peers.Peer destination = 2;
  string flow_job_name = 3;
  TableSchema table_schema = 4;
  map<string, string> table_name_mapping = 5;
  map<uint32, string> src_table_id_name_mapping = 6;
  map<string, TableSchema> table_name_schema_mapping = 7;

  // This is an optional peer that will be used to hold metadata in cases where
  // the destination isn't ideal for holding metadata.
  peerdb_peers.Peer metadata_peer = 8;
  uint32 max_batch_size = 9;
}

message SyncFlowOptions { int32 batch_size = 1; }

message NormalizeFlowOptions {
  int32 batch_size = 1;
}

message LastSyncState {
  int64 checkpoint = 1;
  google.protobuf.Timestamp last_synced_at = 2;
}

message StartFlowInput {
  LastSyncState last_sync_state = 1;
  FlowConnectionConfigs flow_connection_configs = 2;
  SyncFlowOptions sync_flow_options = 3;
}

message StartNormalizeInput {
  FlowConnectionConfigs flow_connection_configs = 1;
}

message GetLastSyncedIDInput {
  peerdb_peers.Peer peer_connection_config = 1;
  string flow_job_name = 2;
}

message EnsurePullabilityInput {
  peerdb_peers.Peer peer_connection_config = 1;
  string flow_job_name = 2;
  string source_table_identifier = 3;
}

message PostgresTableIdentifier {
  uint32 rel_id = 1;
}

message TableIdentifier {
  oneof table_identifier {
    PostgresTableIdentifier postgres_table_identifier = 1;
  }
}

message EnsurePullabilityOutput {
  TableIdentifier table_identifier = 1;
}

message SetupReplicationInput {
  peerdb_peers.Peer peer_connection_config = 1;
  string flow_job_name = 2;
  map<string, string> table_name_mapping = 3;
}

message CreateRawTableInput {
  peerdb_peers.Peer peer_connection_config = 1;
  string flow_job_name = 2;
  map<string, string> table_name_mapping = 3;
}

message CreateRawTableOutput { string table_identifier = 1; }

message GetTableSchemaInput {
  peerdb_peers.Peer peer_connection_config = 1;
  string table_identifier = 2;
}

message TableSchema {
  string table_identifier = 1;
  // list of column names and types, types can be one of the following:
  // "string", "int", "float", "bool", "timestamp".
  map<string, string> columns = 2;
  string primary_key_column = 3;
}

message SetupNormalizedTableInput {
  peerdb_peers.Peer peer_connection_config = 1;
  string table_identifier = 2;
  TableSchema source_table_schema = 3;
}

message SetupNormalizedTableOutput {
  string table_identifier = 1;
  bool already_exists = 2;
}

// partition ranges [start, end] inclusive
message IntPartitionRange {
  int64 start = 1;
  int64 end = 2;
}

message TimestampPartitionRange {
  google.protobuf.Timestamp start = 1;
  google.protobuf.Timestamp end = 2;
}

message PartitionRange {
  // can be a timestamp range or an integer range
  oneof range {
    IntPartitionRange int_range = 1;
    TimestampPartitionRange timestamp_range = 2;
  }
}

// protos for qrep
enum QRepSyncMode {
  QREP_SYNC_MODE_MULTI_INSERT = 0;
  QREP_SYNC_MODE_STORAGE_AVRO = 1;
}

enum QRepWriteType {
  QREP_WRITE_MODE_APPEND = 0;
  QREP_WRITE_MODE_UPSERT = 1;
}

message QRepWriteMode {
  QRepWriteType write_type = 1;
  repeated string upsert_key_columns = 2;
}

message QRepConfig {
  string flow_job_name = 1;

  peerdb_peers.Peer source_peer = 2;
  peerdb_peers.Peer destination_peer = 3;

  string destination_table_identifier = 4;

  string query = 5;

  string watermark_table = 6;
  string watermark_column = 7;

  bool initial_copy_only = 8;
  QRepSyncMode sync_mode = 9;

  uint32 batch_size_int = 10;
  uint32 batch_duration_seconds = 11;

  uint32 max_parallel_workers = 12;

  // time to wait between getting partitions to process
  uint32 wait_between_batches_seconds = 13;

  QRepWriteMode write_mode = 14;

  // This is only used when sync_mode is AVRO
  // this is the location where the avro files will be written
  // if this starts with gs:// then it will be written to GCS
  // if this starts with s3:// then it will be written to S3
  // if nothing is specified then it will be written to local disk
  // if using GCS or S3 make sure your instance has the correct permissions.
  string staging_path = 15;

  // This setting overrides batch_size_int and batch_duration_seconds
  // and instead uses the number of rows per partition to determine
  // how many rows to process per batch.
  uint32 num_rows_per_partition = 16;
}

message QRepPartition {
  string partition_id = 2;
  PartitionRange range = 3;
}

message QRepParitionResult {
  repeated QRepPartition partitions = 1;
}

message DropFlowInput {
  string flow_name = 1;
}
