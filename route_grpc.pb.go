// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: route.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FlowService_ValidatePeer_FullMethodName        = "/peerdb_route.FlowService/ValidatePeer"
	FlowService_ValidateCDCMirror_FullMethodName   = "/peerdb_route.FlowService/ValidateCDCMirror"
	FlowService_CreatePeer_FullMethodName          = "/peerdb_route.FlowService/CreatePeer"
	FlowService_DropPeer_FullMethodName            = "/peerdb_route.FlowService/DropPeer"
	FlowService_CreateCDCFlow_FullMethodName       = "/peerdb_route.FlowService/CreateCDCFlow"
	FlowService_CreateQRepFlow_FullMethodName      = "/peerdb_route.FlowService/CreateQRepFlow"
	FlowService_CustomSyncFlow_FullMethodName      = "/peerdb_route.FlowService/CustomSyncFlow"
	FlowService_GetAlertConfigs_FullMethodName     = "/peerdb_route.FlowService/GetAlertConfigs"
	FlowService_PostAlertConfig_FullMethodName     = "/peerdb_route.FlowService/PostAlertConfig"
	FlowService_DeleteAlertConfig_FullMethodName   = "/peerdb_route.FlowService/DeleteAlertConfig"
	FlowService_GetDynamicSettings_FullMethodName  = "/peerdb_route.FlowService/GetDynamicSettings"
	FlowService_PostDynamicSetting_FullMethodName  = "/peerdb_route.FlowService/PostDynamicSetting"
	FlowService_GetScripts_FullMethodName          = "/peerdb_route.FlowService/GetScripts"
	FlowService_PostScript_FullMethodName          = "/peerdb_route.FlowService/PostScript"
	FlowService_DeleteScript_FullMethodName        = "/peerdb_route.FlowService/DeleteScript"
	FlowService_CDCTableTotalCounts_FullMethodName = "/peerdb_route.FlowService/CDCTableTotalCounts"
	FlowService_GetSchemas_FullMethodName          = "/peerdb_route.FlowService/GetSchemas"
	FlowService_GetPublications_FullMethodName     = "/peerdb_route.FlowService/GetPublications"
	FlowService_GetTablesInSchema_FullMethodName   = "/peerdb_route.FlowService/GetTablesInSchema"
	FlowService_GetAllTables_FullMethodName        = "/peerdb_route.FlowService/GetAllTables"
	FlowService_GetColumns_FullMethodName          = "/peerdb_route.FlowService/GetColumns"
	FlowService_GetSlotInfo_FullMethodName         = "/peerdb_route.FlowService/GetSlotInfo"
	FlowService_GetSlotLagHistory_FullMethodName   = "/peerdb_route.FlowService/GetSlotLagHistory"
	FlowService_GetStatInfo_FullMethodName         = "/peerdb_route.FlowService/GetStatInfo"
	FlowService_ListMirrorLogs_FullMethodName      = "/peerdb_route.FlowService/ListMirrorLogs"
	FlowService_ListMirrors_FullMethodName         = "/peerdb_route.FlowService/ListMirrors"
	FlowService_ListMirrorNames_FullMethodName     = "/peerdb_route.FlowService/ListMirrorNames"
	FlowService_FlowStateChange_FullMethodName     = "/peerdb_route.FlowService/FlowStateChange"
	FlowService_MirrorStatus_FullMethodName        = "/peerdb_route.FlowService/MirrorStatus"
	FlowService_GetPeerInfo_FullMethodName         = "/peerdb_route.FlowService/GetPeerInfo"
	FlowService_ListPeers_FullMethodName           = "/peerdb_route.FlowService/ListPeers"
	FlowService_GetVersion_FullMethodName          = "/peerdb_route.FlowService/GetVersion"
	FlowService_ResyncMirror_FullMethodName        = "/peerdb_route.FlowService/ResyncMirror"
)

// FlowServiceClient is the client API for FlowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlowServiceClient interface {
	ValidatePeer(ctx context.Context, in *ValidatePeerRequest, opts ...grpc.CallOption) (*ValidatePeerResponse, error)
	ValidateCDCMirror(ctx context.Context, in *CreateCDCFlowRequest, opts ...grpc.CallOption) (*ValidateCDCMirrorResponse, error)
	CreatePeer(ctx context.Context, in *CreatePeerRequest, opts ...grpc.CallOption) (*CreatePeerResponse, error)
	DropPeer(ctx context.Context, in *DropPeerRequest, opts ...grpc.CallOption) (*DropPeerResponse, error)
	CreateCDCFlow(ctx context.Context, in *CreateCDCFlowRequest, opts ...grpc.CallOption) (*CreateCDCFlowResponse, error)
	CreateQRepFlow(ctx context.Context, in *CreateQRepFlowRequest, opts ...grpc.CallOption) (*CreateQRepFlowResponse, error)
	CustomSyncFlow(ctx context.Context, in *CreateCustomSyncRequest, opts ...grpc.CallOption) (*CreateCustomSyncResponse, error)
	GetAlertConfigs(ctx context.Context, in *GetAlertConfigsRequest, opts ...grpc.CallOption) (*GetAlertConfigsResponse, error)
	PostAlertConfig(ctx context.Context, in *PostAlertConfigRequest, opts ...grpc.CallOption) (*PostAlertConfigResponse, error)
	DeleteAlertConfig(ctx context.Context, in *DeleteAlertConfigRequest, opts ...grpc.CallOption) (*DeleteAlertConfigResponse, error)
	GetDynamicSettings(ctx context.Context, in *GetDynamicSettingsRequest, opts ...grpc.CallOption) (*GetDynamicSettingsResponse, error)
	PostDynamicSetting(ctx context.Context, in *PostDynamicSettingRequest, opts ...grpc.CallOption) (*PostDynamicSettingResponse, error)
	GetScripts(ctx context.Context, in *GetScriptsRequest, opts ...grpc.CallOption) (*GetScriptsResponse, error)
	PostScript(ctx context.Context, in *PostScriptRequest, opts ...grpc.CallOption) (*PostScriptResponse, error)
	DeleteScript(ctx context.Context, in *DeleteScriptRequest, opts ...grpc.CallOption) (*DeleteScriptResponse, error)
	CDCTableTotalCounts(ctx context.Context, in *CDCTableTotalCountsRequest, opts ...grpc.CallOption) (*CDCTableTotalCountsResponse, error)
	GetSchemas(ctx context.Context, in *PostgresPeerActivityInfoRequest, opts ...grpc.CallOption) (*PeerSchemasResponse, error)
	GetPublications(ctx context.Context, in *PostgresPeerActivityInfoRequest, opts ...grpc.CallOption) (*PeerPublicationsResponse, error)
	GetTablesInSchema(ctx context.Context, in *SchemaTablesRequest, opts ...grpc.CallOption) (*SchemaTablesResponse, error)
	GetAllTables(ctx context.Context, in *PostgresPeerActivityInfoRequest, opts ...grpc.CallOption) (*AllTablesResponse, error)
	GetColumns(ctx context.Context, in *TableColumnsRequest, opts ...grpc.CallOption) (*TableColumnsResponse, error)
	GetSlotInfo(ctx context.Context, in *PostgresPeerActivityInfoRequest, opts ...grpc.CallOption) (*PeerSlotResponse, error)
	GetSlotLagHistory(ctx context.Context, in *GetSlotLagHistoryRequest, opts ...grpc.CallOption) (*GetSlotLagHistoryResponse, error)
	GetStatInfo(ctx context.Context, in *PostgresPeerActivityInfoRequest, opts ...grpc.CallOption) (*PeerStatResponse, error)
	ListMirrorLogs(ctx context.Context, in *ListMirrorLogsRequest, opts ...grpc.CallOption) (*ListMirrorLogsResponse, error)
	ListMirrors(ctx context.Context, in *ListMirrorsRequest, opts ...grpc.CallOption) (*ListMirrorsResponse, error)
	ListMirrorNames(ctx context.Context, in *ListMirrorNamesRequest, opts ...grpc.CallOption) (*ListMirrorNamesResponse, error)
	FlowStateChange(ctx context.Context, in *FlowStateChangeRequest, opts ...grpc.CallOption) (*FlowStateChangeResponse, error)
	MirrorStatus(ctx context.Context, in *MirrorStatusRequest, opts ...grpc.CallOption) (*MirrorStatusResponse, error)
	GetPeerInfo(ctx context.Context, in *PeerInfoRequest, opts ...grpc.CallOption) (*Peer, error)
	ListPeers(ctx context.Context, in *ListPeersRequest, opts ...grpc.CallOption) (*ListPeersResponse, error)
	GetVersion(ctx context.Context, in *PeerDBVersionRequest, opts ...grpc.CallOption) (*PeerDBVersionResponse, error)
	ResyncMirror(ctx context.Context, in *ResyncMirrorRequest, opts ...grpc.CallOption) (*ResyncMirrorResponse, error)
}

type flowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlowServiceClient(cc grpc.ClientConnInterface) FlowServiceClient {
	return &flowServiceClient{cc}
}

func (c *flowServiceClient) ValidatePeer(ctx context.Context, in *ValidatePeerRequest, opts ...grpc.CallOption) (*ValidatePeerResponse, error) {
	out := new(ValidatePeerResponse)
	err := c.cc.Invoke(ctx, FlowService_ValidatePeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) ValidateCDCMirror(ctx context.Context, in *CreateCDCFlowRequest, opts ...grpc.CallOption) (*ValidateCDCMirrorResponse, error) {
	out := new(ValidateCDCMirrorResponse)
	err := c.cc.Invoke(ctx, FlowService_ValidateCDCMirror_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) CreatePeer(ctx context.Context, in *CreatePeerRequest, opts ...grpc.CallOption) (*CreatePeerResponse, error) {
	out := new(CreatePeerResponse)
	err := c.cc.Invoke(ctx, FlowService_CreatePeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) DropPeer(ctx context.Context, in *DropPeerRequest, opts ...grpc.CallOption) (*DropPeerResponse, error) {
	out := new(DropPeerResponse)
	err := c.cc.Invoke(ctx, FlowService_DropPeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) CreateCDCFlow(ctx context.Context, in *CreateCDCFlowRequest, opts ...grpc.CallOption) (*CreateCDCFlowResponse, error) {
	out := new(CreateCDCFlowResponse)
	err := c.cc.Invoke(ctx, FlowService_CreateCDCFlow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) CreateQRepFlow(ctx context.Context, in *CreateQRepFlowRequest, opts ...grpc.CallOption) (*CreateQRepFlowResponse, error) {
	out := new(CreateQRepFlowResponse)
	err := c.cc.Invoke(ctx, FlowService_CreateQRepFlow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) CustomSyncFlow(ctx context.Context, in *CreateCustomSyncRequest, opts ...grpc.CallOption) (*CreateCustomSyncResponse, error) {
	out := new(CreateCustomSyncResponse)
	err := c.cc.Invoke(ctx, FlowService_CustomSyncFlow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) GetAlertConfigs(ctx context.Context, in *GetAlertConfigsRequest, opts ...grpc.CallOption) (*GetAlertConfigsResponse, error) {
	out := new(GetAlertConfigsResponse)
	err := c.cc.Invoke(ctx, FlowService_GetAlertConfigs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) PostAlertConfig(ctx context.Context, in *PostAlertConfigRequest, opts ...grpc.CallOption) (*PostAlertConfigResponse, error) {
	out := new(PostAlertConfigResponse)
	err := c.cc.Invoke(ctx, FlowService_PostAlertConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) DeleteAlertConfig(ctx context.Context, in *DeleteAlertConfigRequest, opts ...grpc.CallOption) (*DeleteAlertConfigResponse, error) {
	out := new(DeleteAlertConfigResponse)
	err := c.cc.Invoke(ctx, FlowService_DeleteAlertConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) GetDynamicSettings(ctx context.Context, in *GetDynamicSettingsRequest, opts ...grpc.CallOption) (*GetDynamicSettingsResponse, error) {
	out := new(GetDynamicSettingsResponse)
	err := c.cc.Invoke(ctx, FlowService_GetDynamicSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) PostDynamicSetting(ctx context.Context, in *PostDynamicSettingRequest, opts ...grpc.CallOption) (*PostDynamicSettingResponse, error) {
	out := new(PostDynamicSettingResponse)
	err := c.cc.Invoke(ctx, FlowService_PostDynamicSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) GetScripts(ctx context.Context, in *GetScriptsRequest, opts ...grpc.CallOption) (*GetScriptsResponse, error) {
	out := new(GetScriptsResponse)
	err := c.cc.Invoke(ctx, FlowService_GetScripts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) PostScript(ctx context.Context, in *PostScriptRequest, opts ...grpc.CallOption) (*PostScriptResponse, error) {
	out := new(PostScriptResponse)
	err := c.cc.Invoke(ctx, FlowService_PostScript_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) DeleteScript(ctx context.Context, in *DeleteScriptRequest, opts ...grpc.CallOption) (*DeleteScriptResponse, error) {
	out := new(DeleteScriptResponse)
	err := c.cc.Invoke(ctx, FlowService_DeleteScript_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) CDCTableTotalCounts(ctx context.Context, in *CDCTableTotalCountsRequest, opts ...grpc.CallOption) (*CDCTableTotalCountsResponse, error) {
	out := new(CDCTableTotalCountsResponse)
	err := c.cc.Invoke(ctx, FlowService_CDCTableTotalCounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) GetSchemas(ctx context.Context, in *PostgresPeerActivityInfoRequest, opts ...grpc.CallOption) (*PeerSchemasResponse, error) {
	out := new(PeerSchemasResponse)
	err := c.cc.Invoke(ctx, FlowService_GetSchemas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) GetPublications(ctx context.Context, in *PostgresPeerActivityInfoRequest, opts ...grpc.CallOption) (*PeerPublicationsResponse, error) {
	out := new(PeerPublicationsResponse)
	err := c.cc.Invoke(ctx, FlowService_GetPublications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) GetTablesInSchema(ctx context.Context, in *SchemaTablesRequest, opts ...grpc.CallOption) (*SchemaTablesResponse, error) {
	out := new(SchemaTablesResponse)
	err := c.cc.Invoke(ctx, FlowService_GetTablesInSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) GetAllTables(ctx context.Context, in *PostgresPeerActivityInfoRequest, opts ...grpc.CallOption) (*AllTablesResponse, error) {
	out := new(AllTablesResponse)
	err := c.cc.Invoke(ctx, FlowService_GetAllTables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) GetColumns(ctx context.Context, in *TableColumnsRequest, opts ...grpc.CallOption) (*TableColumnsResponse, error) {
	out := new(TableColumnsResponse)
	err := c.cc.Invoke(ctx, FlowService_GetColumns_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) GetSlotInfo(ctx context.Context, in *PostgresPeerActivityInfoRequest, opts ...grpc.CallOption) (*PeerSlotResponse, error) {
	out := new(PeerSlotResponse)
	err := c.cc.Invoke(ctx, FlowService_GetSlotInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) GetSlotLagHistory(ctx context.Context, in *GetSlotLagHistoryRequest, opts ...grpc.CallOption) (*GetSlotLagHistoryResponse, error) {
	out := new(GetSlotLagHistoryResponse)
	err := c.cc.Invoke(ctx, FlowService_GetSlotLagHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) GetStatInfo(ctx context.Context, in *PostgresPeerActivityInfoRequest, opts ...grpc.CallOption) (*PeerStatResponse, error) {
	out := new(PeerStatResponse)
	err := c.cc.Invoke(ctx, FlowService_GetStatInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) ListMirrorLogs(ctx context.Context, in *ListMirrorLogsRequest, opts ...grpc.CallOption) (*ListMirrorLogsResponse, error) {
	out := new(ListMirrorLogsResponse)
	err := c.cc.Invoke(ctx, FlowService_ListMirrorLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) ListMirrors(ctx context.Context, in *ListMirrorsRequest, opts ...grpc.CallOption) (*ListMirrorsResponse, error) {
	out := new(ListMirrorsResponse)
	err := c.cc.Invoke(ctx, FlowService_ListMirrors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) ListMirrorNames(ctx context.Context, in *ListMirrorNamesRequest, opts ...grpc.CallOption) (*ListMirrorNamesResponse, error) {
	out := new(ListMirrorNamesResponse)
	err := c.cc.Invoke(ctx, FlowService_ListMirrorNames_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) FlowStateChange(ctx context.Context, in *FlowStateChangeRequest, opts ...grpc.CallOption) (*FlowStateChangeResponse, error) {
	out := new(FlowStateChangeResponse)
	err := c.cc.Invoke(ctx, FlowService_FlowStateChange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) MirrorStatus(ctx context.Context, in *MirrorStatusRequest, opts ...grpc.CallOption) (*MirrorStatusResponse, error) {
	out := new(MirrorStatusResponse)
	err := c.cc.Invoke(ctx, FlowService_MirrorStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) GetPeerInfo(ctx context.Context, in *PeerInfoRequest, opts ...grpc.CallOption) (*Peer, error) {
	out := new(Peer)
	err := c.cc.Invoke(ctx, FlowService_GetPeerInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) ListPeers(ctx context.Context, in *ListPeersRequest, opts ...grpc.CallOption) (*ListPeersResponse, error) {
	out := new(ListPeersResponse)
	err := c.cc.Invoke(ctx, FlowService_ListPeers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) GetVersion(ctx context.Context, in *PeerDBVersionRequest, opts ...grpc.CallOption) (*PeerDBVersionResponse, error) {
	out := new(PeerDBVersionResponse)
	err := c.cc.Invoke(ctx, FlowService_GetVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) ResyncMirror(ctx context.Context, in *ResyncMirrorRequest, opts ...grpc.CallOption) (*ResyncMirrorResponse, error) {
	out := new(ResyncMirrorResponse)
	err := c.cc.Invoke(ctx, FlowService_ResyncMirror_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlowServiceServer is the server API for FlowService service.
// All implementations must embed UnimplementedFlowServiceServer
// for forward compatibility
type FlowServiceServer interface {
	ValidatePeer(context.Context, *ValidatePeerRequest) (*ValidatePeerResponse, error)
	ValidateCDCMirror(context.Context, *CreateCDCFlowRequest) (*ValidateCDCMirrorResponse, error)
	CreatePeer(context.Context, *CreatePeerRequest) (*CreatePeerResponse, error)
	DropPeer(context.Context, *DropPeerRequest) (*DropPeerResponse, error)
	CreateCDCFlow(context.Context, *CreateCDCFlowRequest) (*CreateCDCFlowResponse, error)
	CreateQRepFlow(context.Context, *CreateQRepFlowRequest) (*CreateQRepFlowResponse, error)
	CustomSyncFlow(context.Context, *CreateCustomSyncRequest) (*CreateCustomSyncResponse, error)
	GetAlertConfigs(context.Context, *GetAlertConfigsRequest) (*GetAlertConfigsResponse, error)
	PostAlertConfig(context.Context, *PostAlertConfigRequest) (*PostAlertConfigResponse, error)
	DeleteAlertConfig(context.Context, *DeleteAlertConfigRequest) (*DeleteAlertConfigResponse, error)
	GetDynamicSettings(context.Context, *GetDynamicSettingsRequest) (*GetDynamicSettingsResponse, error)
	PostDynamicSetting(context.Context, *PostDynamicSettingRequest) (*PostDynamicSettingResponse, error)
	GetScripts(context.Context, *GetScriptsRequest) (*GetScriptsResponse, error)
	PostScript(context.Context, *PostScriptRequest) (*PostScriptResponse, error)
	DeleteScript(context.Context, *DeleteScriptRequest) (*DeleteScriptResponse, error)
	CDCTableTotalCounts(context.Context, *CDCTableTotalCountsRequest) (*CDCTableTotalCountsResponse, error)
	GetSchemas(context.Context, *PostgresPeerActivityInfoRequest) (*PeerSchemasResponse, error)
	GetPublications(context.Context, *PostgresPeerActivityInfoRequest) (*PeerPublicationsResponse, error)
	GetTablesInSchema(context.Context, *SchemaTablesRequest) (*SchemaTablesResponse, error)
	GetAllTables(context.Context, *PostgresPeerActivityInfoRequest) (*AllTablesResponse, error)
	GetColumns(context.Context, *TableColumnsRequest) (*TableColumnsResponse, error)
	GetSlotInfo(context.Context, *PostgresPeerActivityInfoRequest) (*PeerSlotResponse, error)
	GetSlotLagHistory(context.Context, *GetSlotLagHistoryRequest) (*GetSlotLagHistoryResponse, error)
	GetStatInfo(context.Context, *PostgresPeerActivityInfoRequest) (*PeerStatResponse, error)
	ListMirrorLogs(context.Context, *ListMirrorLogsRequest) (*ListMirrorLogsResponse, error)
	ListMirrors(context.Context, *ListMirrorsRequest) (*ListMirrorsResponse, error)
	ListMirrorNames(context.Context, *ListMirrorNamesRequest) (*ListMirrorNamesResponse, error)
	FlowStateChange(context.Context, *FlowStateChangeRequest) (*FlowStateChangeResponse, error)
	MirrorStatus(context.Context, *MirrorStatusRequest) (*MirrorStatusResponse, error)
	GetPeerInfo(context.Context, *PeerInfoRequest) (*Peer, error)
	ListPeers(context.Context, *ListPeersRequest) (*ListPeersResponse, error)
	GetVersion(context.Context, *PeerDBVersionRequest) (*PeerDBVersionResponse, error)
	ResyncMirror(context.Context, *ResyncMirrorRequest) (*ResyncMirrorResponse, error)
	mustEmbedUnimplementedFlowServiceServer()
}

// UnimplementedFlowServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFlowServiceServer struct {
}

func (UnimplementedFlowServiceServer) ValidatePeer(context.Context, *ValidatePeerRequest) (*ValidatePeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePeer not implemented")
}
func (UnimplementedFlowServiceServer) ValidateCDCMirror(context.Context, *CreateCDCFlowRequest) (*ValidateCDCMirrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateCDCMirror not implemented")
}
func (UnimplementedFlowServiceServer) CreatePeer(context.Context, *CreatePeerRequest) (*CreatePeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePeer not implemented")
}
func (UnimplementedFlowServiceServer) DropPeer(context.Context, *DropPeerRequest) (*DropPeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropPeer not implemented")
}
func (UnimplementedFlowServiceServer) CreateCDCFlow(context.Context, *CreateCDCFlowRequest) (*CreateCDCFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCDCFlow not implemented")
}
func (UnimplementedFlowServiceServer) CreateQRepFlow(context.Context, *CreateQRepFlowRequest) (*CreateQRepFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQRepFlow not implemented")
}
func (UnimplementedFlowServiceServer) CustomSyncFlow(context.Context, *CreateCustomSyncRequest) (*CreateCustomSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomSyncFlow not implemented")
}
func (UnimplementedFlowServiceServer) GetAlertConfigs(context.Context, *GetAlertConfigsRequest) (*GetAlertConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertConfigs not implemented")
}
func (UnimplementedFlowServiceServer) PostAlertConfig(context.Context, *PostAlertConfigRequest) (*PostAlertConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAlertConfig not implemented")
}
func (UnimplementedFlowServiceServer) DeleteAlertConfig(context.Context, *DeleteAlertConfigRequest) (*DeleteAlertConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlertConfig not implemented")
}
func (UnimplementedFlowServiceServer) GetDynamicSettings(context.Context, *GetDynamicSettingsRequest) (*GetDynamicSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDynamicSettings not implemented")
}
func (UnimplementedFlowServiceServer) PostDynamicSetting(context.Context, *PostDynamicSettingRequest) (*PostDynamicSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostDynamicSetting not implemented")
}
func (UnimplementedFlowServiceServer) GetScripts(context.Context, *GetScriptsRequest) (*GetScriptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScripts not implemented")
}
func (UnimplementedFlowServiceServer) PostScript(context.Context, *PostScriptRequest) (*PostScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostScript not implemented")
}
func (UnimplementedFlowServiceServer) DeleteScript(context.Context, *DeleteScriptRequest) (*DeleteScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScript not implemented")
}
func (UnimplementedFlowServiceServer) CDCTableTotalCounts(context.Context, *CDCTableTotalCountsRequest) (*CDCTableTotalCountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CDCTableTotalCounts not implemented")
}
func (UnimplementedFlowServiceServer) GetSchemas(context.Context, *PostgresPeerActivityInfoRequest) (*PeerSchemasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchemas not implemented")
}
func (UnimplementedFlowServiceServer) GetPublications(context.Context, *PostgresPeerActivityInfoRequest) (*PeerPublicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublications not implemented")
}
func (UnimplementedFlowServiceServer) GetTablesInSchema(context.Context, *SchemaTablesRequest) (*SchemaTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTablesInSchema not implemented")
}
func (UnimplementedFlowServiceServer) GetAllTables(context.Context, *PostgresPeerActivityInfoRequest) (*AllTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTables not implemented")
}
func (UnimplementedFlowServiceServer) GetColumns(context.Context, *TableColumnsRequest) (*TableColumnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColumns not implemented")
}
func (UnimplementedFlowServiceServer) GetSlotInfo(context.Context, *PostgresPeerActivityInfoRequest) (*PeerSlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlotInfo not implemented")
}
func (UnimplementedFlowServiceServer) GetSlotLagHistory(context.Context, *GetSlotLagHistoryRequest) (*GetSlotLagHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlotLagHistory not implemented")
}
func (UnimplementedFlowServiceServer) GetStatInfo(context.Context, *PostgresPeerActivityInfoRequest) (*PeerStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatInfo not implemented")
}
func (UnimplementedFlowServiceServer) ListMirrorLogs(context.Context, *ListMirrorLogsRequest) (*ListMirrorLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMirrorLogs not implemented")
}
func (UnimplementedFlowServiceServer) ListMirrors(context.Context, *ListMirrorsRequest) (*ListMirrorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMirrors not implemented")
}
func (UnimplementedFlowServiceServer) ListMirrorNames(context.Context, *ListMirrorNamesRequest) (*ListMirrorNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMirrorNames not implemented")
}
func (UnimplementedFlowServiceServer) FlowStateChange(context.Context, *FlowStateChangeRequest) (*FlowStateChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlowStateChange not implemented")
}
func (UnimplementedFlowServiceServer) MirrorStatus(context.Context, *MirrorStatusRequest) (*MirrorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MirrorStatus not implemented")
}
func (UnimplementedFlowServiceServer) GetPeerInfo(context.Context, *PeerInfoRequest) (*Peer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeerInfo not implemented")
}
func (UnimplementedFlowServiceServer) ListPeers(context.Context, *ListPeersRequest) (*ListPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPeers not implemented")
}
func (UnimplementedFlowServiceServer) GetVersion(context.Context, *PeerDBVersionRequest) (*PeerDBVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedFlowServiceServer) ResyncMirror(context.Context, *ResyncMirrorRequest) (*ResyncMirrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResyncMirror not implemented")
}
func (UnimplementedFlowServiceServer) mustEmbedUnimplementedFlowServiceServer() {}

// UnsafeFlowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlowServiceServer will
// result in compilation errors.
type UnsafeFlowServiceServer interface {
	mustEmbedUnimplementedFlowServiceServer()
}

func RegisterFlowServiceServer(s grpc.ServiceRegistrar, srv FlowServiceServer) {
	s.RegisterService(&FlowService_ServiceDesc, srv)
}

func _FlowService_ValidatePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatePeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).ValidatePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_ValidatePeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).ValidatePeer(ctx, req.(*ValidatePeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_ValidateCDCMirror_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCDCFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).ValidateCDCMirror(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_ValidateCDCMirror_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).ValidateCDCMirror(ctx, req.(*CreateCDCFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_CreatePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).CreatePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_CreatePeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).CreatePeer(ctx, req.(*CreatePeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_DropPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).DropPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_DropPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).DropPeer(ctx, req.(*DropPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_CreateCDCFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCDCFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).CreateCDCFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_CreateCDCFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).CreateCDCFlow(ctx, req.(*CreateCDCFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_CreateQRepFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQRepFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).CreateQRepFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_CreateQRepFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).CreateQRepFlow(ctx, req.(*CreateQRepFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_CustomSyncFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).CustomSyncFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_CustomSyncFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).CustomSyncFlow(ctx, req.(*CreateCustomSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_GetAlertConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlertConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).GetAlertConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_GetAlertConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).GetAlertConfigs(ctx, req.(*GetAlertConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_PostAlertConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAlertConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).PostAlertConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_PostAlertConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).PostAlertConfig(ctx, req.(*PostAlertConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_DeleteAlertConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlertConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).DeleteAlertConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_DeleteAlertConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).DeleteAlertConfig(ctx, req.(*DeleteAlertConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_GetDynamicSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDynamicSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).GetDynamicSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_GetDynamicSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).GetDynamicSettings(ctx, req.(*GetDynamicSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_PostDynamicSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostDynamicSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).PostDynamicSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_PostDynamicSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).PostDynamicSetting(ctx, req.(*PostDynamicSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_GetScripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScriptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).GetScripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_GetScripts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).GetScripts(ctx, req.(*GetScriptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_PostScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).PostScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_PostScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).PostScript(ctx, req.(*PostScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_DeleteScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).DeleteScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_DeleteScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).DeleteScript(ctx, req.(*DeleteScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_CDCTableTotalCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CDCTableTotalCountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).CDCTableTotalCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_CDCTableTotalCounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).CDCTableTotalCounts(ctx, req.(*CDCTableTotalCountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_GetSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostgresPeerActivityInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).GetSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_GetSchemas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).GetSchemas(ctx, req.(*PostgresPeerActivityInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_GetPublications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostgresPeerActivityInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).GetPublications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_GetPublications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).GetPublications(ctx, req.(*PostgresPeerActivityInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_GetTablesInSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchemaTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).GetTablesInSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_GetTablesInSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).GetTablesInSchema(ctx, req.(*SchemaTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_GetAllTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostgresPeerActivityInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).GetAllTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_GetAllTables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).GetAllTables(ctx, req.(*PostgresPeerActivityInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_GetColumns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableColumnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).GetColumns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_GetColumns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).GetColumns(ctx, req.(*TableColumnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_GetSlotInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostgresPeerActivityInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).GetSlotInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_GetSlotInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).GetSlotInfo(ctx, req.(*PostgresPeerActivityInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_GetSlotLagHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSlotLagHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).GetSlotLagHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_GetSlotLagHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).GetSlotLagHistory(ctx, req.(*GetSlotLagHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_GetStatInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostgresPeerActivityInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).GetStatInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_GetStatInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).GetStatInfo(ctx, req.(*PostgresPeerActivityInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_ListMirrorLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMirrorLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).ListMirrorLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_ListMirrorLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).ListMirrorLogs(ctx, req.(*ListMirrorLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_ListMirrors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMirrorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).ListMirrors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_ListMirrors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).ListMirrors(ctx, req.(*ListMirrorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_ListMirrorNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMirrorNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).ListMirrorNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_ListMirrorNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).ListMirrorNames(ctx, req.(*ListMirrorNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_FlowStateChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowStateChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).FlowStateChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_FlowStateChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).FlowStateChange(ctx, req.(*FlowStateChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_MirrorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MirrorStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).MirrorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_MirrorStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).MirrorStatus(ctx, req.(*MirrorStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_GetPeerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).GetPeerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_GetPeerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).GetPeerInfo(ctx, req.(*PeerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_ListPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).ListPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_ListPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).ListPeers(ctx, req.(*ListPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerDBVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).GetVersion(ctx, req.(*PeerDBVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_ResyncMirror_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResyncMirrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).ResyncMirror(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowService_ResyncMirror_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).ResyncMirror(ctx, req.(*ResyncMirrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlowService_ServiceDesc is the grpc.ServiceDesc for FlowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "peerdb_route.FlowService",
	HandlerType: (*FlowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidatePeer",
			Handler:    _FlowService_ValidatePeer_Handler,
		},
		{
			MethodName: "ValidateCDCMirror",
			Handler:    _FlowService_ValidateCDCMirror_Handler,
		},
		{
			MethodName: "CreatePeer",
			Handler:    _FlowService_CreatePeer_Handler,
		},
		{
			MethodName: "DropPeer",
			Handler:    _FlowService_DropPeer_Handler,
		},
		{
			MethodName: "CreateCDCFlow",
			Handler:    _FlowService_CreateCDCFlow_Handler,
		},
		{
			MethodName: "CreateQRepFlow",
			Handler:    _FlowService_CreateQRepFlow_Handler,
		},
		{
			MethodName: "CustomSyncFlow",
			Handler:    _FlowService_CustomSyncFlow_Handler,
		},
		{
			MethodName: "GetAlertConfigs",
			Handler:    _FlowService_GetAlertConfigs_Handler,
		},
		{
			MethodName: "PostAlertConfig",
			Handler:    _FlowService_PostAlertConfig_Handler,
		},
		{
			MethodName: "DeleteAlertConfig",
			Handler:    _FlowService_DeleteAlertConfig_Handler,
		},
		{
			MethodName: "GetDynamicSettings",
			Handler:    _FlowService_GetDynamicSettings_Handler,
		},
		{
			MethodName: "PostDynamicSetting",
			Handler:    _FlowService_PostDynamicSetting_Handler,
		},
		{
			MethodName: "GetScripts",
			Handler:    _FlowService_GetScripts_Handler,
		},
		{
			MethodName: "PostScript",
			Handler:    _FlowService_PostScript_Handler,
		},
		{
			MethodName: "DeleteScript",
			Handler:    _FlowService_DeleteScript_Handler,
		},
		{
			MethodName: "CDCTableTotalCounts",
			Handler:    _FlowService_CDCTableTotalCounts_Handler,
		},
		{
			MethodName: "GetSchemas",
			Handler:    _FlowService_GetSchemas_Handler,
		},
		{
			MethodName: "GetPublications",
			Handler:    _FlowService_GetPublications_Handler,
		},
		{
			MethodName: "GetTablesInSchema",
			Handler:    _FlowService_GetTablesInSchema_Handler,
		},
		{
			MethodName: "GetAllTables",
			Handler:    _FlowService_GetAllTables_Handler,
		},
		{
			MethodName: "GetColumns",
			Handler:    _FlowService_GetColumns_Handler,
		},
		{
			MethodName: "GetSlotInfo",
			Handler:    _FlowService_GetSlotInfo_Handler,
		},
		{
			MethodName: "GetSlotLagHistory",
			Handler:    _FlowService_GetSlotLagHistory_Handler,
		},
		{
			MethodName: "GetStatInfo",
			Handler:    _FlowService_GetStatInfo_Handler,
		},
		{
			MethodName: "ListMirrorLogs",
			Handler:    _FlowService_ListMirrorLogs_Handler,
		},
		{
			MethodName: "ListMirrors",
			Handler:    _FlowService_ListMirrors_Handler,
		},
		{
			MethodName: "ListMirrorNames",
			Handler:    _FlowService_ListMirrorNames_Handler,
		},
		{
			MethodName: "FlowStateChange",
			Handler:    _FlowService_FlowStateChange_Handler,
		},
		{
			MethodName: "MirrorStatus",
			Handler:    _FlowService_MirrorStatus_Handler,
		},
		{
			MethodName: "GetPeerInfo",
			Handler:    _FlowService_GetPeerInfo_Handler,
		},
		{
			MethodName: "ListPeers",
			Handler:    _FlowService_ListPeers_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _FlowService_GetVersion_Handler,
		},
		{
			MethodName: "ResyncMirror",
			Handler:    _FlowService_ResyncMirror_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "route.proto",
}
