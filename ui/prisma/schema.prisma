generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["peerdb_stats", "public"]
}

model flows {
  id                           Int      @id @default(autoincrement())
  name                         String   @db.VarChar(255)
  source_peer                  Int
  destination_peer             Int
  description                  String?
  created_at                   DateTime @default(now()) @db.Timestamp(6)
  updated_at                   DateTime @default(now()) @db.Timestamp(6)
  source_table_identifier      String?
  destination_table_identifier String?
  workflow_id                  String?
  flow_status                  String?
  flow_metadata                Json?
  query_string                 String?
  config_proto                 Bytes?
  destinationPeer              peers    @relation("flows_destination_peerTopeers", fields: [destination_peer], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sourcePeer                   peers    @relation("flows_source_peerTopeers", fields: [source_peer], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model peer_connections {
  id        Int       @id @default(autoincrement())
  conn_uuid String?   @db.Uuid
  peer_name String
  query     String?
  opened_at DateTime  @default(now()) @db.Timestamptz(6)
  closed_at DateTime? @db.Timestamptz(6)
  peers     peers     @relation(fields: [peer_name], references: [name], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model peers {
  id                                  Int                @id @default(autoincrement())
  name                                String             @unique
  type                                Int
  options                             Bytes
  flows_flows_destination_peerTopeers flows[]            @relation("flows_destination_peerTopeers")
  flows_flows_source_peerTopeers      flows[]            @relation("flows_source_peerTopeers")
  peer_connections                    peer_connections[]

  @@schema("public")
}

model refinery_schema_history {
  version    Int     @id
  name       String? @db.VarChar(255)
  applied_on String? @db.VarChar(255)
  checksum   String? @db.VarChar(255)

  @@ignore
  @@schema("public")
}

model cdc_batch_table {
  flow_name              String
  batch_id               BigInt
  destination_table_name String
  num_rows               BigInt
  metadata               Json?
  id                     Int       @id @default(autoincrement())
  insert_count           Int?
  update_count           Int?
  delete_count           Int?
  cdc_flows              cdc_flows @relation(fields: [flow_name], references: [flow_name], onDelete: Cascade, onUpdate: NoAction, map: "fk_cdc_batch_table_flow_name")

  @@index([flow_name, batch_id], map: "idx_cdc_batch_table_flow_name_batch_id")
  @@schema("peerdb_stats")
}

model cdc_batches {
  flow_name       String
  batch_id        BigInt
  rows_in_batch   Int
  batch_start_lsn Decimal   @db.Decimal
  batch_end_lsn   Decimal   @db.Decimal
  start_time      DateTime  @db.Timestamp(6)
  end_time        DateTime? @db.Timestamp(6)
  metadata        Json?
  id              Int       @id @default(autoincrement())
  cdc_flows       cdc_flows @relation(fields: [flow_name], references: [flow_name], onDelete: Cascade, onUpdate: NoAction, map: "fk_cdc_batches_flow_name")

  @@index([batch_id], map: "idx_cdc_batches_batch_id")
  @@index([flow_name], map: "idx_cdc_batches_flow_name", type: Hash)
  @@index([start_time], map: "idx_cdc_batches_start_time")
  @@schema("peerdb_stats")
}

model cdc_flows {
  flow_name            String            @id
  latest_lsn_at_source Decimal           @db.Decimal
  latest_lsn_at_target Decimal           @db.Decimal
  metadata             Json?
  cdc_batch_table      cdc_batch_table[]
  cdc_batches          cdc_batches[]

  @@schema("peerdb_stats")
}

model qrep_partitions {
  flow_name         String
  run_uuid          String
  partition_uuid    String
  partition_start   String
  partition_end     String
  rows_in_partition Int?
  start_time        DateTime? @db.Timestamp(6)
  pull_end_time     DateTime? @db.Timestamp(6)
  end_time          DateTime? @db.Timestamp(6)
  restart_count     Int
  metadata          Json?
  id                Int       @id @default(autoincrement())
  rows_synced       Int?
  qrep_runs         qrep_runs @relation(fields: [flow_name, run_uuid], references: [flow_name, run_uuid], onDelete: Cascade, onUpdate: NoAction, map: "fk_qrep_partitions_run")

  @@unique([run_uuid, partition_uuid])
  @@index([flow_name, run_uuid], map: "idx_qrep_partitions_flow_name_run_uuid")
  @@index([partition_uuid], map: "idx_qrep_partitions_partition_uuid", type: Hash)
  @@index([start_time], map: "idx_qrep_partitions_start_time")
  @@schema("peerdb_stats")
}

model qrep_runs {
  flow_name            String
  run_uuid             String
  start_time           DateTime?         @db.Timestamp(6)
  end_time             DateTime?         @db.Timestamp(6)
  metadata             Json?
  config_proto         Bytes?
  id                   Int               @id @default(autoincrement())
  destination_table    String?
  source_table         String?
  fetch_complete       Boolean?          @default(false)
  consolidate_complete Boolean?          @default(false)
  qrep_partitions      qrep_partitions[]

  @@unique([flow_name, run_uuid], map: "uq_qrep_runs_flow_run")
  @@index([flow_name], map: "idx_qrep_runs_flow_name", type: Hash)
  @@index([run_uuid], map: "idx_qrep_runs_run_uuid", type: Hash)
  @@index([start_time], map: "idx_qrep_runs_start_time")
  @@schema("peerdb_stats")
}

model peer_slot_size {
  id                  Int      @id @default(autoincrement())
  slot_name           String
  peer_name           String
  redo_lsn            String?
  restart_lsn         String?
  confirmed_flush_lsn String?
  slot_size           BigInt?
  updated_at          DateTime @default(now()) @db.Timestamp(6)
  wal_status          String?

  @@index([slot_name], map: "index_slot_name")
  @@index([updated_at], map: "index_slot_updated_at")
  @@schema("peerdb_stats")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model alerting_config {
  id             BigInt @id @default(autoincrement())
  service_type   String
  service_config Json

  @@schema("peerdb_stats")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model alerts_v1 {
  id                BigInt    @id @default(autoincrement())
  alert_key         String
  alert_level       String    @default("critical")
  alert_message     String
  created_timestamp DateTime? @default(now()) @db.Timestamp(6)
  alert_config_id   BigInt?

  @@schema("peerdb_stats")
}

model flow_errors {
  id              BigInt   @id @default(autoincrement())
  flow_name       String
  error_message   String
  error_type      String
  error_timestamp DateTime @default(now()) @db.Timestamp(6)
  ack             Boolean  @default(false)

  @@index([flow_name], map: "idx_flow_errors_flow_name")
  @@schema("peerdb_stats")
}

model schema_deltas_audit_log {
  id             BigInt    @id @default(autoincrement())
  flow_job_name  String
  read_timestamp DateTime? @default(now()) @db.Timestamp(6)
  workflow_id    String
  run_id         String
  delta_info     Json

  @@schema("peerdb_stats")
}

model alerting_settings {
  id           Int    @id(map: "alerting_settings_pkey1") @default(autoincrement())
  config_name  String
  config_value String

  @@schema("public")
}

model dynamic_settings {
  id                  Int      @id(map: "alerting_settings_pkey") @default(autoincrement())
  config_name         String   @unique(map: "idx_alerting_settings_config_name")
  config_value        String
  setting_description String?
  needs_restart       Boolean?

  @@schema("public")
}

model metadata_last_sync_state {
  job_name           String   @id
  last_offset        BigInt
  updated_at         DateTime @default(now()) @db.Timestamptz(6)
  sync_batch_id      BigInt
  normalize_batch_id BigInt?

  @@schema("public")
}

model metadata_qrep_partitions {
  job_name         String
  partition_id     String
  sync_partition   Json     @db.Json
  sync_start_time  DateTime @db.Timestamptz(6)
  sync_finish_time DateTime @default(now()) @db.Timestamptz(6)

  @@id([job_name, partition_id])
  @@schema("public")
}

model scripts {
  id     Int         @id @default(autoincrement())
  lang   script_lang
  name   String      @unique
  source Bytes

  @@schema("public")
}

enum script_lang {
  lua

  @@schema("public")
}
