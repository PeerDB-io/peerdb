version: '3.9'

services:
  temporalite:
    container_name: temporalite
    image: slamdev/temporalite:0.3.0
    entrypoint: |
      temporalite start -n default --ephemeral --ip 0.0.0.0 --log-level warn
    volumes:
      - temporalitedata:/data
    ports:
      - 7233:7233
      - 8233:8233

  temporal-admin-tools:
    container_name: temporal-admin-tools
    depends_on:
      - temporalite
    environment:
      - TEMPORAL_CLI_ADDRESS=temporalite:7233
    image: temporalio/admin-tools:1.17.5
    stdin_open: true
    tty: true
    healthcheck:
      test:
        [
          "CMD",
          "tctl",
          "--address",
          "temporalite:7233",
          "workflow",
          "list"
        ]
      interval: 1s
      timeout: 5s
      retries: 30

  catalog:
    container_name: catalog
    image: debezium/postgres:15-alpine
    ports:
      # mapping is from host to container
      - 9901:5432
    environment:
      PGUSER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready",
          "-d",
          "postgres",
          "-U",
          "postgres"
        ]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 60s

  flow_api:
    container_name: flow_api
    build:
      context: .
      dockerfile: stacks/flow-api.Dockerfile
    ports:
      - 8112:8112
    environment:
      TEMPORAL_HOST_PORT: temporalite:7233
    depends_on:
      temporal-admin-tools:
        condition: service_healthy

  flow_worker1:
    container_name: flow_worker1
    build:
      context: .
      dockerfile: stacks/flow-worker.Dockerfile
    environment:
      ENABLE_PROFILING: true
      ENABLE_METRICS: true
      PROFILING_SERVER: 0.0.0.0:6060
      METRICS_SERVER: 0.0.0.0:6061
      TEMPORAL_HOST_PORT: temporalite:7233
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-""}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-""}
      AWS_REGION: ${AWS_REGION:-""}
    ports:
      - 6060:6060
      - 6061:6061
    depends_on:
      temporal-admin-tools:
        condition: service_healthy

  flow_worker2:
    container_name: flow_worker2
    build:
      context: .
      dockerfile: stacks/flow-worker.Dockerfile
    environment:
      ENABLE_PROFILING: true
      ENABLE_METRICS: false
      PROFILING_SERVER: 0.0.0.0:6062
      METRICS_SERVER: 0.0.0.0:6063
      TEMPORAL_HOST_PORT: temporalite:7233
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-""}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-""}
      AWS_REGION: ${AWS_REGION:-""}
    ports:
      - 6062:6062
      - 6063:6063
    profiles:
      - multi
      - multi-metrics
    depends_on:
      temporal-admin-tools:
        condition: service_healthy

  flow_worker3:
    container_name: flow_worker3
    build:
      context: .
      dockerfile: stacks/flow-worker.Dockerfile
    environment:
      ENABLE_PROFILING: true
      ENABLE_METRICS: false
      PROFILING_SERVER: 0.0.0.0:6064
      METRICS_SERVER: 0.0.0.0:6065
      TEMPORAL_HOST_PORT: temporalite:7233
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-""}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-""}
      AWS_REGION: ${AWS_REGION:-""}
    ports:
      - 6064:6064
      - 6065:6065
    profiles:
      - multi
      - multi-metrics
    depends_on:
      temporal-admin-tools:
        condition: service_healthy

  peerdb:
    container_name: peerdb_server
    build:
      context: .
      dockerfile: stacks/nexus.Dockerfile
    environment:
      PEERDB_LOG_DIR: /var/log/peerdb
      PEERDB_CATALOG_HOST: catalog
      PEERDB_CATALOG_PORT: 5432
      PEERDB_CATALOG_USER: postgres
      PEERDB_CATALOG_PASSWORD: postgres
      PEERDB_CATALOG_DATABASE: postgres
      PEERDB_PASSWORD: peerdb
      PEERDB_FLOW_SERVER_ADDRESS: grpc://flow_api:8112
      RUST_LOG: info
      RUST_BACKTRACE: 1
    ports:
      - 9900:9900
    depends_on:
      catalog:
        condition: service_healthy

  peerdb_prometheus:
    container_name: peerdb_prometheus
    build:
      context: .
      dockerfile: stacks/prometheus.Dockerfile
    volumes:
      - prometheusdata:/prometheus
    ports:
      - 9090:9090
    profiles:
      - multi-metrics
      - metrics

  peerdb_grafana:
    container_name: peerdb_grafana
    build:
      context: .
      dockerfile: stacks/grafana.Dockerfile
    ports:
      - 3000:3000
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: peerdb
    profiles:
      - multi-metrics
      - metrics

volumes:
  pgdata:
  temporalitedata:
  prometheusdata:
