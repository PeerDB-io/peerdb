version: "3.9"

x-catalog-config: &catalog-config
  PEERDB_CATALOG_HOST: catalog
  PEERDB_CATALOG_PORT: 5432
  PEERDB_CATALOG_USER: postgres
  PEERDB_CATALOG_PASSWORD: postgres
  PEERDB_CATALOG_DATABASE: postgres

x-flow-worker-env: &flow-worker-env
  <<: *catalog-config
  TEMPORAL_HOST_PORT: temporal:7233
  AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-""}
  AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-""}
  AWS_REGION: ${AWS_REGION:-""}

services:
  catalog:
    container_name: catalog
    image: debezium/postgres:15-alpine
    ports:
      - 9901:5432
    environment:
      PGUSER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "postgres", "-U", "postgres"]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 60s

  temporal:
    container_name: temporal
    depends_on:
      catalog:
        condition: service_healthy
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PWD=postgres
      - POSTGRES_SEEDS=catalog
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
    image: temporalio/auto-setup:1.21.3
    ports:
      - 7233:7233
    volumes:
      - ./temporal-dynamicconfig:/etc/temporal/config/dynamicconfig
    labels:
      kompose.volume.type: configMap

  temporal-admin-tools:
    container_name: temporal-admin-tools
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    image: temporalio/admin-tools:1.21.3
    stdin_open: true
    tty: true
    healthcheck:
      test: ["CMD", "tctl", "workflow", "list"]
      interval: 1s
      timeout: 5s
      retries: 30

  temporal-ui:
    container_name: temporal-ui
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    image: temporalio/ui:2.17.2
    ports:
      - 8085:8080

  flow_api:
    container_name: flow_api
    build:
      context: .
      dockerfile: stacks/flow-api.Dockerfile
    ports:
      - 8112:8112
    environment:
      TEMPORAL_HOST_PORT: temporal:7233
    depends_on:
      temporal-admin-tools:
        condition: service_healthy

  flow_snapshot_worker:
    container_name: flow_snapshot_worker
    build:
      context: .
      dockerfile: stacks/flow-snapshot-worker.Dockerfile
    environment:
      TEMPORAL_HOST_PORT: temporal:7233
    depends_on:
      temporal-admin-tools:
        condition: service_healthy

  flow_worker1:
    container_name: flow_worker1
    build:
      context: .
      dockerfile: stacks/flow-worker.Dockerfile
    environment:
      <<: *flow-worker-env
      ENABLE_PROFILING: true
      ENABLE_METRICS: true
      PROFILING_SERVER: 0.0.0.0:6060
      METRICS_SERVER: 0.0.0.0:6061
    ports:
      - 6060:6060
      - 6061:6061
    depends_on:
      temporal-admin-tools:
        condition: service_healthy

  flow_worker2:
    container_name: flow_worker2
    build:
      context: .
      dockerfile: stacks/flow-worker.Dockerfile
    environment:
      <<: *flow-worker-env
      ENABLE_PROFILING: true
      ENABLE_METRICS: false
      PROFILING_SERVER: 0.0.0.0:6062
      METRICS_SERVER: 0.0.0.0:6063
    ports:
      - 6062:6062
      - 6063:6063
    profiles:
      - multi
      - multi-metrics
    depends_on:
      temporal-admin-tools:
        condition: service_healthy

  flow_worker3:
    container_name: flow_worker3
    build:
      context: .
      dockerfile: stacks/flow-worker.Dockerfile
    environment:
      <<: *flow-worker-env
      ENABLE_PROFILING: true
      ENABLE_METRICS: false
      PROFILING_SERVER: 0.0.0.0:6064
      METRICS_SERVER: 0.0.0.0:6065
    ports:
      - 6064:6064
      - 6065:6065
    profiles:
      - multi
      - multi-metrics
    depends_on:
      temporal-admin-tools:
        condition: service_healthy

  peerdb:
    container_name: peerdb_server
    build:
      context: .
      dockerfile: stacks/nexus.Dockerfile
    environment:
      <<: *catalog-config
      PEERDB_LOG_DIR: /var/log/peerdb
      PEERDB_PASSWORD: peerdb
      PEERDB_FLOW_SERVER_ADDRESS: grpc://flow_api:8112
      RUST_LOG: info
      RUST_BACKTRACE: 1
    ports:
      - 9900:9900
    depends_on:
      catalog:
        condition: service_healthy

  peerdb_prometheus:
    container_name: peerdb_prometheus
    build:
      context: .
      dockerfile: stacks/prometheus.Dockerfile
    volumes:
      - prometheusdata:/prometheus
    ports:
      - 9090:9090
    profiles:
      - multi-metrics
      - metrics

  peerdb_grafana:
    container_name: peerdb_grafana
    build:
      context: .
      dockerfile: stacks/grafana.Dockerfile
    ports:
      - 3000:3000
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: peerdb
    profiles:
      - multi-metrics
      - metrics

volumes:
  pgdata:
  prometheusdata:
